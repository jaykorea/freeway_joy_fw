
check.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007390  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08007554  08007554  00017554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078ec  080078ec  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080078ec  080078ec  000178ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078f4  080078f4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007900  08007900  00017900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08007904  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  20000098  08007998  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001468  08007998  00021468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014752  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d93  00000000  00000000  00034816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000375b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00038268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002616e  00000000  00000000  00038e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001009c  00000000  00000000  0005efae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd138  00000000  00000000  0006f04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c182  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003964  00000000  00000000  0014c1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000098 	.word	0x20000098
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800753c 	.word	0x0800753c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000009c 	.word	0x2000009c
 8000200:	0800753c 	.word	0x0800753c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_dmul>:
 8000214:	b570      	push	{r4, r5, r6, lr}
 8000216:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800021e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000222:	bf1d      	ittte	ne
 8000224:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000228:	ea94 0f0c 	teqne	r4, ip
 800022c:	ea95 0f0c 	teqne	r5, ip
 8000230:	f000 f8de 	bleq	80003f0 <__aeabi_dmul+0x1dc>
 8000234:	442c      	add	r4, r5
 8000236:	ea81 0603 	eor.w	r6, r1, r3
 800023a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800023e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000242:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000246:	bf18      	it	ne
 8000248:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800024c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000254:	d038      	beq.n	80002c8 <__aeabi_dmul+0xb4>
 8000256:	fba0 ce02 	umull	ip, lr, r0, r2
 800025a:	f04f 0500 	mov.w	r5, #0
 800025e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000262:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000266:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026a:	f04f 0600 	mov.w	r6, #0
 800026e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000272:	f09c 0f00 	teq	ip, #0
 8000276:	bf18      	it	ne
 8000278:	f04e 0e01 	orrne.w	lr, lr, #1
 800027c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000280:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000284:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000288:	d204      	bcs.n	8000294 <__aeabi_dmul+0x80>
 800028a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800028e:	416d      	adcs	r5, r5
 8000290:	eb46 0606 	adc.w	r6, r6, r6
 8000294:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000298:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800029c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002ac:	bf88      	it	hi
 80002ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b2:	d81e      	bhi.n	80002f2 <__aeabi_dmul+0xde>
 80002b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002b8:	bf08      	it	eq
 80002ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002be:	f150 0000 	adcs.w	r0, r0, #0
 80002c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002cc:	ea46 0101 	orr.w	r1, r6, r1
 80002d0:	ea40 0002 	orr.w	r0, r0, r2
 80002d4:	ea81 0103 	eor.w	r1, r1, r3
 80002d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002dc:	bfc2      	ittt	gt
 80002de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002e6:	bd70      	popgt	{r4, r5, r6, pc}
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f04f 0e00 	mov.w	lr, #0
 80002f0:	3c01      	subs	r4, #1
 80002f2:	f300 80ab 	bgt.w	800044c <__aeabi_dmul+0x238>
 80002f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fa:	bfde      	ittt	le
 80002fc:	2000      	movle	r0, #0
 80002fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000302:	bd70      	pople	{r4, r5, r6, pc}
 8000304:	f1c4 0400 	rsb	r4, r4, #0
 8000308:	3c20      	subs	r4, #32
 800030a:	da35      	bge.n	8000378 <__aeabi_dmul+0x164>
 800030c:	340c      	adds	r4, #12
 800030e:	dc1b      	bgt.n	8000348 <__aeabi_dmul+0x134>
 8000310:	f104 0414 	add.w	r4, r4, #20
 8000314:	f1c4 0520 	rsb	r5, r4, #32
 8000318:	fa00 f305 	lsl.w	r3, r0, r5
 800031c:	fa20 f004 	lsr.w	r0, r0, r4
 8000320:	fa01 f205 	lsl.w	r2, r1, r5
 8000324:	ea40 0002 	orr.w	r0, r0, r2
 8000328:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800032c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	fa21 f604 	lsr.w	r6, r1, r4
 8000338:	eb42 0106 	adc.w	r1, r2, r6
 800033c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000340:	bf08      	it	eq
 8000342:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f1c4 040c 	rsb	r4, r4, #12
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f304 	lsl.w	r3, r0, r4
 8000354:	fa20 f005 	lsr.w	r0, r0, r5
 8000358:	fa01 f204 	lsl.w	r2, r1, r4
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000368:	f141 0100 	adc.w	r1, r1, #0
 800036c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000370:	bf08      	it	eq
 8000372:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000376:	bd70      	pop	{r4, r5, r6, pc}
 8000378:	f1c4 0520 	rsb	r5, r4, #32
 800037c:	fa00 f205 	lsl.w	r2, r0, r5
 8000380:	ea4e 0e02 	orr.w	lr, lr, r2
 8000384:	fa20 f304 	lsr.w	r3, r0, r4
 8000388:	fa01 f205 	lsl.w	r2, r1, r5
 800038c:	ea43 0302 	orr.w	r3, r3, r2
 8000390:	fa21 f004 	lsr.w	r0, r1, r4
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000398:	fa21 f204 	lsr.w	r2, r1, r4
 800039c:	ea20 0002 	bic.w	r0, r0, r2
 80003a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a8:	bf08      	it	eq
 80003aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f094 0f00 	teq	r4, #0
 80003b4:	d10f      	bne.n	80003d6 <__aeabi_dmul+0x1c2>
 80003b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ba:	0040      	lsls	r0, r0, #1
 80003bc:	eb41 0101 	adc.w	r1, r1, r1
 80003c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c4:	bf08      	it	eq
 80003c6:	3c01      	subeq	r4, #1
 80003c8:	d0f7      	beq.n	80003ba <__aeabi_dmul+0x1a6>
 80003ca:	ea41 0106 	orr.w	r1, r1, r6
 80003ce:	f095 0f00 	teq	r5, #0
 80003d2:	bf18      	it	ne
 80003d4:	4770      	bxne	lr
 80003d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003da:	0052      	lsls	r2, r2, #1
 80003dc:	eb43 0303 	adc.w	r3, r3, r3
 80003e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e4:	bf08      	it	eq
 80003e6:	3d01      	subeq	r5, #1
 80003e8:	d0f7      	beq.n	80003da <__aeabi_dmul+0x1c6>
 80003ea:	ea43 0306 	orr.w	r3, r3, r6
 80003ee:	4770      	bx	lr
 80003f0:	ea94 0f0c 	teq	r4, ip
 80003f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003f8:	bf18      	it	ne
 80003fa:	ea95 0f0c 	teqne	r5, ip
 80003fe:	d00c      	beq.n	800041a <__aeabi_dmul+0x206>
 8000400:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000404:	bf18      	it	ne
 8000406:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040a:	d1d1      	bne.n	80003b0 <__aeabi_dmul+0x19c>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800041e:	bf06      	itte	eq
 8000420:	4610      	moveq	r0, r2
 8000422:	4619      	moveq	r1, r3
 8000424:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000428:	d019      	beq.n	800045e <__aeabi_dmul+0x24a>
 800042a:	ea94 0f0c 	teq	r4, ip
 800042e:	d102      	bne.n	8000436 <__aeabi_dmul+0x222>
 8000430:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000434:	d113      	bne.n	800045e <__aeabi_dmul+0x24a>
 8000436:	ea95 0f0c 	teq	r5, ip
 800043a:	d105      	bne.n	8000448 <__aeabi_dmul+0x234>
 800043c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000440:	bf1c      	itt	ne
 8000442:	4610      	movne	r0, r2
 8000444:	4619      	movne	r1, r3
 8000446:	d10a      	bne.n	800045e <__aeabi_dmul+0x24a>
 8000448:	ea81 0103 	eor.w	r1, r1, r3
 800044c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000450:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd70      	pop	{r4, r5, r6, pc}
 800045e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000462:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000466:	bd70      	pop	{r4, r5, r6, pc}

08000468 <__aeabi_drsub>:
 8000468:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e002      	b.n	8000474 <__adddf3>
 800046e:	bf00      	nop

08000470 <__aeabi_dsub>:
 8000470:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000474 <__adddf3>:
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	bf1f      	itttt	ne
 800048a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800048e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000492:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000496:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049a:	f000 80e2 	beq.w	8000662 <__adddf3+0x1ee>
 800049e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004a6:	bfb8      	it	lt
 80004a8:	426d      	neglt	r5, r5
 80004aa:	dd0c      	ble.n	80004c6 <__adddf3+0x52>
 80004ac:	442c      	add	r4, r5
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	ea82 0000 	eor.w	r0, r2, r0
 80004ba:	ea83 0101 	eor.w	r1, r3, r1
 80004be:	ea80 0202 	eor.w	r2, r0, r2
 80004c2:	ea81 0303 	eor.w	r3, r1, r3
 80004c6:	2d36      	cmp	r5, #54	; 0x36
 80004c8:	bf88      	it	hi
 80004ca:	bd30      	pophi	{r4, r5, pc}
 80004cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x70>
 80004de:	4240      	negs	r0, r0
 80004e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x84>
 80004f2:	4252      	negs	r2, r2
 80004f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004f8:	ea94 0f05 	teq	r4, r5
 80004fc:	f000 80a7 	beq.w	800064e <__adddf3+0x1da>
 8000500:	f1a4 0401 	sub.w	r4, r4, #1
 8000504:	f1d5 0e20 	rsbs	lr, r5, #32
 8000508:	db0d      	blt.n	8000526 <__adddf3+0xb2>
 800050a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800050e:	fa22 f205 	lsr.w	r2, r2, r5
 8000512:	1880      	adds	r0, r0, r2
 8000514:	f141 0100 	adc.w	r1, r1, #0
 8000518:	fa03 f20e 	lsl.w	r2, r3, lr
 800051c:	1880      	adds	r0, r0, r2
 800051e:	fa43 f305 	asr.w	r3, r3, r5
 8000522:	4159      	adcs	r1, r3
 8000524:	e00e      	b.n	8000544 <__adddf3+0xd0>
 8000526:	f1a5 0520 	sub.w	r5, r5, #32
 800052a:	f10e 0e20 	add.w	lr, lr, #32
 800052e:	2a01      	cmp	r2, #1
 8000530:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000534:	bf28      	it	cs
 8000536:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	18c0      	adds	r0, r0, r3
 8000540:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	d507      	bpl.n	800055a <__adddf3+0xe6>
 800054a:	f04f 0e00 	mov.w	lr, #0
 800054e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000552:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000556:	eb6e 0101 	sbc.w	r1, lr, r1
 800055a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800055e:	d31b      	bcc.n	8000598 <__adddf3+0x124>
 8000560:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000564:	d30c      	bcc.n	8000580 <__adddf3+0x10c>
 8000566:	0849      	lsrs	r1, r1, #1
 8000568:	ea5f 0030 	movs.w	r0, r0, rrx
 800056c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000570:	f104 0401 	add.w	r4, r4, #1
 8000574:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000578:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800057c:	f080 809a 	bcs.w	80006b4 <__adddf3+0x240>
 8000580:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000584:	bf08      	it	eq
 8000586:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058a:	f150 0000 	adcs.w	r0, r0, #0
 800058e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000592:	ea41 0105 	orr.w	r1, r1, r5
 8000596:	bd30      	pop	{r4, r5, pc}
 8000598:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800059c:	4140      	adcs	r0, r0
 800059e:	eb41 0101 	adc.w	r1, r1, r1
 80005a2:	3c01      	subs	r4, #1
 80005a4:	bf28      	it	cs
 80005a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005aa:	d2e9      	bcs.n	8000580 <__adddf3+0x10c>
 80005ac:	f091 0f00 	teq	r1, #0
 80005b0:	bf04      	itt	eq
 80005b2:	4601      	moveq	r1, r0
 80005b4:	2000      	moveq	r0, #0
 80005b6:	fab1 f381 	clz	r3, r1
 80005ba:	bf08      	it	eq
 80005bc:	3320      	addeq	r3, #32
 80005be:	f1a3 030b 	sub.w	r3, r3, #11
 80005c2:	f1b3 0220 	subs.w	r2, r3, #32
 80005c6:	da0c      	bge.n	80005e2 <__adddf3+0x16e>
 80005c8:	320c      	adds	r2, #12
 80005ca:	dd08      	ble.n	80005de <__adddf3+0x16a>
 80005cc:	f102 0c14 	add.w	ip, r2, #20
 80005d0:	f1c2 020c 	rsb	r2, r2, #12
 80005d4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005d8:	fa21 f102 	lsr.w	r1, r1, r2
 80005dc:	e00c      	b.n	80005f8 <__adddf3+0x184>
 80005de:	f102 0214 	add.w	r2, r2, #20
 80005e2:	bfd8      	it	le
 80005e4:	f1c2 0c20 	rsble	ip, r2, #32
 80005e8:	fa01 f102 	lsl.w	r1, r1, r2
 80005ec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f0:	bfdc      	itt	le
 80005f2:	ea41 010c 	orrle.w	r1, r1, ip
 80005f6:	4090      	lslle	r0, r2
 80005f8:	1ae4      	subs	r4, r4, r3
 80005fa:	bfa2      	ittt	ge
 80005fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000600:	4329      	orrge	r1, r5
 8000602:	bd30      	popge	{r4, r5, pc}
 8000604:	ea6f 0404 	mvn.w	r4, r4
 8000608:	3c1f      	subs	r4, #31
 800060a:	da1c      	bge.n	8000646 <__adddf3+0x1d2>
 800060c:	340c      	adds	r4, #12
 800060e:	dc0e      	bgt.n	800062e <__adddf3+0x1ba>
 8000610:	f104 0414 	add.w	r4, r4, #20
 8000614:	f1c4 0220 	rsb	r2, r4, #32
 8000618:	fa20 f004 	lsr.w	r0, r0, r4
 800061c:	fa01 f302 	lsl.w	r3, r1, r2
 8000620:	ea40 0003 	orr.w	r0, r0, r3
 8000624:	fa21 f304 	lsr.w	r3, r1, r4
 8000628:	ea45 0103 	orr.w	r1, r5, r3
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	f1c4 040c 	rsb	r4, r4, #12
 8000632:	f1c4 0220 	rsb	r2, r4, #32
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 f304 	lsl.w	r3, r1, r4
 800063e:	ea40 0003 	orr.w	r0, r0, r3
 8000642:	4629      	mov	r1, r5
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	fa21 f004 	lsr.w	r0, r1, r4
 800064a:	4629      	mov	r1, r5
 800064c:	bd30      	pop	{r4, r5, pc}
 800064e:	f094 0f00 	teq	r4, #0
 8000652:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000656:	bf06      	itte	eq
 8000658:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800065c:	3401      	addeq	r4, #1
 800065e:	3d01      	subne	r5, #1
 8000660:	e74e      	b.n	8000500 <__adddf3+0x8c>
 8000662:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000666:	bf18      	it	ne
 8000668:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800066c:	d029      	beq.n	80006c2 <__adddf3+0x24e>
 800066e:	ea94 0f05 	teq	r4, r5
 8000672:	bf08      	it	eq
 8000674:	ea90 0f02 	teqeq	r0, r2
 8000678:	d005      	beq.n	8000686 <__adddf3+0x212>
 800067a:	ea54 0c00 	orrs.w	ip, r4, r0
 800067e:	bf04      	itt	eq
 8000680:	4619      	moveq	r1, r3
 8000682:	4610      	moveq	r0, r2
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea91 0f03 	teq	r1, r3
 800068a:	bf1e      	ittt	ne
 800068c:	2100      	movne	r1, #0
 800068e:	2000      	movne	r0, #0
 8000690:	bd30      	popne	{r4, r5, pc}
 8000692:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000696:	d105      	bne.n	80006a4 <__adddf3+0x230>
 8000698:	0040      	lsls	r0, r0, #1
 800069a:	4149      	adcs	r1, r1
 800069c:	bf28      	it	cs
 800069e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a2:	bd30      	pop	{r4, r5, pc}
 80006a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006a8:	bf3c      	itt	cc
 80006aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ae:	bd30      	popcc	{r4, r5, pc}
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c6:	bf1a      	itte	ne
 80006c8:	4619      	movne	r1, r3
 80006ca:	4610      	movne	r0, r2
 80006cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d0:	bf1c      	itt	ne
 80006d2:	460b      	movne	r3, r1
 80006d4:	4602      	movne	r2, r0
 80006d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006da:	bf06      	itte	eq
 80006dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e0:	ea91 0f03 	teqeq	r1, r3
 80006e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	bf00      	nop

080006ec <__aeabi_ui2d>:
 80006ec:	f090 0f00 	teq	r0, #0
 80006f0:	bf04      	itt	eq
 80006f2:	2100      	moveq	r1, #0
 80006f4:	4770      	bxeq	lr
 80006f6:	b530      	push	{r4, r5, lr}
 80006f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000700:	f04f 0500 	mov.w	r5, #0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e750      	b.n	80005ac <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_i2d>:
 800070c:	f090 0f00 	teq	r0, #0
 8000710:	bf04      	itt	eq
 8000712:	2100      	moveq	r1, #0
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800071c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000720:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000724:	bf48      	it	mi
 8000726:	4240      	negmi	r0, r0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e73e      	b.n	80005ac <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_f2d>:
 8000730:	0042      	lsls	r2, r0, #1
 8000732:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000736:	ea4f 0131 	mov.w	r1, r1, rrx
 800073a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800073e:	bf1f      	itttt	ne
 8000740:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000744:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000748:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800074c:	4770      	bxne	lr
 800074e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000752:	bf08      	it	eq
 8000754:	4770      	bxeq	lr
 8000756:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075a:	bf04      	itt	eq
 800075c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000768:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000770:	e71c      	b.n	80005ac <__adddf3+0x138>
 8000772:	bf00      	nop

08000774 <__aeabi_ul2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f04f 0500 	mov.w	r5, #0
 8000782:	e00a      	b.n	800079a <__aeabi_l2d+0x16>

08000784 <__aeabi_l2d>:
 8000784:	ea50 0201 	orrs.w	r2, r0, r1
 8000788:	bf08      	it	eq
 800078a:	4770      	bxeq	lr
 800078c:	b530      	push	{r4, r5, lr}
 800078e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000792:	d502      	bpl.n	800079a <__aeabi_l2d+0x16>
 8000794:	4240      	negs	r0, r0
 8000796:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800079e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007a6:	f43f aed8 	beq.w	800055a <__adddf3+0xe6>
 80007aa:	f04f 0203 	mov.w	r2, #3
 80007ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b2:	bf18      	it	ne
 80007b4:	3203      	addne	r2, #3
 80007b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ba:	bf18      	it	ne
 80007bc:	3203      	addne	r2, #3
 80007be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ca:	fa20 f002 	lsr.w	r0, r0, r2
 80007ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d2:	ea40 000e 	orr.w	r0, r0, lr
 80007d6:	fa21 f102 	lsr.w	r1, r1, r2
 80007da:	4414      	add	r4, r2
 80007dc:	e6bd      	b.n	800055a <__adddf3+0xe6>
 80007de:	bf00      	nop

080007e0 <__aeabi_d2f>:
 80007e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007e8:	bf24      	itt	cs
 80007ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f2:	d90d      	bls.n	8000810 <__aeabi_d2f+0x30>
 80007f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000800:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000804:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000808:	bf08      	it	eq
 800080a:	f020 0001 	biceq.w	r0, r0, #1
 800080e:	4770      	bx	lr
 8000810:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000814:	d121      	bne.n	800085a <__aeabi_d2f+0x7a>
 8000816:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081a:	bfbc      	itt	lt
 800081c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000820:	4770      	bxlt	lr
 8000822:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000826:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082a:	f1c2 0218 	rsb	r2, r2, #24
 800082e:	f1c2 0c20 	rsb	ip, r2, #32
 8000832:	fa10 f30c 	lsls.w	r3, r0, ip
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	bf18      	it	ne
 800083c:	f040 0001 	orrne.w	r0, r0, #1
 8000840:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000844:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000848:	fa03 fc0c 	lsl.w	ip, r3, ip
 800084c:	ea40 000c 	orr.w	r0, r0, ip
 8000850:	fa23 f302 	lsr.w	r3, r3, r2
 8000854:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000858:	e7cc      	b.n	80007f4 <__aeabi_d2f+0x14>
 800085a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800085e:	d107      	bne.n	8000870 <__aeabi_d2f+0x90>
 8000860:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000864:	bf1e      	ittt	ne
 8000866:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800086e:	4770      	bxne	lr
 8000870:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000874:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000878:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <__aeabi_uldivmod>:
 8000880:	b953      	cbnz	r3, 8000898 <__aeabi_uldivmod+0x18>
 8000882:	b94a      	cbnz	r2, 8000898 <__aeabi_uldivmod+0x18>
 8000884:	2900      	cmp	r1, #0
 8000886:	bf08      	it	eq
 8000888:	2800      	cmpeq	r0, #0
 800088a:	bf1c      	itt	ne
 800088c:	f04f 31ff 	movne.w	r1, #4294967295
 8000890:	f04f 30ff 	movne.w	r0, #4294967295
 8000894:	f000 b974 	b.w	8000b80 <__aeabi_idiv0>
 8000898:	f1ad 0c08 	sub.w	ip, sp, #8
 800089c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a0:	f000 f806 	bl	80008b0 <__udivmoddi4>
 80008a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ac:	b004      	add	sp, #16
 80008ae:	4770      	bx	lr

080008b0 <__udivmoddi4>:
 80008b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b4:	9d08      	ldr	r5, [sp, #32]
 80008b6:	4604      	mov	r4, r0
 80008b8:	468e      	mov	lr, r1
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d14d      	bne.n	800095a <__udivmoddi4+0xaa>
 80008be:	428a      	cmp	r2, r1
 80008c0:	4694      	mov	ip, r2
 80008c2:	d969      	bls.n	8000998 <__udivmoddi4+0xe8>
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	b152      	cbz	r2, 80008e0 <__udivmoddi4+0x30>
 80008ca:	fa01 f302 	lsl.w	r3, r1, r2
 80008ce:	f1c2 0120 	rsb	r1, r2, #32
 80008d2:	fa20 f101 	lsr.w	r1, r0, r1
 80008d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80008da:	ea41 0e03 	orr.w	lr, r1, r3
 80008de:	4094      	lsls	r4, r2
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	0c21      	lsrs	r1, r4, #16
 80008e6:	fbbe f6f8 	udiv	r6, lr, r8
 80008ea:	fa1f f78c 	uxth.w	r7, ip
 80008ee:	fb08 e316 	mls	r3, r8, r6, lr
 80008f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008f6:	fb06 f107 	mul.w	r1, r6, r7
 80008fa:	4299      	cmp	r1, r3
 80008fc:	d90a      	bls.n	8000914 <__udivmoddi4+0x64>
 80008fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000902:	f106 30ff 	add.w	r0, r6, #4294967295
 8000906:	f080 811f 	bcs.w	8000b48 <__udivmoddi4+0x298>
 800090a:	4299      	cmp	r1, r3
 800090c:	f240 811c 	bls.w	8000b48 <__udivmoddi4+0x298>
 8000910:	3e02      	subs	r6, #2
 8000912:	4463      	add	r3, ip
 8000914:	1a5b      	subs	r3, r3, r1
 8000916:	b2a4      	uxth	r4, r4
 8000918:	fbb3 f0f8 	udiv	r0, r3, r8
 800091c:	fb08 3310 	mls	r3, r8, r0, r3
 8000920:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000924:	fb00 f707 	mul.w	r7, r0, r7
 8000928:	42a7      	cmp	r7, r4
 800092a:	d90a      	bls.n	8000942 <__udivmoddi4+0x92>
 800092c:	eb1c 0404 	adds.w	r4, ip, r4
 8000930:	f100 33ff 	add.w	r3, r0, #4294967295
 8000934:	f080 810a 	bcs.w	8000b4c <__udivmoddi4+0x29c>
 8000938:	42a7      	cmp	r7, r4
 800093a:	f240 8107 	bls.w	8000b4c <__udivmoddi4+0x29c>
 800093e:	4464      	add	r4, ip
 8000940:	3802      	subs	r0, #2
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	1be4      	subs	r4, r4, r7
 8000948:	2600      	movs	r6, #0
 800094a:	b11d      	cbz	r5, 8000954 <__udivmoddi4+0xa4>
 800094c:	40d4      	lsrs	r4, r2
 800094e:	2300      	movs	r3, #0
 8000950:	e9c5 4300 	strd	r4, r3, [r5]
 8000954:	4631      	mov	r1, r6
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	428b      	cmp	r3, r1
 800095c:	d909      	bls.n	8000972 <__udivmoddi4+0xc2>
 800095e:	2d00      	cmp	r5, #0
 8000960:	f000 80ef 	beq.w	8000b42 <__udivmoddi4+0x292>
 8000964:	2600      	movs	r6, #0
 8000966:	e9c5 0100 	strd	r0, r1, [r5]
 800096a:	4630      	mov	r0, r6
 800096c:	4631      	mov	r1, r6
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	fab3 f683 	clz	r6, r3
 8000976:	2e00      	cmp	r6, #0
 8000978:	d14a      	bne.n	8000a10 <__udivmoddi4+0x160>
 800097a:	428b      	cmp	r3, r1
 800097c:	d302      	bcc.n	8000984 <__udivmoddi4+0xd4>
 800097e:	4282      	cmp	r2, r0
 8000980:	f200 80f9 	bhi.w	8000b76 <__udivmoddi4+0x2c6>
 8000984:	1a84      	subs	r4, r0, r2
 8000986:	eb61 0303 	sbc.w	r3, r1, r3
 800098a:	2001      	movs	r0, #1
 800098c:	469e      	mov	lr, r3
 800098e:	2d00      	cmp	r5, #0
 8000990:	d0e0      	beq.n	8000954 <__udivmoddi4+0xa4>
 8000992:	e9c5 4e00 	strd	r4, lr, [r5]
 8000996:	e7dd      	b.n	8000954 <__udivmoddi4+0xa4>
 8000998:	b902      	cbnz	r2, 800099c <__udivmoddi4+0xec>
 800099a:	deff      	udf	#255	; 0xff
 800099c:	fab2 f282 	clz	r2, r2
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	f040 8092 	bne.w	8000aca <__udivmoddi4+0x21a>
 80009a6:	eba1 010c 	sub.w	r1, r1, ip
 80009aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ae:	fa1f fe8c 	uxth.w	lr, ip
 80009b2:	2601      	movs	r6, #1
 80009b4:	0c20      	lsrs	r0, r4, #16
 80009b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ba:	fb07 1113 	mls	r1, r7, r3, r1
 80009be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c2:	fb0e f003 	mul.w	r0, lr, r3
 80009c6:	4288      	cmp	r0, r1
 80009c8:	d908      	bls.n	80009dc <__udivmoddi4+0x12c>
 80009ca:	eb1c 0101 	adds.w	r1, ip, r1
 80009ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80009d2:	d202      	bcs.n	80009da <__udivmoddi4+0x12a>
 80009d4:	4288      	cmp	r0, r1
 80009d6:	f200 80cb 	bhi.w	8000b70 <__udivmoddi4+0x2c0>
 80009da:	4643      	mov	r3, r8
 80009dc:	1a09      	subs	r1, r1, r0
 80009de:	b2a4      	uxth	r4, r4
 80009e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e4:	fb07 1110 	mls	r1, r7, r0, r1
 80009e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009ec:	fb0e fe00 	mul.w	lr, lr, r0
 80009f0:	45a6      	cmp	lr, r4
 80009f2:	d908      	bls.n	8000a06 <__udivmoddi4+0x156>
 80009f4:	eb1c 0404 	adds.w	r4, ip, r4
 80009f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fc:	d202      	bcs.n	8000a04 <__udivmoddi4+0x154>
 80009fe:	45a6      	cmp	lr, r4
 8000a00:	f200 80bb 	bhi.w	8000b7a <__udivmoddi4+0x2ca>
 8000a04:	4608      	mov	r0, r1
 8000a06:	eba4 040e 	sub.w	r4, r4, lr
 8000a0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a0e:	e79c      	b.n	800094a <__udivmoddi4+0x9a>
 8000a10:	f1c6 0720 	rsb	r7, r6, #32
 8000a14:	40b3      	lsls	r3, r6
 8000a16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000a22:	fa01 f306 	lsl.w	r3, r1, r6
 8000a26:	431c      	orrs	r4, r3
 8000a28:	40f9      	lsrs	r1, r7
 8000a2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000a32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a36:	0c20      	lsrs	r0, r4, #16
 8000a38:	fa1f fe8c 	uxth.w	lr, ip
 8000a3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000a40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a44:	fb08 f00e 	mul.w	r0, r8, lr
 8000a48:	4288      	cmp	r0, r1
 8000a4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000a4e:	d90b      	bls.n	8000a68 <__udivmoddi4+0x1b8>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a58:	f080 8088 	bcs.w	8000b6c <__udivmoddi4+0x2bc>
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	f240 8085 	bls.w	8000b6c <__udivmoddi4+0x2bc>
 8000a62:	f1a8 0802 	sub.w	r8, r8, #2
 8000a66:	4461      	add	r1, ip
 8000a68:	1a09      	subs	r1, r1, r0
 8000a6a:	b2a4      	uxth	r4, r4
 8000a6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a70:	fb09 1110 	mls	r1, r9, r0, r1
 8000a74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a7c:	458e      	cmp	lr, r1
 8000a7e:	d908      	bls.n	8000a92 <__udivmoddi4+0x1e2>
 8000a80:	eb1c 0101 	adds.w	r1, ip, r1
 8000a84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a88:	d26c      	bcs.n	8000b64 <__udivmoddi4+0x2b4>
 8000a8a:	458e      	cmp	lr, r1
 8000a8c:	d96a      	bls.n	8000b64 <__udivmoddi4+0x2b4>
 8000a8e:	3802      	subs	r0, #2
 8000a90:	4461      	add	r1, ip
 8000a92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a96:	fba0 9402 	umull	r9, r4, r0, r2
 8000a9a:	eba1 010e 	sub.w	r1, r1, lr
 8000a9e:	42a1      	cmp	r1, r4
 8000aa0:	46c8      	mov	r8, r9
 8000aa2:	46a6      	mov	lr, r4
 8000aa4:	d356      	bcc.n	8000b54 <__udivmoddi4+0x2a4>
 8000aa6:	d053      	beq.n	8000b50 <__udivmoddi4+0x2a0>
 8000aa8:	b15d      	cbz	r5, 8000ac2 <__udivmoddi4+0x212>
 8000aaa:	ebb3 0208 	subs.w	r2, r3, r8
 8000aae:	eb61 010e 	sbc.w	r1, r1, lr
 8000ab2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ab6:	fa22 f306 	lsr.w	r3, r2, r6
 8000aba:	40f1      	lsrs	r1, r6
 8000abc:	431f      	orrs	r7, r3
 8000abe:	e9c5 7100 	strd	r7, r1, [r5]
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	f1c2 0320 	rsb	r3, r2, #32
 8000ace:	40d8      	lsrs	r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ad8:	4091      	lsls	r1, r2
 8000ada:	4301      	orrs	r1, r0
 8000adc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae0:	fa1f fe8c 	uxth.w	lr, ip
 8000ae4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ae8:	fb07 3610 	mls	r6, r7, r0, r3
 8000aec:	0c0b      	lsrs	r3, r1, #16
 8000aee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000af2:	fb00 f60e 	mul.w	r6, r0, lr
 8000af6:	429e      	cmp	r6, r3
 8000af8:	fa04 f402 	lsl.w	r4, r4, r2
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x260>
 8000afe:	eb1c 0303 	adds.w	r3, ip, r3
 8000b02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b06:	d22f      	bcs.n	8000b68 <__udivmoddi4+0x2b8>
 8000b08:	429e      	cmp	r6, r3
 8000b0a:	d92d      	bls.n	8000b68 <__udivmoddi4+0x2b8>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1b9b      	subs	r3, r3, r6
 8000b12:	b289      	uxth	r1, r1
 8000b14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b18:	fb07 3316 	mls	r3, r7, r6, r3
 8000b1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b20:	fb06 f30e 	mul.w	r3, r6, lr
 8000b24:	428b      	cmp	r3, r1
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x28a>
 8000b28:	eb1c 0101 	adds.w	r1, ip, r1
 8000b2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b30:	d216      	bcs.n	8000b60 <__udivmoddi4+0x2b0>
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d914      	bls.n	8000b60 <__udivmoddi4+0x2b0>
 8000b36:	3e02      	subs	r6, #2
 8000b38:	4461      	add	r1, ip
 8000b3a:	1ac9      	subs	r1, r1, r3
 8000b3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b40:	e738      	b.n	80009b4 <__udivmoddi4+0x104>
 8000b42:	462e      	mov	r6, r5
 8000b44:	4628      	mov	r0, r5
 8000b46:	e705      	b.n	8000954 <__udivmoddi4+0xa4>
 8000b48:	4606      	mov	r6, r0
 8000b4a:	e6e3      	b.n	8000914 <__udivmoddi4+0x64>
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	e6f8      	b.n	8000942 <__udivmoddi4+0x92>
 8000b50:	454b      	cmp	r3, r9
 8000b52:	d2a9      	bcs.n	8000aa8 <__udivmoddi4+0x1f8>
 8000b54:	ebb9 0802 	subs.w	r8, r9, r2
 8000b58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b5c:	3801      	subs	r0, #1
 8000b5e:	e7a3      	b.n	8000aa8 <__udivmoddi4+0x1f8>
 8000b60:	4646      	mov	r6, r8
 8000b62:	e7ea      	b.n	8000b3a <__udivmoddi4+0x28a>
 8000b64:	4620      	mov	r0, r4
 8000b66:	e794      	b.n	8000a92 <__udivmoddi4+0x1e2>
 8000b68:	4640      	mov	r0, r8
 8000b6a:	e7d1      	b.n	8000b10 <__udivmoddi4+0x260>
 8000b6c:	46d0      	mov	r8, sl
 8000b6e:	e77b      	b.n	8000a68 <__udivmoddi4+0x1b8>
 8000b70:	3b02      	subs	r3, #2
 8000b72:	4461      	add	r1, ip
 8000b74:	e732      	b.n	80009dc <__udivmoddi4+0x12c>
 8000b76:	4630      	mov	r0, r6
 8000b78:	e709      	b.n	800098e <__udivmoddi4+0xde>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	e742      	b.n	8000a06 <__udivmoddi4+0x156>

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart3);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb2:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f000 f91f 	bl	8000e10 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 8000bda:	b480      	push	{r7}
 8000bdc:	b085      	sub	sp, #20
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bf8:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000c00:	89fa      	ldrh	r2, [r7, #14]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d102      	bne.n	8000c0c <_ZN14BufferedSerial4readEv+0x32>
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e016      	b.n	8000c3a <_ZN14BufferedSerial4readEv+0x60>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	b291      	uxth	r1, r2
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	f8a2 1804 	strh.w	r1, [r2, #2052]	; 0x804
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	791b      	ldrb	r3, [r3, #4]
 8000c24:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804

  return c;
 8000c38:	68bb      	ldr	r3, [r7, #8]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000c58:	461a      	mov	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c62:	da25      	bge.n	8000cb0 <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	4413      	add	r3, r2
 8000c72:	3304      	adds	r3, #4
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f006 fac7 	bl	800720c <memcpy>
    tx_head += length; // ) & tx_buf_mask
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4413      	add	r3, r2
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	; 0x80a
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d921      	bls.n	8000ce6 <_ZN14BufferedSerial5writeEPKhi+0xa0>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
 8000cae:	e01a      	b.n	8000ce6 <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f006 faa6 	bl	800720c <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d905      	bls.n	8000cdc <_ZN14BufferedSerial5writeEPKhi+0x96>
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
    tx_head = length;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
  }

  // Send data:
  flush_tx_buffer();
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 f804 	bl	8000cf4 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00f      	beq.n	8000d26 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d107      	bne.n	8000d26 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
     tx_tail = 0;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b20      	cmp	r3, #32
 8000d32:	d10b      	bne.n	8000d4c <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d003      	beq.n	8000d4c <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000d44:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 8000d50:	2300      	movs	r3, #0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d156      	bne.n	8000e04 <_ZN14BufferedSerial15flush_tx_bufferEv+0x110>
  mutex = true;
 8000d56:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	; 0x80a
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d103      	bne.n	8000d74 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808

  // Send data behind head:
  if (tx_tail < tx_head) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d21c      	bcs.n	8000dbe <_ZN14BufferedSerial15flush_tx_bufferEv+0xca>
    uint16_t length = tx_head - tx_tail;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	3304      	adds	r3, #4
 8000da8:	89ba      	ldrh	r2, [r7, #12]
 8000daa:	4619      	mov	r1, r3
 8000dac:	f005 f85a 	bl	8005e64 <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8000dbc:	e01e      	b.n	8000dfc <_ZN14BufferedSerial15flush_tx_bufferEv+0x108>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	3304      	adds	r3, #4
 8000de2:	89fa      	ldrh	r2, [r7, #14]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f005 f83d 	bl	8005e64 <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df0:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
    tx_tail = 0;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
  }

  mutex = false;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e000      	b.n	8000e06 <_ZN14BufferedSerial15flush_tx_bufferEv+0x112>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000e04:	bf00      	nop
}
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200008c0 	.word	0x200008c0

08000e10 <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e24:	4619      	mov	r1, r3
 8000e26:	f005 f89b 	bl	8005f60 <HAL_UART_Receive_DMA>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681c      	ldr	r4, [r3, #0]
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <HAL_UART_TxCpltCallback+0x34>)
 8000e5a:	f7ff ffea 	bl	8000e32 <_ZN14BufferedSerial10get_handleEv>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	429c      	cmp	r4, r3
 8000e64:	bf0c      	ite	eq
 8000e66:	2301      	moveq	r3, #1
 8000e68:	2300      	movne	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <HAL_UART_TxCpltCallback+0x34>)
 8000e72:	f7ff ff3f 	bl	8000cf4 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000b4 	.word	0x200000b4

08000e84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 8000e8c:	4803      	ldr	r0, [pc, #12]	; (8000e9c <HAL_UART_RxCpltCallback+0x18>)
 8000e8e:	f7ff ffbf 	bl	8000e10 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200000b4 	.word	0x200000b4

08000ea0 <_Z41__static_initialization_and_destruction_0ii>:
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d108      	bne.n	8000ec2 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d103      	bne.n	8000ec2 <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart3);
 8000eba:	4904      	ldr	r1, [pc, #16]	; (8000ecc <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000ebe:	f7ff fe61 	bl	8000b84 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000096c 	.word	0x2000096c
 8000ed0:	200000b4 	.word	0x200000b4

08000ed4 <_GLOBAL__sub_I_buff_serial>:
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff ffdf 	bl	8000ea0 <_Z41__static_initialization_and_destruction_0ii>
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	0a5a      	lsrs	r2, r3, #9
 8000ef4:	490f      	ldr	r1, [pc, #60]	; (8000f34 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ef6:	fba1 1202 	umull	r1, r2, r1, r2
 8000efa:	09d2      	lsrs	r2, r2, #7
 8000efc:	490e      	ldr	r1, [pc, #56]	; (8000f38 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000efe:	fb01 f202 	mul.w	r2, r1, r2
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	0a5b      	lsrs	r3, r3, #9
 8000f0c:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	09db      	lsrs	r3, r3, #7
 8000f14:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	441a      	add	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	00044b83 	.word	0x00044b83
 8000f38:	3b9aca00 	.word	0x3b9aca00

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f002 fd7a 	bl	8003a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 f828 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f000 f960 	bl	800120c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4c:	f000 f920 	bl	8001190 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f50:	f000 f8f4 	bl	800113c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000f54:	f000 f892 	bl	800107c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, XY, 2);
 8000f58:	2202      	movs	r2, #2
 8000f5a:	490b      	ldr	r1, [pc, #44]	; (8000f88 <main+0x4c>)
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <main+0x50>)
 8000f5e:	f002 fe45 	bl	8003bec <HAL_ADC_Start_DMA>

  setup();
 8000f62:	f001 fbe9 	bl	8002738 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  x_val = XY[0];
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <main+0x4c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <main+0x54>)
 8000f6c:	6013      	str	r3, [r2, #0]
	  y_val = XY[1];
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <main+0x4c>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <main+0x58>)
 8000f74:	6013      	str	r3, [r2, #0]
	  loop(x_val, y_val);
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <main+0x54>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <main+0x58>)
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fbfd 	bl	8002780 <loop>
  {
 8000f86:	e7ee      	b.n	8000f66 <main+0x2a>
 8000f88:	20000a70 	.word	0x20000a70
 8000f8c:	200008c4 	.word	0x200008c4
 8000f90:	20000a78 	.word	0x20000a78
 8000f94:	20000a7c 	.word	0x20000a7c

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2234      	movs	r2, #52	; 0x34
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 f93e 	bl	8007228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <SystemClock_Config+0xdc>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a2b      	ldr	r2, [pc, #172]	; (8001074 <SystemClock_Config+0xdc>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <SystemClock_Config+0xdc>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <SystemClock_Config+0xe0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a25      	ldr	r2, [pc, #148]	; (8001078 <SystemClock_Config+0xe0>)
 8000fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <SystemClock_Config+0xe0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001000:	2302      	movs	r3, #2
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001004:	2300      	movs	r3, #0
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001008:	2308      	movs	r3, #8
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800100c:	23b4      	movs	r3, #180	; 0xb4
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fc33 	bl	800588c <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800102c:	f000 f986 	bl	800133c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001030:	f004 f892 	bl	8005158 <HAL_PWREx_EnableOverDrive>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800103a:	f000 f97f 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800104a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2105      	movs	r1, #5
 800105c:	4618      	mov	r0, r3
 800105e:	f004 f8cb 	bl	80051f8 <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001068:	f000 f968 	bl	800133c <Error_Handler>
  }
}
 800106c:	bf00      	nop
 800106e:	3750      	adds	r7, #80	; 0x50
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <MX_ADC1_Init+0xb4>)
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <MX_ADC1_Init+0xb8>)
 8001092:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_ADC1_Init+0xb4>)
 8001096:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800109a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <MX_ADC1_Init+0xb4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010be:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <MX_ADC1_Init+0xbc>)
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010d8:	2201      	movs	r2, #1
 80010da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010dc:	4814      	ldr	r0, [pc, #80]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010de:	f002 fd41 	bl	8003b64 <HAL_ADC_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010e8:	f000 f928 	bl	800133c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80010f4:	2304      	movs	r3, #4
 80010f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <MX_ADC1_Init+0xb4>)
 80010fe:	f002 fea3 	bl	8003e48 <HAL_ADC_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001108:	f000 f918 	bl	800133c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800110c:	2301      	movs	r3, #1
 800110e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001110:	2302      	movs	r3, #2
 8001112:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_ADC1_Init+0xb4>)
 800111a:	f002 fe95 	bl	8003e48 <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001124:	f000 f90a 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200008c4 	.word	0x200008c4
 8001134:	40012000 	.word	0x40012000
 8001138:	0f000001 	.word	0x0f000001

0800113c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_USART3_UART_Init+0x4c>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_USART3_UART_Init+0x50>)
 8001144:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_USART3_UART_Init+0x4c>)
 8001148:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800114c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_USART3_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_USART3_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_USART3_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_USART3_UART_Init+0x4c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_USART3_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_USART3_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_USART3_UART_Init+0x4c>)
 8001174:	f004 fe28 	bl	8005dc8 <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800117e:	f000 f8dd 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000096c 	.word	0x2000096c
 800118c:	40004800 	.word	0x40004800

08001190 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_DMA_Init+0x78>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a1a      	ldr	r2, [pc, #104]	; (8001208 <MX_DMA_Init+0x78>)
 80011a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_DMA_Init+0x78>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_DMA_Init+0x78>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a13      	ldr	r2, [pc, #76]	; (8001208 <MX_DMA_Init+0x78>)
 80011bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_DMA_Init+0x78>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	200c      	movs	r0, #12
 80011d4:	f003 f9c3 	bl	800455e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011d8:	200c      	movs	r0, #12
 80011da:	f003 f9dc 	bl	8004596 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	200e      	movs	r0, #14
 80011e4:	f003 f9bb 	bl	800455e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80011e8:	200e      	movs	r0, #14
 80011ea:	f003 f9d4 	bl	8004596 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2038      	movs	r0, #56	; 0x38
 80011f4:	f003 f9b3 	bl	800455e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f8:	2038      	movs	r0, #56	; 0x38
 80011fa:	f003 f9cc 	bl	8004596 <HAL_NVIC_EnableIRQ>

}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <MX_GPIO_Init+0x120>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a40      	ldr	r2, [pc, #256]	; (800132c <MX_GPIO_Init+0x120>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b3e      	ldr	r3, [pc, #248]	; (800132c <MX_GPIO_Init+0x120>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b3a      	ldr	r3, [pc, #232]	; (800132c <MX_GPIO_Init+0x120>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a39      	ldr	r2, [pc, #228]	; (800132c <MX_GPIO_Init+0x120>)
 8001248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b37      	ldr	r3, [pc, #220]	; (800132c <MX_GPIO_Init+0x120>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <MX_GPIO_Init+0x120>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a32      	ldr	r2, [pc, #200]	; (800132c <MX_GPIO_Init+0x120>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <MX_GPIO_Init+0x120>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <MX_GPIO_Init+0x120>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a2b      	ldr	r2, [pc, #172]	; (800132c <MX_GPIO_Init+0x120>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <MX_GPIO_Init+0x120>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001298:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4821      	ldr	r0, [pc, #132]	; (8001330 <MX_GPIO_Init+0x124>)
 80012aa:	f003 fd91 	bl	8004dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ae:	230c      	movs	r3, #12
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012be:	2307      	movs	r3, #7
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	481a      	ldr	r0, [pc, #104]	; (8001334 <MX_GPIO_Init+0x128>)
 80012ca:	f003 fd81 	bl	8004dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : e_stop_Pin */
  GPIO_InitStruct.Pin = e_stop_Pin;
 80012ce:	2320      	movs	r3, #32
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012d2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(e_stop_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4814      	ldr	r0, [pc, #80]	; (8001334 <MX_GPIO_Init+0x128>)
 80012e4:	f003 fd74 	bl	8004dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_pin_Pin */
  GPIO_InitStruct.Pin = joy_pin_Pin;
 80012e8:	2308      	movs	r3, #8
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012ec:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_pin_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	480e      	ldr	r0, [pc, #56]	; (8001338 <MX_GPIO_Init+0x12c>)
 80012fe:	f003 fd67 	bl	8004dd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2009      	movs	r0, #9
 8001308:	f003 f929 	bl	800455e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800130c:	2009      	movs	r0, #9
 800130e:	f003 f942 	bl	8004596 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2017      	movs	r0, #23
 8001318:	f003 f921 	bl	800455e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800131c:	2017      	movs	r0, #23
 800131e:	f003 f93a 	bl	8004596 <HAL_NVIC_EnableIRQ>

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	; 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40020800 	.word	0x40020800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <_ZN13STM32HardwareC1Ev+0x1c>)
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	200000b4 	.word	0x200000b4

08001368 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fc25 	bl	8000bc4 <_ZN14BufferedSerial4initEv>
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fc23 	bl	8000bda <_ZN14BufferedSerial4readEv>
 8001394:	4603      	mov	r3, r0
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fc47 	bl	8000c46 <_ZN14BufferedSerial5writeEPKhi>
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	f002 fb9c 	bl	8003b04 <HAL_GetTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80013d6:	b480      	push	{r7}
 80013d8:	b087      	sub	sp, #28
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 80013e2:	463b      	mov	r3, r7
 80013e4:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	15db      	asrs	r3, r3, #23
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80013fc:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	0159      	lsls	r1, r3, #5
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	b2ca      	uxtb	r2, r1
 800142e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	10d9      	asrs	r1, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	b2ca      	uxtb	r2, r1
 800143c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	12d9      	asrs	r1, r3, #11
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	b2ca      	uxtb	r2, r1
 800144a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	b25a      	sxtb	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	14db      	asrs	r3, r3, #19
 8001456:	b25b      	sxtb	r3, r3
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	b25b      	sxtb	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b259      	sxtb	r1, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	b2ca      	uxtb	r2, r1
 800146a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	111b      	asrs	r3, r3, #4
 8001470:	b2da      	uxtb	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	1c59      	adds	r1, r3, #1
 8001476:	6079      	str	r1, [r7, #4]
 8001478:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001480:	edd7 7a00 	vldr	s15, [r7]
 8001484:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	d508      	bpl.n	80014a0 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3b01      	subs	r3, #1
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 80014a0:	2308      	movs	r3, #8
  }
 80014a2:	4618      	mov	r0, r3
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3303      	adds	r3, #3
 80014c0:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 0207 	and.w	r2, r3, #7
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	00da      	lsls	r2, r3, #3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	02da      	lsls	r2, r3, #11
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	04db      	lsls	r3, r3, #19
 8001508:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 800150c:	431a      	orrs	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	b2db      	uxtb	r3, r3
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	4313      	orrs	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9e>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001544:	05db      	lsls	r3, r3, #23
 8001546:	431a      	orrs	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	061b      	lsls	r3, r3, #24
 8001556:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	431a      	orrs	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	601a      	str	r2, [r3, #0]

    return 8;
 8001564:	2308      	movs	r3, #8
  }
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_ZN3ros3MsgC1Ev>:
class Msg
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <_ZN3ros3MsgC1Ev+0x1c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	080078bc 	.word	0x080078bc

080015b4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
      data()
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ffe8 	bl	8001594 <_ZN3ros3MsgC1Ev>
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3304      	adds	r3, #4
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ffcf 	bl	8001572 <_ZN3ros4TimeC1Ev>
    {
    }
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	080078a4 	.word	0x080078a4

080015e4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6859      	ldr	r1, [r3, #4]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	b2ca      	uxtb	r2, r1
 80015fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	0a19      	lsrs	r1, r3, #8
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3301      	adds	r3, #1
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	4413      	add	r3, r2
 800160e:	b2ca      	uxtb	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	0c19      	lsrs	r1, r3, #16
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3302      	adds	r3, #2
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	4413      	add	r3, r2
 8001620:	b2ca      	uxtb	r2, r1
 8001622:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	0e19      	lsrs	r1, r3, #24
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3303      	adds	r3, #3
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	4413      	add	r3, r2
 8001632:	b2ca      	uxtb	r2, r1
 8001634:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3304      	adds	r3, #4
 800163a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6899      	ldr	r1, [r3, #8]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	b2ca      	uxtb	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	0a19      	lsrs	r1, r3, #8
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3301      	adds	r3, #1
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	4413      	add	r3, r2
 8001658:	b2ca      	uxtb	r2, r1
 800165a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	0c19      	lsrs	r1, r3, #16
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3302      	adds	r3, #2
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	4413      	add	r3, r2
 800166a:	b2ca      	uxtb	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	0e19      	lsrs	r1, r3, #24
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3303      	adds	r3, #3
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	4413      	add	r3, r2
 800167c:	b2ca      	uxtb	r2, r1
 800167e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3304      	adds	r3, #4
 8001684:	60fb      	str	r3, [r7, #12]
      return offset;
 8001686:	68fb      	ldr	r3, [r7, #12]
    }
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3301      	adds	r3, #1
 80016b8:	6839      	ldr	r1, [r7, #0]
 80016ba:	440b      	add	r3, r1
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3302      	adds	r3, #2
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	440b      	add	r3, r1
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3303      	adds	r3, #3
 80016e4:	6839      	ldr	r1, [r7, #0]
 80016e6:	440b      	add	r3, r1
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	061b      	lsls	r3, r3, #24
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3304      	adds	r3, #4
 80016f6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3301      	adds	r3, #1
 800170e:	6839      	ldr	r1, [r7, #0]
 8001710:	440b      	add	r3, r1
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3302      	adds	r3, #2
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	440b      	add	r3, r1
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3303      	adds	r3, #3
 800173a:	6839      	ldr	r1, [r7, #0]
 800173c:	440b      	add	r3, r1
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	061b      	lsls	r3, r3, #24
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3304      	adds	r3, #4
 800174c:	60fb      	str	r3, [r7, #12]
     return offset;
 800174e:	68fb      	ldr	r3, [r7, #12]
    }
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	08007554 	.word	0x08007554

08001778 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	08007564 	.word	0x08007564

08001794 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fef8 	bl	8001594 <_ZN3ros3MsgC1Ev>
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	809a      	strh	r2, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017c0:	611a      	str	r2, [r3, #16]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
    {
    }
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	0800788c 	.word	0x0800788c
 80017d8:	08007588 	.word	0x08007588

080017dc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	8899      	ldrh	r1, [r3, #4]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	b2ca      	uxtb	r2, r1
 80017f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	889b      	ldrh	r3, [r3, #4]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	b299      	uxth	r1, r3
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	3301      	adds	r3, #1
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	4413      	add	r3, r2
 8001808:	b2ca      	uxtb	r2, r1
 800180a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	3302      	adds	r3, #2
 8001810:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fcf4 	bl	8000204 <strlen>
 800181c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	4413      	add	r3, r2
 8001824:	69b9      	ldr	r1, [r7, #24]
 8001826:	4618      	mov	r0, r3
 8001828:	f001 f89e 	bl	8002968 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	3304      	adds	r3, #4
 8001830:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	18d0      	adds	r0, r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4619      	mov	r1, r3
 8001840:	f005 fce4 	bl	800720c <memcpy>
      offset += length_topic_name;
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	4413      	add	r3, r2
 800184a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fcd7 	bl	8000204 <strlen>
 8001856:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	4413      	add	r3, r2
 800185e:	6979      	ldr	r1, [r7, #20]
 8001860:	4618      	mov	r0, r3
 8001862:	f001 f881 	bl	8002968 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	18d0      	adds	r0, r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4619      	mov	r1, r3
 800187a:	f005 fcc7 	bl	800720c <memcpy>
      offset += length_message_type;
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	4413      	add	r3, r2
 8001884:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fcba 	bl	8000204 <strlen>
 8001890:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	4413      	add	r3, r2
 8001898:	6939      	ldr	r1, [r7, #16]
 800189a:	4618      	mov	r0, r3
 800189c:	f001 f864 	bl	8002968 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	3304      	adds	r3, #4
 80018a4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	18d0      	adds	r0, r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4619      	mov	r1, r3
 80018b4:	f005 fcaa 	bl	800720c <memcpy>
      offset += length_md5sum;
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4413      	add	r3, r2
 80018be:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80018c6:	68f9      	ldr	r1, [r7, #12]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	b2ca      	uxtb	r2, r1
 80018d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	0a19      	lsrs	r1, r3, #8
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3301      	adds	r3, #1
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	b2ca      	uxtb	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	0c19      	lsrs	r1, r3, #16
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3302      	adds	r3, #2
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	4413      	add	r3, r2
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	0e19      	lsrs	r1, r3, #24
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3303      	adds	r3, #3
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	b2ca      	uxtb	r2, r1
 8001900:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	61fb      	str	r3, [r7, #28]
      return offset;
 8001908:	69fb      	ldr	r3, [r7, #28]
    }
 800190a:	4618      	mov	r0, r3
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001912:	b580      	push	{r7, lr}
 8001914:	b08a      	sub	sp, #40	; 0x28
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	4413      	add	r3, r2
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b29a      	uxth	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	889b      	ldrh	r3, [r3, #4]
 8001932:	b21a      	sxth	r2, r3
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	3301      	adds	r3, #1
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	440b      	add	r3, r1
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21b      	sxth	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b21b      	sxth	r3, r3
 8001946:	b29a      	uxth	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	3302      	adds	r3, #2
 8001950:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	441a      	add	r2, r3
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f001 f820 	bl	80029a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	3304      	adds	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	4413      	add	r3, r2
 8001974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001976:	429a      	cmp	r2, r3
 8001978:	d20c      	bcs.n	8001994 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	441a      	add	r2, r3
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3b01      	subs	r3, #1
 8001984:	6839      	ldr	r1, [r7, #0]
 8001986:	440b      	add	r3, r1
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	3301      	adds	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	e7ec      	b.n	800196e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	4413      	add	r3, r2
 800199a:	3b01      	subs	r3, #1
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	441a      	add	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	4413      	add	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	441a      	add	r2, r3
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 ffed 	bl	80029a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	3304      	adds	r3, #4
 80019ce:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	623b      	str	r3, [r7, #32]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4413      	add	r3, r2
 80019da:	6a3a      	ldr	r2, [r7, #32]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d20c      	bcs.n	80019fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	441a      	add	r2, r3
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	6839      	ldr	r1, [r7, #0]
 80019ec:	440b      	add	r3, r1
 80019ee:	7812      	ldrb	r2, [r2, #0]
 80019f0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	3301      	adds	r3, #1
 80019f6:	623b      	str	r3, [r7, #32]
 80019f8:	e7ec      	b.n	80019d4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4413      	add	r3, r2
 8001a00:	3b01      	subs	r3, #1
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	441a      	add	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	441a      	add	r2, r3
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 ffba 	bl	80029a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	3304      	adds	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d20c      	bcs.n	8001a60 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	441a      	add	r2, r3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	440b      	add	r3, r1
 8001a54:	7812      	ldrb	r2, [r2, #0]
 8001a56:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e7ec      	b.n	8001a3a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	3b01      	subs	r3, #1
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	441a      	add	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	6839      	ldr	r1, [r7, #0]
 8001a8e:	440a      	add	r2, r1
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	440b      	add	r3, r1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	3302      	adds	r3, #2
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	440b      	add	r3, r1
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	3303      	adds	r3, #3
 8001ac0:	6839      	ldr	r1, [r7, #0]
 8001ac2:	440b      	add	r3, r1
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	061b      	lsls	r3, r3, #24
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	61bb      	str	r3, [r7, #24]
     return offset;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
    }
 8001ada:	4618      	mov	r0, r3
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	0800758c 	.word	0x0800758c

08001b00 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	080075a8 	.word	0x080075a8

08001b1c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fd34 	bl	8001594 <_ZN3ros3MsgC1Ev>
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	711a      	strb	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001b3c:	609a      	str	r2, [r3, #8]
    {
    }
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	08007874 	.word	0x08007874
 8001b4c:	08007588 	.word	0x08007588

08001b50 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	7912      	ldrb	r2, [r2, #4]
 8001b68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fb45 	bl	8000204 <strlen>
 8001b7a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 feef 	bl	8002968 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	18d0      	adds	r0, r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f005 fb35 	bl	800720c <memcpy>
      offset += length_msg;
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
      return offset;
 8001baa:	68fb      	ldr	r3, [r7, #12]
    }
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	441a      	add	r2, r3
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fedf 	bl	80029a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	3304      	adds	r3, #4
 8001bea:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d20c      	bcs.n	8001c16 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	441a      	add	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	6839      	ldr	r1, [r7, #0]
 8001c08:	440b      	add	r3, r1
 8001c0a:	7812      	ldrb	r2, [r2, #0]
 8001c0c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e7ec      	b.n	8001bf0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	4413      	add	r3, r2
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	441a      	add	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
     return offset;
 8001c3a:	693b      	ldr	r3, [r7, #16]
    }
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	080075cc 	.word	0x080075cc

08001c60 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	080075e0 	.word	0x080075e0

08001c7c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fc84 	bl	8001594 <_ZN3ros3MsgC1Ev>
 8001c8c:	4a0c      	ldr	r2, [pc, #48]	; (8001cc0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	61da      	str	r2, [r3, #28]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	0800785c 	.word	0x0800785c

08001cc4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6859      	ldr	r1, [r3, #4]
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	b2ca      	uxtb	r2, r1
 8001cde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0a19      	lsrs	r1, r3, #8
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	3301      	adds	r3, #1
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	b2ca      	uxtb	r2, r1
 8001cf0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	0c19      	lsrs	r1, r3, #16
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	b2ca      	uxtb	r2, r1
 8001d02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	0e19      	lsrs	r1, r3, #24
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	3303      	adds	r3, #3
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	b2ca      	uxtb	r2, r1
 8001d14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3304      	adds	r3, #4
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	6a3a      	ldr	r2, [r7, #32]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d22b      	bcs.n	8001d82 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001d38:	6939      	ldr	r1, [r7, #16]
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	b2ca      	uxtb	r2, r1
 8001d42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	0a19      	lsrs	r1, r3, #8
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	b2ca      	uxtb	r2, r1
 8001d52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	0c19      	lsrs	r1, r3, #16
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	b2ca      	uxtb	r2, r1
 8001d62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	0e19      	lsrs	r1, r3, #24
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	3303      	adds	r3, #3
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	b2ca      	uxtb	r2, r1
 8001d72:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	3304      	adds	r3, #4
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	623b      	str	r3, [r7, #32]
 8001d80:	e7ce      	b.n	8001d20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6919      	ldr	r1, [r3, #16]
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b2ca      	uxtb	r2, r1
 8001d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	0a19      	lsrs	r1, r3, #8
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	3301      	adds	r3, #1
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	0c19      	lsrs	r1, r3, #16
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	3302      	adds	r3, #2
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	b2ca      	uxtb	r2, r1
 8001db2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	0e19      	lsrs	r1, r3, #24
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	3303      	adds	r3, #3
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b2ca      	uxtb	r2, r1
 8001dc4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	3304      	adds	r3, #4
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d22b      	bcs.n	8001e32 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001de8:	68f9      	ldr	r1, [r7, #12]
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	b2ca      	uxtb	r2, r1
 8001df2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	0a19      	lsrs	r1, r3, #8
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b2ca      	uxtb	r2, r1
 8001e02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	0c19      	lsrs	r1, r3, #16
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	b2ca      	uxtb	r2, r1
 8001e12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	0e19      	lsrs	r1, r3, #24
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	3303      	adds	r3, #3
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2ca      	uxtb	r2, r1
 8001e22:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	3304      	adds	r3, #4
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	e7ce      	b.n	8001dd0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69d9      	ldr	r1, [r3, #28]
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b2ca      	uxtb	r2, r1
 8001e3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	0a19      	lsrs	r1, r3, #8
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	3301      	adds	r3, #1
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b2ca      	uxtb	r2, r1
 8001e50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	0c19      	lsrs	r1, r3, #16
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	b2ca      	uxtb	r2, r1
 8001e62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	0e19      	lsrs	r1, r3, #24
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	b2ca      	uxtb	r2, r1
 8001e74:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	3304      	adds	r3, #4
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d228      	bcs.n	8001edc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe f9b4 	bl	8000204 <strlen>
 8001e9c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	6979      	ldr	r1, [r7, #20]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fd5e 	bl	8002968 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	3304      	adds	r3, #4
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	18d0      	adds	r0, r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f005 f9a0 	bl	800720c <memcpy>
      offset += length_stringsi;
 8001ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	e7d1      	b.n	8001e80 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3728      	adds	r7, #40	; 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b08e      	sub	sp, #56	; 0x38
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	4413      	add	r3, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f00:	3301      	adds	r3, #1
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	6a3a      	ldr	r2, [r7, #32]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f12:	3302      	adds	r3, #2
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	6a3a      	ldr	r2, [r7, #32]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f24:	3303      	adds	r3, #3
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	6a3a      	ldr	r2, [r7, #32]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f36:	3304      	adds	r3, #4
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	6a3a      	ldr	r2, [r7, #32]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d90a      	bls.n	8001f5a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f005 f972 	bl	8007238 <realloc>
 8001f54:	4602      	mov	r2, r0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a3a      	ldr	r2, [r7, #32]
 8001f5e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001f60:	2300      	movs	r3, #0
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d236      	bcs.n	8001fdc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f76:	6839      	ldr	r1, [r7, #0]
 8001f78:	440a      	add	r2, r1
 8001f7a:	7812      	ldrb	r2, [r2, #0]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f84:	3301      	adds	r3, #1
 8001f86:	6839      	ldr	r1, [r7, #0]
 8001f88:	440b      	add	r3, r1
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f96:	3302      	adds	r3, #2
 8001f98:	6839      	ldr	r1, [r7, #0]
 8001f9a:	440b      	add	r3, r1
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa8:	3303      	adds	r3, #3
 8001faa:	6839      	ldr	r1, [r7, #0]
 8001fac:	440b      	add	r3, r1
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	061b      	lsls	r3, r3, #24
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fda:	e7c3      	b.n	8001f64 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe8:	3301      	adds	r3, #1
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	041b      	lsls	r3, r3, #16
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	4313      	orrs	r3, r2
 8002008:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800200a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200c:	3303      	adds	r3, #3
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4413      	add	r3, r2
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	061b      	lsls	r3, r3, #24
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	4313      	orrs	r3, r2
 800201a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201e:	3304      	adds	r3, #4
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	429a      	cmp	r2, r3
 800202a:	d90a      	bls.n	8002042 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f005 f8fe 	bl	8007238 <realloc>
 800203c:	4602      	mov	r2, r0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002052:	429a      	cmp	r2, r3
 8002054:	d236      	bcs.n	80020c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	440a      	add	r2, r1
 8002062:	7812      	ldrb	r2, [r2, #0]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206c:	3301      	adds	r3, #1
 800206e:	6839      	ldr	r1, [r7, #0]
 8002070:	440b      	add	r3, r1
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207e:	3302      	adds	r3, #2
 8002080:	6839      	ldr	r1, [r7, #0]
 8002082:	440b      	add	r3, r1
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002090:	3303      	adds	r3, #3
 8002092:	6839      	ldr	r1, [r7, #0]
 8002094:	440b      	add	r3, r1
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	061b      	lsls	r3, r3, #24
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80020a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a6:	3304      	adds	r3, #4
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	3214      	adds	r2, #20
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020be:	3301      	adds	r3, #1
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c2:	e7c3      	b.n	800204c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	4413      	add	r3, r2
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	3301      	adds	r3, #1
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	4413      	add	r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80020e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e2:	3302      	adds	r3, #2
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	041b      	lsls	r3, r3, #16
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80020f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f4:	3303      	adds	r3, #3
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	061b      	lsls	r3, r3, #24
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002106:	3304      	adds	r3, #4
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	429a      	cmp	r2, r3
 8002112:	d90a      	bls.n	800212a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4619      	mov	r1, r3
 800211e:	4610      	mov	r0, r2
 8002120:	f005 f88a 	bl	8007238 <realloc>
 8002124:	4602      	mov	r2, r0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002130:	2300      	movs	r3, #0
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800213a:	429a      	cmp	r2, r3
 800213c:	d23f      	bcs.n	80021be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	441a      	add	r2, r3
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fc2a 	bl	80029a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002152:	3304      	adds	r3, #4
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002162:	429a      	cmp	r2, r3
 8002164:	d20c      	bcs.n	8002180 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	441a      	add	r2, r3
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	3b01      	subs	r3, #1
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	440b      	add	r3, r1
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	3301      	adds	r3, #1
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	e7ec      	b.n	800215a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4413      	add	r3, r2
 8002186:	3b01      	subs	r3, #1
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	4413      	add	r3, r2
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002192:	3b01      	subs	r3, #1
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	441a      	add	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800219c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	3220      	adds	r2, #32
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80021b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b8:	3301      	adds	r3, #1
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80021bc:	e7ba      	b.n	8002134 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80021be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80021c0:	4618      	mov	r0, r3
 80021c2:	3738      	adds	r7, #56	; 0x38
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	08007780 	.word	0x08007780

080021e4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	08007604 	.word	0x08007604

08002200 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	611a      	str	r2, [r3, #16]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68d8      	ldr	r0, [r3, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6891      	ldr	r1, [r2, #8]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	4798      	blx	r3
 800224c:	4603      	mov	r3, r0
  };
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
  }
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f98a 	bl	8001594 <_ZN3ros3MsgC1Ev>
 8002280:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
    {
    }
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	08007818 	.word	0x08007818

080022ac <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	441a      	add	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80022c6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ca:	4610      	mov	r0, r2
 80022cc:	f7ff f883 	bl	80013d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4413      	add	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	441a      	add	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80022e4:	eeb0 0a67 	vmov.f32	s0, s15
 80022e8:	4610      	mov	r0, r2
 80022ea:	f7ff f874 	bl	80013d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80022ee:	4602      	mov	r2, r0
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	441a      	add	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8002302:	eeb0 0a67 	vmov.f32	s0, s15
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff f865 	bl	80013d6 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4413      	add	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
      return offset;
 8002314:	68fb      	ldr	r3, [r7, #12]
    }
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	441a      	add	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	4619      	mov	r1, r3
 8002338:	4610      	mov	r0, r2
 800233a:	f7ff f8b8 	bl	80014ae <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800233e:	4602      	mov	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	441a      	add	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3308      	adds	r3, #8
 8002350:	4619      	mov	r1, r3
 8002352:	4610      	mov	r0, r2
 8002354:	f7ff f8ab 	bl	80014ae <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4413      	add	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	441a      	add	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	330c      	adds	r3, #12
 800236a:	4619      	mov	r1, r3
 800236c:	4610      	mov	r0, r2
 800236e:	f7ff f89e 	bl	80014ae <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
     return offset;
 800237a:	68fb      	ldr	r3, [r7, #12]
    }
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	08007628 	.word	0x08007628

080023a0 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	08007640 	.word	0x08007640

080023bc <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f8e4 	bl	8001594 <_ZN3ros3MsgC1Ev>
 80023cc:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff4a 	bl	8002270 <_ZN13geometry_msgs7Vector3C1Ev>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3314      	adds	r3, #20
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff45 	bl	8002270 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	08007800 	.word	0x08007800

080023f4 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	1d18      	adds	r0, r3, #4
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4413      	add	r3, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f7ff ff4d 	bl	80022ac <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002412:	4602      	mov	r2, r0
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f103 0014 	add.w	r0, r3, #20
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	4413      	add	r3, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f7ff ff40 	bl	80022ac <_ZNK13geometry_msgs7Vector39serializeEPh>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4413      	add	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
      return offset;
 8002434:	68fb      	ldr	r3, [r7, #12]
    }
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	1d18      	adds	r0, r3, #4
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	4413      	add	r3, r2
 8002456:	4619      	mov	r1, r3
 8002458:	f7ff ff61 	bl	800231e <_ZN13geometry_msgs7Vector311deserializeEPh>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4413      	add	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f103 0014 	add.w	r0, r3, #20
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	4413      	add	r3, r2
 8002470:	4619      	mov	r1, r3
 8002472:	f7ff ff54 	bl	800231e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002476:	4602      	mov	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
     return offset;
 800247e:	68fb      	ldr	r3, [r7, #12]
    }
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	08007664 	.word	0x08007664

080024a4 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	08007678 	.word	0x08007678

080024c0 <_ZN13freeway_joyfw10stm_fw_msgC1Ev>:
      typedef bool _e_stop_status_type;
      _e_stop_status_type e_stop_status;
      typedef geometry_msgs::Twist _cmd_vel_mcu_type;
      _cmd_vel_mcu_type cmd_vel_mcu;

    stm_fw_msg():
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
      am_status(0),
      e_stop_status(0),
      cmd_vel_mcu()
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff f862 	bl	8001594 <_ZN3ros3MsgC1Ev>
 80024d0:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <_ZN13freeway_joyfw10stm_fw_msgC1Ev+0x38>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	711a      	strb	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	715a      	strb	r2, [r3, #5]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3308      	adds	r3, #8
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff68 	bl	80023bc <_ZN13geometry_msgs5TwistC1Ev>
    {
    }
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	080077e8 	.word	0x080077e8

080024fc <_ZNK13freeway_joyfw10stm_fw_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_am_status;
      u_am_status.real = this->am_status;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	791b      	ldrb	r3, [r3, #4]
 800250e:	743b      	strb	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_am_status.base >> (8 * 0)) & 0xFF;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4413      	add	r3, r2
 8002516:	7c3a      	ldrb	r2, [r7, #16]
 8002518:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->am_status);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_e_stop_status;
      u_e_stop_status.real = this->e_stop_status;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	795b      	ldrb	r3, [r3, #5]
 8002524:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_e_stop_status.base >> (8 * 0)) & 0xFF;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4413      	add	r3, r2
 800252c:	7b3a      	ldrb	r2, [r7, #12]
 800252e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->e_stop_status);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3301      	adds	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
      offset += this->cmd_vel_mcu.serialize(outbuffer + offset);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f103 0008 	add.w	r0, r3, #8
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	4413      	add	r3, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7ff ff56 	bl	80023f4 <_ZNK13geometry_msgs5Twist9serializeEPh>
 8002548:	4602      	mov	r2, r0
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	4413      	add	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
      return offset;
 8002550:	697b      	ldr	r3, [r7, #20]
    }
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_ZN13freeway_joyfw10stm_fw_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_am_status;
      u_am_status.base = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	743b      	strb	r3, [r7, #16]
      u_am_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800256c:	7c3a      	ldrb	r2, [r7, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	6839      	ldr	r1, [r7, #0]
 8002572:	440b      	add	r3, r1
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	b2db      	uxtb	r3, r3
 800257a:	743b      	strb	r3, [r7, #16]
      this->am_status = u_am_status.real;
 800257c:	7c3a      	ldrb	r2, [r7, #16]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->am_status);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3301      	adds	r3, #1
 8002586:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_e_stop_status;
      u_e_stop_status.base = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	733b      	strb	r3, [r7, #12]
      u_e_stop_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800258c:	7b3a      	ldrb	r2, [r7, #12]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	6839      	ldr	r1, [r7, #0]
 8002592:	440b      	add	r3, r1
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	b2db      	uxtb	r3, r3
 800259a:	733b      	strb	r3, [r7, #12]
      this->e_stop_status = u_e_stop_status.real;
 800259c:	7b3a      	ldrb	r2, [r7, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	715a      	strb	r2, [r3, #5]
      offset += sizeof(this->e_stop_status);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3301      	adds	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
      offset += this->cmd_vel_mcu.deserialize(inbuffer + offset);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f103 0008 	add.w	r0, r3, #8
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	f7ff ff42 	bl	800243e <_ZN13geometry_msgs5Twist11deserializeEPh>
 80025ba:	4602      	mov	r2, r0
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	4413      	add	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
     return offset;
 80025c2:	697b      	ldr	r3, [r7, #20]
    }
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_ZN13freeway_joyfw10stm_fw_msg7getTypeEv>:

    const char * getType(){ return "freeway_joyfw/stm_fw_msg"; };
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <_ZN13freeway_joyfw10stm_fw_msg7getTypeEv+0x18>)
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	0800769c 	.word	0x0800769c

080025e8 <_ZN13freeway_joyfw10stm_fw_msg6getMD5Ev>:
    const char * getMD5(){ return "fa2d9ef9f2382f4119166968f815e551"; };
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <_ZN13freeway_joyfw10stm_fw_msg6getMD5Ev+0x18>)
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	080076b8 	.word	0x080076b8

08002604 <_ZN13freeway_joyfw10stm_am_msgC1Ev>:
  {
    public:
      typedef bool _am_status2_type;
      _am_status2_type am_status2;

    stm_am_msg():
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
      am_status2(0)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe ffc0 	bl	8001594 <_ZN3ros3MsgC1Ev>
 8002614:	4a05      	ldr	r2, [pc, #20]	; (800262c <_ZN13freeway_joyfw10stm_am_msgC1Ev+0x28>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	711a      	strb	r2, [r3, #4]
    {
    }
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	080077d0 	.word	0x080077d0

08002630 <_ZNK13freeway_joyfw10stm_am_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_am_status2;
      u_am_status2.real = this->am_status2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	791b      	ldrb	r3, [r3, #4]
 8002642:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_am_status2.base >> (8 * 0)) & 0xFF;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	4413      	add	r3, r2
 800264a:	7a3a      	ldrb	r2, [r7, #8]
 800264c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->am_status2);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3301      	adds	r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
      return offset;
 8002654:	68fb      	ldr	r3, [r7, #12]
    }
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <_ZN13freeway_joyfw10stm_am_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002662:	b480      	push	{r7}
 8002664:	b085      	sub	sp, #20
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_am_status2;
      u_am_status2.base = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	723b      	strb	r3, [r7, #8]
      u_am_status2.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002674:	7a3a      	ldrb	r2, [r7, #8]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	440b      	add	r3, r1
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	723b      	strb	r3, [r7, #8]
      this->am_status2 = u_am_status2.real;
 8002684:	7a3a      	ldrb	r2, [r7, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->am_status2);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3301      	adds	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
     return offset;
 8002690:	68fb      	ldr	r3, [r7, #12]
    }
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <_ZN13freeway_joyfw10stm_am_msg7getTypeEv>:

    const char * getType(){ return "freeway_joyfw/stm_am_msg"; };
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <_ZN13freeway_joyfw10stm_am_msg7getTypeEv+0x18>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	080076dc 	.word	0x080076dc

080026bc <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev>:
    const char * getMD5(){ return "7d69f08cbd0079f4e385def6382afcb2"; };
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev+0x18>)
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	080076f8 	.word	0x080076f8

080026d8 <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE>:
bool axis_B = true;
double l_scale_ = 0.3;
double a_scale_ = 0.4;

// Subscriber:
void am_status_cb(const freeway_joyfw::stm_am_msg &msg) {
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	bool tf = msg.am_status2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	791b      	ldrb	r3, [r3, #4]
 80026e4:	73fb      	strb	r3, [r7, #15]
	*am_status = tf;
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE+0x24>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	701a      	strb	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20001418 	.word	0x20001418

08002700 <map>:
ros::Subscriber<freeway_joyfw::stm_am_msg> am_status_sub("freeway/am_status", &am_status_cb);

long map(uint32_t a, long b, long c, long d, long e) {
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
	return (a - b)*(e - d)/(c - b) + d;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	69b9      	ldr	r1, [r7, #24]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	1a8a      	subs	r2, r1, r2
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	1a8a      	subs	r2, r1, r2
 8002724:	fbb3 f2f2 	udiv	r2, r3, r2
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4413      	add	r3, r2
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <setup>:

uint32_t previous_time;
uint32_t pub_period_time = 50;

// Setup node:
void setup(void) {
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  nh.initNode();
 800273c:	4809      	ldr	r0, [pc, #36]	; (8002764 <setup+0x2c>)
 800273e:	f000 fa19 	bl	8002b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
//  nh.advertiseService(server);
//  nh.advertiseService(server2);
  nh.subscribe(am_status_sub);
 8002742:	4909      	ldr	r1, [pc, #36]	; (8002768 <setup+0x30>)
 8002744:	4807      	ldr	r0, [pc, #28]	; (8002764 <setup+0x2c>)
 8002746:	f000 fa32 	bl	8002bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_>
  nh.advertise(freeway_diagnostics);
 800274a:	4908      	ldr	r1, [pc, #32]	; (800276c <setup+0x34>)
 800274c:	4805      	ldr	r0, [pc, #20]	; (8002764 <setup+0x2c>)
 800274e:	f000 fa5b 	bl	8002c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  //nh.advertiseService(server2);
  e_stop_status = &td;
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <setup+0x38>)
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <setup+0x3c>)
 8002756:	601a      	str	r2, [r3, #0]
  am_status = &fd;
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <setup+0x40>)
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <setup+0x44>)
 800275c:	601a      	str	r2, [r3, #0]
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000a80 	.word	0x20000a80
 8002768:	20001430 	.word	0x20001430
 800276c:	20001400 	.word	0x20001400
 8002770:	20001414 	.word	0x20001414
 8002774:	20000000 	.word	0x20000000
 8002778:	20001418 	.word	0x20001418
 800277c:	2000141c 	.word	0x2000141c

08002780 <loop>:

// Loop:
void loop(uint32_t x_val, uint32_t y_val) {
 8002780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002782:	b085      	sub	sp, #20
 8002784:	af02      	add	r7, sp, #8
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]


if(previous_time + pub_period_time <= HAL_GetTick()) {
 800278a:	4b55      	ldr	r3, [pc, #340]	; (80028e0 <loop+0x160>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b55      	ldr	r3, [pc, #340]	; (80028e4 <loop+0x164>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	18d6      	adds	r6, r2, r3
 8002794:	f001 f9b6 	bl	8003b04 <HAL_GetTick>
 8002798:	4603      	mov	r3, r0
 800279a:	429e      	cmp	r6, r3
 800279c:	bf94      	ite	ls
 800279e:	2301      	movls	r3, #1
 80027a0:	2300      	movhi	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8090 	beq.w	80028ca <loop+0x14a>
  if (*e_stop_status==true && *am_status==true) { //if var 'am_status == true' , it defines manual mode
 80027aa:	4b4f      	ldr	r3, [pc, #316]	; (80028e8 <loop+0x168>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d16c      	bne.n	800288e <loop+0x10e>
 80027b4:	4b4d      	ldr	r3, [pc, #308]	; (80028ec <loop+0x16c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d167      	bne.n	800288e <loop+0x10e>
	  axis_X = map(x_val,0,4095,-10000,10000) / (float)10000.0;
 80027be:	f242 7310 	movw	r3, #10000	; 0x2710
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	4b4a      	ldr	r3, [pc, #296]	; (80028f0 <loop+0x170>)
 80027c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80027ca:	2100      	movs	r1, #0
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ff97 	bl	8002700 <map>
 80027d2:	ee07 0a90 	vmov	s15, r0
 80027d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027da:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80028f4 <loop+0x174>
 80027de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027e2:	ee16 0a90 	vmov	r0, s13
 80027e6:	f7fd ffa3 	bl	8000730 <__aeabi_f2d>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4942      	ldr	r1, [pc, #264]	; (80028f8 <loop+0x178>)
 80027f0:	e9c1 2300 	strd	r2, r3, [r1]
	  axis_Y = map(y_val,0,4095,-10000,10000) / (float)10000.0;
 80027f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <loop+0x170>)
 80027fc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002800:	2100      	movs	r1, #0
 8002802:	6838      	ldr	r0, [r7, #0]
 8002804:	f7ff ff7c 	bl	8002700 <map>
 8002808:	ee07 0a90 	vmov	s15, r0
 800280c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002810:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80028f4 <loop+0x174>
 8002814:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002818:	ee16 0a90 	vmov	r0, s13
 800281c:	f7fd ff88 	bl	8000730 <__aeabi_f2d>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4935      	ldr	r1, [pc, #212]	; (80028fc <loop+0x17c>)
 8002826:	e9c1 2300 	strd	r2, r3, [r1]

	  //cmd_vel_msg.linear.x = l_scale_ * axis_X;
	  //cmd_vel_msg.angular.z = a_scale_ * axis_Y;
	  stm_pub_msg.am_status = true;
 800282a:	4b35      	ldr	r3, [pc, #212]	; (8002900 <loop+0x180>)
 800282c:	2201      	movs	r2, #1
 800282e:	711a      	strb	r2, [r3, #4]
	  stm_pub_msg.e_stop_status = true;
 8002830:	4b33      	ldr	r3, [pc, #204]	; (8002900 <loop+0x180>)
 8002832:	2201      	movs	r2, #1
 8002834:	715a      	strb	r2, [r3, #5]
	  stm_pub_msg.cmd_vel_mcu.linear.x = l_scale_ * axis_X;
 8002836:	4b33      	ldr	r3, [pc, #204]	; (8002904 <loop+0x184>)
 8002838:	e9d3 0100 	ldrd	r0, r1, [r3]
 800283c:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <loop+0x178>)
 800283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002842:	f7fd fce7 	bl	8000214 <__aeabi_dmul>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	f7fd ffc7 	bl	80007e0 <__aeabi_d2f>
 8002852:	4603      	mov	r3, r0
 8002854:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <loop+0x180>)
 8002856:	6113      	str	r3, [r2, #16]
	  stm_pub_msg.cmd_vel_mcu.angular.z = -a_scale_ * axis_Y;
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <loop+0x188>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	4614      	mov	r4, r2
 8002860:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <loop+0x17c>)
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	4620      	mov	r0, r4
 800286c:	4629      	mov	r1, r5
 800286e:	f7fd fcd1 	bl	8000214 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f7fd ffb1 	bl	80007e0 <__aeabi_d2f>
 800287e:	4603      	mov	r3, r0
 8002880:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <loop+0x180>)
 8002882:	6293      	str	r3, [r2, #40]	; 0x28

	  freeway_diagnostics.publish(&stm_pub_msg);
 8002884:	491e      	ldr	r1, [pc, #120]	; (8002900 <loop+0x180>)
 8002886:	4821      	ldr	r0, [pc, #132]	; (800290c <loop+0x18c>)
 8002888:	f7ff fcd1 	bl	800222e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 800288c:	e018      	b.n	80028c0 <loop+0x140>
  }
  else if (*e_stop_status==false) // e_stop is on & *am_status is on/off
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <loop+0x168>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d113      	bne.n	80028c0 <loop+0x140>
  {
	  stm_pub_msg.am_status = *am_status;
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <loop+0x16c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	4b18      	ldr	r3, [pc, #96]	; (8002900 <loop+0x180>)
 80028a0:	711a      	strb	r2, [r3, #4]
	  stm_pub_msg.e_stop_status = false;
 80028a2:	4b17      	ldr	r3, [pc, #92]	; (8002900 <loop+0x180>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	715a      	strb	r2, [r3, #5]
	  stm_pub_msg.cmd_vel_mcu.linear.x = 0;
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <loop+0x180>)
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
	  stm_pub_msg.cmd_vel_mcu.angular.z = 0;
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <loop+0x180>)
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28

	  freeway_diagnostics.publish(&stm_pub_msg);
 80028b8:	4911      	ldr	r1, [pc, #68]	; (8002900 <loop+0x180>)
 80028ba:	4814      	ldr	r0, [pc, #80]	; (800290c <loop+0x18c>)
 80028bc:	f7ff fcb7 	bl	800222e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
  previous_time = HAL_GetTick();
 80028c0:	f001 f920 	bl	8003b04 <HAL_GetTick>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <loop+0x160>)
 80028c8:	6013      	str	r3, [r2, #0]
}
  nh.spinOnce();
 80028ca:	4811      	ldr	r0, [pc, #68]	; (8002910 <loop+0x190>)
 80028cc:	f000 f9ca 	bl	8002c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

  HAL_Delay(1);
 80028d0:	2001      	movs	r0, #1
 80028d2:	f001 f923 	bl	8003b1c <HAL_Delay>
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028de:	bf00      	nop
 80028e0:	2000144c 	.word	0x2000144c
 80028e4:	20000018 	.word	0x20000018
 80028e8:	20001414 	.word	0x20001414
 80028ec:	20001418 	.word	0x20001418
 80028f0:	ffffd8f0 	.word	0xffffd8f0
 80028f4:	461c4000 	.word	0x461c4000
 80028f8:	20001420 	.word	0x20001420
 80028fc:	20001428 	.word	0x20001428
 8002900:	200013d4 	.word	0x200013d4
 8002904:	20000008 	.word	0x20000008
 8002908:	20000010 	.word	0x20000010
 800290c:	20001400 	.word	0x20001400
 8002910:	20000a80 	.word	0x20000a80

08002914 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  static bool pin_stat = true;
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  for (int i=0; i<10; i++){
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b09      	cmp	r3, #9
 8002926:	dc10      	bgt.n	800294a <HAL_GPIO_EXTI_Callback+0x36>
	pin_stat = HAL_GPIO_ReadPin (GPIOA, GPIO_Pin);
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	4619      	mov	r1, r3
 800292c:	480b      	ldr	r0, [pc, #44]	; (800295c <HAL_GPIO_EXTI_Callback+0x48>)
 800292e:	f002 fbe3 	bl	80050f8 <HAL_GPIO_ReadPin>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002940:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<10; i++){
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3301      	adds	r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e7eb      	b.n	8002922 <HAL_GPIO_EXTI_Callback+0xe>
  }
  *e_stop_status = pin_stat;
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_GPIO_EXTI_Callback+0x50>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	701a      	strb	r2, [r3, #0]
//  RESULT.result = 1;
//
//  clt.call(ESTOP_STATUS, RESULT);
  //HAL_Delay(1);

}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40020000 	.word	0x40020000
 8002960:	2000001c 	.word	0x2000001c
 8002964:	20001414 	.word	0x20001414

08002968 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d80d      	bhi.n	8002998 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	fa22 f103 	lsr.w	r1, r2, r3
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	b2ca      	uxtb	r2, r1
 800298e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3301      	adds	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e7ee      	b.n	8002976 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d811      	bhi.n	80029e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6839      	ldr	r1, [r7, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	440a      	add	r2, r1
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	4611      	mov	r1, r2
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	00d2      	lsls	r2, r2, #3
 80029d0:	fa01 f202 	lsl.w	r2, r1, r2
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3301      	adds	r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	e7ea      	b.n	80029b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	08007848 	.word	0x08007848

08002a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ffe8 	bl	80029f0 <_ZN3ros15NodeHandleBase_C1Ev>
 8002a20:	4a39      	ldr	r2, [pc, #228]	; (8002b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xf8>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fc8c 	bl	8001348 <_ZN13STM32HardwareC1Ev>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f91c 	bl	8001c7c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b18      	cmp	r3, #24
 8002a4c:	d80a      	bhi.n	8002a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x54>
      publishers[i] = 0;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	f202 2206 	addw	r2, r2, #518	; 0x206
 8002a56:	2100      	movs	r1, #0
 8002a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	e7f1      	b.n	8002a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b18      	cmp	r3, #24
 8002a6c:	d80b      	bhi.n	8002a86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x76>
      subscribers[i] = 0;
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	3301      	adds	r3, #1
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	e7f0      	b.n	8002a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a90:	d209      	bcs.n	8002aa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x96>
      message_in[i] = 0;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	3318      	adds	r3, #24
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e7f1      	b.n	8002a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab0:	d20a      	bcs.n	8002ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xb8>
      message_out[i] = 0;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	e7f0      	b.n	8002aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
    req_param_resp.ints = NULL;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
    req_param_resp.floats_length = 0;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.floats = NULL;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.ints_length = 0;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
    req_param_resp.ints = NULL;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914

    spin_timeout_ = 0;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	615a      	str	r2, [r3, #20]
  }
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	080077bc 	.word	0x080077bc

08002b0c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	08007830 	.word	0x08007830

08002b2c <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ffe5 	bl	8002b0c <_ZN3ros11Subscriber_C1Ev>
 8002b42:	4a0b      	ldr	r2, [pc, #44]	; (8002b70 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fd59 	bl	8002604 <_ZN13freeway_joyfw10stm_am_msgC1Ev>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	615a      	str	r2, [r3, #20]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	609a      	str	r2, [r3, #8]
  };
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	080077a4 	.word	0x080077a4

08002b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fbf1 	bl	8001368 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
    bytes_ = 0;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
    index_ = 0;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    topic_ = 0;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
  };
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b18      	cmp	r3, #24
 8002bc0:	dc1b      	bgt.n	8002bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10e      	bne.n	8002bf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	605a      	str	r2, [r3, #4]
        return true;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e004      	b.n	8002bfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	e7e0      	b.n	8002bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0xe>
      }
    }
    return false;
 8002bfa:	2300      	movs	r3, #0
  }
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b18      	cmp	r3, #24
 8002c1a:	dc1c      	bgt.n	8002c56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4e>
      if (publishers[i] == 0) // empty slot
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	f202 2206 	addw	r2, r2, #518	; 0x206
 8002c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d110      	bne.n	8002c4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	f202 2206 	addw	r2, r2, #518	; 0x206
 8002c34:	6839      	ldr	r1, [r7, #0]
 8002c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	60da      	str	r2, [r3, #12]
        return true;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e004      	b.n	8002c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e7df      	b.n	8002c16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8002c56:	2300      	movs	r3, #0
  }
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe fba5 	bl	80013c0 <_ZN13STM32Hardware4timeEv>
 8002c76:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d903      	bls.n	8002c92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
    if (mode_ != MODE_FIRST_FF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d009      	beq.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d903      	bls.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
      if (spin_timeout_ > 0)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe fb7f 	bl	80013c0 <_ZN13STM32Hardware4timeEv>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1ad2      	subs	r2, r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	bf8c      	ite	hi
 8002cd0:	2301      	movhi	r3, #1
 8002cd2:	2300      	movls	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8002cda:	f06f 0301 	mvn.w	r3, #1
 8002cde:	e190      	b.n	8003002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe fb4c 	bl	8001382 <_ZN13STM32Hardware4readEv>
 8002cea:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f2c0 8170 	blt.w	8002fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x370>
      checksum_ += data;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	441a      	add	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002d0a:	2b07      	cmp	r3, #7
 8002d0c:	d11d      	bne.n	8002d4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002d14:	1c59      	adds	r1, r3, #1
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	f8c2 18ec 	str.w	r1, [r2, #2284]	; 0x8ec
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	b2d1      	uxtb	r1, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	460a      	mov	r2, r1
 8002d26:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8002d2e:	1e5a      	subs	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1b7      	bne.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2208      	movs	r2, #8
 8002d44:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8002d48:	e7b2      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d128      	bne.n	8002da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x142>
        if (data == 0xff)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2bff      	cmp	r3, #255	; 0xff
 8002d58:	d10d      	bne.n	8002d76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x112>
          mode_++;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f103 0214 	add.w	r2, r3, #20
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002d74:	e79c      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fb20 	bl	80013c0 <_ZN13STM32Hardware4timeEv>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	bf8c      	ite	hi
 8002d8e:	2301      	movhi	r3, #1
 8002d90:	2300      	movls	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d08b      	beq.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
          return SPIN_TIMEOUT;
 8002da0:	f06f 0301 	mvn.w	r3, #1
 8002da4:	e12d      	b.n	8003002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d118      	bne.n	8002de2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2bfe      	cmp	r3, #254	; 0xfe
 8002db4:	d107      	bne.n	8002dc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8002dc4:	e774      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
          if (configured_ == false)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f47f af6b 	bne.w	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f915 	bl	800300a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8002de0:	e766      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d113      	bne.n	8002e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        index_ = 0;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        mode_++;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8002e12:	e74d      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d110      	bne.n	8002e40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8d3 28e4 	ldr.w	r2, [r3, #2276]	; 0x8e4
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	441a      	add	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        mode_++;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8002e3e:	e737      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d116      	bne.n	8002e78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002e50:	425a      	negs	r2, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	bf58      	it	pl
 8002e58:	4253      	negpl	r3, r2
 8002e5a:	2bff      	cmp	r3, #255	; 0xff
 8002e5c:	d107      	bne.n	8002e6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x20a>
          mode_++;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8002e6c:	e720      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8002e76:	e71b      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e7e:	2b05      	cmp	r3, #5
 8002e80:	d10f      	bne.n	8002ea2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23e>
        topic_ = data;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        mode_++;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        checksum_ = data;               /* first byte included in checksum */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8002ea0:	e706      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002ea8:	2b06      	cmp	r3, #6
 8002eaa:	d117      	bne.n	8002edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 28e8 	ldr.w	r2, [r3, #2280]	; 0x8e8
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	441a      	add	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        mode_ = MODE_MESSAGE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        if (bytes_ == 0)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f aeef 	bne.w	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8002eda:	e6e9      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	f47f aee4 	bne.w	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        if ((checksum_ % 256) == 255)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002ef6:	425a      	negs	r2, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	bf58      	it	pl
 8002efe:	4253      	negpl	r3, r2
 8002f00:	2bff      	cmp	r3, #255	; 0xff
 8002f02:	f47f aed5 	bne.w	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d110      	bne.n	8002f32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f87a 	bl	800300a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f894 	bl	8003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
            last_sync_receive_time = c_time;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
            return SPIN_ERR;
 8002f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f30:	e067      	b.n	8003002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002f38:	2b0a      	cmp	r3, #10
 8002f3a:	d106      	bne.n	8002f4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3318      	adds	r3, #24
 8002f40:	4619      	mov	r1, r3
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f95e 	bl	8003204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8002f48:	e6b2      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002f50:	2b06      	cmp	r3, #6
 8002f52:	d10d      	bne.n	8002f70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f603 1208 	addw	r2, r3, #2312	; 0x908
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3318      	adds	r3, #24
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4610      	mov	r0, r2
 8002f62:	f7fe ffc0 	bl	8001ee6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 8002f6e:	e69f      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002f76:	2b0b      	cmp	r3, #11
 8002f78:	d104      	bne.n	8002f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x320>
            configured_ = false;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8002f82:	e695      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002f8a:	3b64      	subs	r3, #100	; 0x64
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f43f ae89 	beq.w	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002fa4:	3b64      	subs	r3, #100	; 0x64
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	6858      	ldr	r0, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002fb8:	3b64      	subs	r3, #100	; 0x64
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	3218      	adds	r2, #24
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4798      	blx	r3
    while (true)
 8002fd2:	e66d      	b.n	8002cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 8002fd4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00f      	beq.n	8003000 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39c>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d906      	bls.n	8003000 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39c>
      requestSyncTime();
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f809 	bl	800300a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    return SPIN_OK;
 8003000:	2300      	movs	r3, #0
  }
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe facc 	bl	80015b4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f107 020c 	add.w	r2, r7, #12
 8003026:	210a      	movs	r1, #10
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
    rt_time = hardware_.time();
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe f9c5 	bl	80013c0 <_ZN13STM32Hardware4timeEv>
 8003036:	4602      	mov	r2, r0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	609a      	str	r2, [r3, #8]
  }
 800303c:	bf00      	nop
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b08b      	sub	sp, #44	; 0x2c
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	4618      	mov	r0, r3
 8003052:	f7fe fb9f 	bl	8001794 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003056:	2300      	movs	r3, #0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	2b18      	cmp	r3, #24
 800305e:	dc5b      	bgt.n	8003118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003064:	f202 2206 	addw	r2, r2, #518	; 0x206
 8003068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d04f      	beq.n	8003110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	f202 2206 	addw	r2, r2, #518	; 0x206
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	b29b      	uxth	r3, r3
 8003080:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	f202 2206 	addw	r2, r2, #518	; 0x206
 800308a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003096:	f202 2206 	addw	r2, r2, #518	; 0x206
 800309a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309e:	6859      	ldr	r1, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a4:	f202 2206 	addw	r2, r2, #518	; 0x206
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3308      	adds	r3, #8
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4798      	blx	r3
 80030b8:	4603      	mov	r3, r0
 80030ba:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c0:	f202 2206 	addw	r2, r2, #518	; 0x206
 80030c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c8:	6859      	ldr	r1, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ce:	f202 2206 	addw	r2, r2, #518	; 0x206
 80030d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	330c      	adds	r3, #12
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4608      	mov	r0, r1
 80030e0:	4798      	blx	r3
 80030e2:	4603      	mov	r3, r0
 80030e4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80030e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ea:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681c      	ldr	r4, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f6:	f202 2206 	addw	r2, r2, #518	; 0x206
 80030fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff f8a9 	bl	8002256 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003104:	4601      	mov	r1, r0
 8003106:	f107 030c 	add.w	r3, r7, #12
 800310a:	461a      	mov	r2, r3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	3301      	adds	r3, #1
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
 8003116:	e7a0      	b.n	800305a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003118:	2300      	movs	r3, #0
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	2b18      	cmp	r3, #24
 8003120:	dc68      	bgt.n	80031f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d05b      	beq.n	80031ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	b29b      	uxth	r3, r3
 8003146:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3308      	adds	r3, #8
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4608      	mov	r0, r1
 800317e:	4798      	blx	r3
 8003180:	4603      	mov	r3, r0
 8003182:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4608      	mov	r0, r1
 80031a8:	4798      	blx	r3
 80031aa:	4603      	mov	r3, r0
 80031ac:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80031ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681c      	ldr	r4, [r3, #0]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	f203 231e 	addw	r3, r3, #542	; 0x21e
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	f203 231e 	addw	r3, r3, #542	; 0x21e
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3304      	adds	r3, #4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4608      	mov	r0, r1
 80031de:	4798      	blx	r3
 80031e0:	4601      	mov	r1, r0
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	461a      	mov	r2, r3
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	3301      	adds	r3, #1
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
 80031f2:	e793      	b.n	800311c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
  }
 80031fc:	bf00      	nop
 80031fe:	372c      	adds	r7, #44	; 0x2c
 8003200:	46bd      	mov	sp, r7
 8003202:	bd90      	pop	{r4, r7, pc}

08003204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800320e:	f107 0308 	add.w	r3, r7, #8
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe f9ce 	bl	80015b4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe f8cf 	bl	80013c0 <_ZN13STM32Hardware4timeEv>
 8003222:	4602      	mov	r2, r0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800322c:	f107 0308 	add.w	r3, r7, #8
 8003230:	6839      	ldr	r1, [r7, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fa2e 	bl	8001694 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	4914      	ldr	r1, [pc, #80]	; (8003290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 800323e:	fba1 1303 	umull	r1, r3, r1, r3
 8003242:	099b      	lsrs	r3, r3, #6
 8003244:	4413      	add	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003248:	6939      	ldr	r1, [r7, #16]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4b10      	ldr	r3, [pc, #64]	; (8003290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 800324e:	fba3 0302 	umull	r0, r3, r3, r2
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003258:	fb00 f303 	mul.w	r3, r0, r3
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x90>)
 8003260:	fb02 f303 	mul.w	r3, r2, r3
 8003264:	440b      	add	r3, r1
 8003266:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003268:	f107 0308 	add.w	r3, r7, #8
 800326c:	3304      	adds	r3, #4
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f8a5 	bl	80033c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3304      	adds	r3, #4
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe f8a0 	bl	80013c0 <_ZN13STM32Hardware4timeEv>
 8003280:	4602      	mov	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
  }
 8003288:	bf00      	nop
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	10624dd3 	.word	0x10624dd3
 8003294:	000f4240 	.word	0x000f4240

08003298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b63      	cmp	r3, #99	; 0x63
 80032a8:	dd09      	ble.n	80032be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 80032b0:	f083 0301 	eor.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e079      	b.n	80033b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	f502 6283 	add.w	r2, r2, #1048	; 0x418
 80032ca:	3207      	adds	r2, #7
 80032cc:	4611      	mov	r1, r2
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
 80032d2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	22ff      	movs	r2, #255	; 0xff
 80032d8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    message_out[1] = PROTOCOL_VER;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	22fe      	movs	r2, #254	; 0xfe
 80032e0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 241a 	ldrb.w	r2, [r3, #1050]	; 0x41a
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800330a:	4413      	add	r3, r2
 800330c:	b2db      	uxtb	r3, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	b21b      	sxth	r3, r3
 8003326:	121b      	asrs	r3, r3, #8
 8003328:	b21b      	sxth	r3, r3
 800332a:	b2da      	uxtb	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e

    /* calculate checksum */
    int chk = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003336:	2305      	movs	r3, #5
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	3306      	adds	r3, #6
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	429a      	cmp	r2, r3
 8003342:	dc0d      	bgt.n	8003360 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	3301      	adds	r3, #1
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	e7ec      	b.n	800333a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3307      	adds	r3, #7
 8003364:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	425a      	negs	r2, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	bf58      	it	pl
 8003370:	4253      	negpl	r3, r2
 8003372:	b2da      	uxtb	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	1c59      	adds	r1, r3, #1
 8003378:	6179      	str	r1, [r7, #20]
 800337a:	43d2      	mvns	r2, r2
 800337c:	b2d1      	uxtb	r1, r2
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4413      	add	r3, r2
 8003382:	460a      	mov	r2, r1
 8003384:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    if (l <= OUTPUT_SIZE)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338e:	dc0a      	bgt.n	80033a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1d18      	adds	r0, r3, #4
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4619      	mov	r1, r3
 800339e:	f7fd fffe 	bl	800139e <_ZN13STM32Hardware5writeEPhi>
      return l;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	e005      	b.n	80033b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80033a6:	4905      	ldr	r1, [pc, #20]	; (80033bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f847 	bl	800343c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	0800771c 	.word	0x0800771c

080033c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3304      	adds	r3, #4
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fd fff6 	bl	80013c0 <_ZN13STM32Hardware4timeEv>
 80033d4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4914      	ldr	r1, [pc, #80]	; (8003430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 80033de:	fba1 1303 	umull	r1, r3, r1, r3
 80033e2:	099b      	lsrs	r3, r3, #6
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	1e5a      	subs	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 80033f4:	fba3 0302 	umull	r0, r3, r3, r2
 80033f8:	099b      	lsrs	r3, r3, #6
 80033fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033fe:	fb00 f303 	mul.w	r3, r0, r3
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	1aca      	subs	r2, r1, r3
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 800340e:	4413      	add	r3, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f103 020c 	add.w	r2, r3, #12
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3310      	adds	r3, #16
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f7fd fd5f 	bl	8000ee4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	10624dd3 	.word	0x10624dd3
 8003434:	000f4240 	.word	0x000f4240
 8003438:	3b9aca00 	.word	0x3b9aca00

0800343c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	2103      	movs	r1, #3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f804 	bl	8003458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	460b      	mov	r3, r1
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003466:	f107 0314 	add.w	r3, r7, #20
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fb56 	bl	8001b1c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003470:	7afb      	ldrb	r3, [r7, #11]
 8003472:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f107 0214 	add.w	r2, r7, #20
 8003482:	2107      	movs	r1, #7
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	4798      	blx	r3
  }
 8003488:	bf00      	nop
 800348a:	3720      	adds	r7, #32
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <_Z41__static_initialization_and_destruction_0ii>:
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d119      	bne.n	80034d4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d114      	bne.n	80034d4 <_Z41__static_initialization_and_destruction_0ii+0x44>
ros::NodeHandle nh;
 80034aa:	480c      	ldr	r0, [pc, #48]	; (80034dc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80034ac:	f7ff fab0 	bl	8002a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Twist cmd_vel_msg;
 80034b0:	480b      	ldr	r0, [pc, #44]	; (80034e0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80034b2:	f7fe ff83 	bl	80023bc <_ZN13geometry_msgs5TwistC1Ev>
freeway_joyfw::stm_fw_msg stm_pub_msg;
 80034b6:	480b      	ldr	r0, [pc, #44]	; (80034e4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80034b8:	f7ff f802 	bl	80024c0 <_ZN13freeway_joyfw10stm_fw_msgC1Ev>
ros::Publisher freeway_diagnostics("freeway/diagnostics", &stm_pub_msg);
 80034bc:	2300      	movs	r3, #0
 80034be:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80034c0:	4909      	ldr	r1, [pc, #36]	; (80034e8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80034c2:	480a      	ldr	r0, [pc, #40]	; (80034ec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80034c4:	f7fe fe9c 	bl	8002200 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<freeway_joyfw::stm_am_msg> am_status_sub("freeway/am_status", &am_status_cb);
 80034c8:	2301      	movs	r3, #1
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80034cc:	4909      	ldr	r1, [pc, #36]	; (80034f4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80034ce:	480a      	ldr	r0, [pc, #40]	; (80034f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80034d0:	f7ff fb2c 	bl	8002b2c <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei>
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000a80 	.word	0x20000a80
 80034e0:	200013b0 	.word	0x200013b0
 80034e4:	200013d4 	.word	0x200013d4
 80034e8:	08007758 	.word	0x08007758
 80034ec:	20001400 	.word	0x20001400
 80034f0:	080026d9 	.word	0x080026d9
 80034f4:	0800776c 	.word	0x0800776c
 80034f8:	20001430 	.word	0x20001430

080034fc <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	330c      	adds	r3, #12
 800350a:	6839      	ldr	r1, [r7, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff f8a8 	bl	8002662 <_ZN13freeway_joyfw10stm_am_msg11deserializeEPh>
    this->cb_(msg);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	320c      	adds	r2, #12
 800351a:	4610      	mov	r0, r2
 800351c:	4798      	blx	r3
  }
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
  }
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	330c      	adds	r3, #12
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff f8a8 	bl	80026a0 <_ZN13freeway_joyfw10stm_am_msg7getTypeEv>
 8003550:	4603      	mov	r3, r0
  }
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	330c      	adds	r3, #12
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff f8a8 	bl	80026bc <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev>
 800356c:	4603      	mov	r3, r0
  }
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
    return configured_;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
  };
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <_GLOBAL__sub_I_nh>:
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
 8003594:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003598:	2001      	movs	r0, #1
 800359a:	f7ff ff79 	bl	8003490 <_Z41__static_initialization_and_destruction_0ii>
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <HAL_MspInit+0x4c>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	4a0f      	ldr	r2, [pc, #60]	; (80035ec <HAL_MspInit+0x4c>)
 80035b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b4:	6453      	str	r3, [r2, #68]	; 0x44
 80035b6:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <HAL_MspInit+0x4c>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_MspInit+0x4c>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4a08      	ldr	r2, [pc, #32]	; (80035ec <HAL_MspInit+0x4c>)
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6413      	str	r3, [r2, #64]	; 0x40
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_MspInit+0x4c>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035de:	2007      	movs	r0, #7
 80035e0:	f000 ffb2 	bl	8004548 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800

080035f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2f      	ldr	r2, [pc, #188]	; (80036cc <HAL_ADC_MspInit+0xdc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d157      	bne.n	80036c2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	4b2e      	ldr	r3, [pc, #184]	; (80036d0 <HAL_ADC_MspInit+0xe0>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	4a2d      	ldr	r2, [pc, #180]	; (80036d0 <HAL_ADC_MspInit+0xe0>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6453      	str	r3, [r2, #68]	; 0x44
 8003622:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <HAL_ADC_MspInit+0xe0>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <HAL_ADC_MspInit+0xe0>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4a26      	ldr	r2, [pc, #152]	; (80036d0 <HAL_ADC_MspInit+0xe0>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <HAL_ADC_MspInit+0xe0>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800364a:	2303      	movs	r3, #3
 800364c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800364e:	2303      	movs	r3, #3
 8003650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003656:	f107 0314 	add.w	r3, r7, #20
 800365a:	4619      	mov	r1, r3
 800365c:	481d      	ldr	r0, [pc, #116]	; (80036d4 <HAL_ADC_MspInit+0xe4>)
 800365e:	f001 fbb7 	bl	8004dd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 8003664:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <HAL_ADC_MspInit+0xec>)
 8003666:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 800366a:	2200      	movs	r2, #0
 800366c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800366e:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003674:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800367a:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 800367c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003680:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 8003684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003688:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 800368c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003690:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 8003694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003698:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 800369c:	2200      	movs	r2, #0
 800369e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036a6:	480c      	ldr	r0, [pc, #48]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 80036a8:	f000 ff90 	bl	80045cc <HAL_DMA_Init>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80036b2:	f7fd fe43 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
 80036bc:	4a06      	ldr	r2, [pc, #24]	; (80036d8 <HAL_ADC_MspInit+0xe8>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036c2:	bf00      	nop
 80036c4:	3728      	adds	r7, #40	; 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40012000 	.word	0x40012000
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40020000 	.word	0x40020000
 80036d8:	2000090c 	.word	0x2000090c
 80036dc:	40026410 	.word	0x40026410

080036e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a4c      	ldr	r2, [pc, #304]	; (8003830 <HAL_UART_MspInit+0x150>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	f040 8092 	bne.w	8003828 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003704:	2300      	movs	r3, #0
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	4b4a      	ldr	r3, [pc, #296]	; (8003834 <HAL_UART_MspInit+0x154>)
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	4a49      	ldr	r2, [pc, #292]	; (8003834 <HAL_UART_MspInit+0x154>)
 800370e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003712:	6413      	str	r3, [r2, #64]	; 0x40
 8003714:	4b47      	ldr	r3, [pc, #284]	; (8003834 <HAL_UART_MspInit+0x154>)
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	4b43      	ldr	r3, [pc, #268]	; (8003834 <HAL_UART_MspInit+0x154>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	4a42      	ldr	r2, [pc, #264]	; (8003834 <HAL_UART_MspInit+0x154>)
 800372a:	f043 0304 	orr.w	r3, r3, #4
 800372e:	6313      	str	r3, [r2, #48]	; 0x30
 8003730:	4b40      	ldr	r3, [pc, #256]	; (8003834 <HAL_UART_MspInit+0x154>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800373c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	2302      	movs	r3, #2
 8003744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374a:	2303      	movs	r3, #3
 800374c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800374e:	2307      	movs	r3, #7
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003752:	f107 0314 	add.w	r3, r7, #20
 8003756:	4619      	mov	r1, r3
 8003758:	4837      	ldr	r0, [pc, #220]	; (8003838 <HAL_UART_MspInit+0x158>)
 800375a:	f001 fb39 	bl	8004dd0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800375e:	4b37      	ldr	r3, [pc, #220]	; (800383c <HAL_UART_MspInit+0x15c>)
 8003760:	4a37      	ldr	r2, [pc, #220]	; (8003840 <HAL_UART_MspInit+0x160>)
 8003762:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003764:	4b35      	ldr	r3, [pc, #212]	; (800383c <HAL_UART_MspInit+0x15c>)
 8003766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800376a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800376c:	4b33      	ldr	r3, [pc, #204]	; (800383c <HAL_UART_MspInit+0x15c>)
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003772:	4b32      	ldr	r3, [pc, #200]	; (800383c <HAL_UART_MspInit+0x15c>)
 8003774:	2200      	movs	r2, #0
 8003776:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003778:	4b30      	ldr	r3, [pc, #192]	; (800383c <HAL_UART_MspInit+0x15c>)
 800377a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800377e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003780:	4b2e      	ldr	r3, [pc, #184]	; (800383c <HAL_UART_MspInit+0x15c>)
 8003782:	2200      	movs	r2, #0
 8003784:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003786:	4b2d      	ldr	r3, [pc, #180]	; (800383c <HAL_UART_MspInit+0x15c>)
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800378c:	4b2b      	ldr	r3, [pc, #172]	; (800383c <HAL_UART_MspInit+0x15c>)
 800378e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003792:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003794:	4b29      	ldr	r3, [pc, #164]	; (800383c <HAL_UART_MspInit+0x15c>)
 8003796:	2200      	movs	r2, #0
 8003798:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800379a:	4b28      	ldr	r3, [pc, #160]	; (800383c <HAL_UART_MspInit+0x15c>)
 800379c:	2200      	movs	r2, #0
 800379e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80037a0:	4826      	ldr	r0, [pc, #152]	; (800383c <HAL_UART_MspInit+0x15c>)
 80037a2:	f000 ff13 	bl	80045cc <HAL_DMA_Init>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80037ac:	f7fd fdc6 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a22      	ldr	r2, [pc, #136]	; (800383c <HAL_UART_MspInit+0x15c>)
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
 80037b6:	4a21      	ldr	r2, [pc, #132]	; (800383c <HAL_UART_MspInit+0x15c>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80037bc:	4b21      	ldr	r3, [pc, #132]	; (8003844 <HAL_UART_MspInit+0x164>)
 80037be:	4a22      	ldr	r2, [pc, #136]	; (8003848 <HAL_UART_MspInit+0x168>)
 80037c0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80037c2:	4b20      	ldr	r3, [pc, #128]	; (8003844 <HAL_UART_MspInit+0x164>)
 80037c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037c8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_UART_MspInit+0x164>)
 80037cc:	2240      	movs	r2, #64	; 0x40
 80037ce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d0:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <HAL_UART_MspInit+0x164>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_UART_MspInit+0x164>)
 80037d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037de:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_UART_MspInit+0x164>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <HAL_UART_MspInit+0x164>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <HAL_UART_MspInit+0x164>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <HAL_UART_MspInit+0x164>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_UART_MspInit+0x164>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80037fc:	4811      	ldr	r0, [pc, #68]	; (8003844 <HAL_UART_MspInit+0x164>)
 80037fe:	f000 fee5 	bl	80045cc <HAL_DMA_Init>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8003808:	f7fd fd98 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a0d      	ldr	r2, [pc, #52]	; (8003844 <HAL_UART_MspInit+0x164>)
 8003810:	635a      	str	r2, [r3, #52]	; 0x34
 8003812:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <HAL_UART_MspInit+0x164>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003818:	2200      	movs	r2, #0
 800381a:	2100      	movs	r1, #0
 800381c:	2027      	movs	r0, #39	; 0x27
 800381e:	f000 fe9e 	bl	800455e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003822:	2027      	movs	r0, #39	; 0x27
 8003824:	f000 feb7 	bl	8004596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003828:	bf00      	nop
 800382a:	3728      	adds	r7, #40	; 0x28
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40004800 	.word	0x40004800
 8003834:	40023800 	.word	0x40023800
 8003838:	40020800 	.word	0x40020800
 800383c:	200009b0 	.word	0x200009b0
 8003840:	40026028 	.word	0x40026028
 8003844:	20000a10 	.word	0x20000a10
 8003848:	40026058 	.word	0x40026058

0800384c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003850:	e7fe      	b.n	8003850 <NMI_Handler+0x4>

08003852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003852:	b480      	push	{r7}
 8003854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003856:	e7fe      	b.n	8003856 <HardFault_Handler+0x4>

08003858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800385c:	e7fe      	b.n	800385c <MemManage_Handler+0x4>

0800385e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003862:	e7fe      	b.n	8003862 <BusFault_Handler+0x4>

08003864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003868:	e7fe      	b.n	8003868 <UsageFault_Handler+0x4>

0800386a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003898:	f000 f920 	bl	8003adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800389c:	bf00      	nop
 800389e:	bd80      	pop	{r7, pc}

080038a0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(joy_pin_Pin);
 80038a4:	2008      	movs	r0, #8
 80038a6:	f001 fc3f 	bl	8005128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <DMA1_Stream1_IRQHandler+0x10>)
 80038b6:	f001 f821 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200009b0 	.word	0x200009b0

080038c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <DMA1_Stream3_IRQHandler+0x10>)
 80038ca:	f001 f817 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000a10 	.word	0x20000a10

080038d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(e_stop_Pin);
 80038dc:	2020      	movs	r0, #32
 80038de:	f001 fc23 	bl	8005128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80038ec:	4802      	ldr	r0, [pc, #8]	; (80038f8 <USART3_IRQHandler+0x10>)
 80038ee:	f002 fb67 	bl	8005fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	2000096c 	.word	0x2000096c

080038fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003900:	4802      	ldr	r0, [pc, #8]	; (800390c <DMA2_Stream0_IRQHandler+0x10>)
 8003902:	f000 fffb 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	2000090c 	.word	0x2000090c

08003910 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
	return 1;
 8003914:	2301      	movs	r3, #1
}
 8003916:	4618      	mov	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <_kill>:

int _kill(int pid, int sig)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800392a:	f003 fc45 	bl	80071b8 <__errno>
 800392e:	4603      	mov	r3, r0
 8003930:	2216      	movs	r2, #22
 8003932:	601a      	str	r2, [r3, #0]
	return -1;
 8003934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <_exit>:

void _exit (int status)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003948:	f04f 31ff 	mov.w	r1, #4294967295
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ffe7 	bl	8003920 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003952:	e7fe      	b.n	8003952 <_exit+0x12>

08003954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800395c:	4a14      	ldr	r2, [pc, #80]	; (80039b0 <_sbrk+0x5c>)
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <_sbrk+0x60>)
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003968:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <_sbrk+0x64>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <_sbrk+0x64>)
 8003972:	4a12      	ldr	r2, [pc, #72]	; (80039bc <_sbrk+0x68>)
 8003974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <_sbrk+0x64>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	429a      	cmp	r2, r3
 8003982:	d207      	bcs.n	8003994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003984:	f003 fc18 	bl	80071b8 <__errno>
 8003988:	4603      	mov	r3, r0
 800398a:	220c      	movs	r2, #12
 800398c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	e009      	b.n	80039a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003994:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <_sbrk+0x64>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800399a:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <_sbrk+0x64>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <_sbrk+0x64>)
 80039a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039a6:	68fb      	ldr	r3, [r7, #12]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20020000 	.word	0x20020000
 80039b4:	00000400 	.word	0x00000400
 80039b8:	20001450 	.word	0x20001450
 80039bc:	20001468 	.word	0x20001468

080039c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <SystemInit+0x20>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	4a05      	ldr	r2, [pc, #20]	; (80039e0 <SystemInit+0x20>)
 80039cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80039e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039e8:	480d      	ldr	r0, [pc, #52]	; (8003a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039ea:	490e      	ldr	r1, [pc, #56]	; (8003a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039ec:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039f0:	e002      	b.n	80039f8 <LoopCopyDataInit>

080039f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039f6:	3304      	adds	r3, #4

080039f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039fc:	d3f9      	bcc.n	80039f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039fe:	4a0b      	ldr	r2, [pc, #44]	; (8003a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a00:	4c0b      	ldr	r4, [pc, #44]	; (8003a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a04:	e001      	b.n	8003a0a <LoopFillZerobss>

08003a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a08:	3204      	adds	r2, #4

08003a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a0c:	d3fb      	bcc.n	8003a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a0e:	f7ff ffd7 	bl	80039c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a12:	f003 fbd7 	bl	80071c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a16:	f7fd fa91 	bl	8000f3c <main>
  bx  lr    
 8003a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a24:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8003a28:	08007904 	.word	0x08007904
  ldr r2, =_sbss
 8003a2c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003a30:	20001468 	.word	0x20001468

08003a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a34:	e7fe      	b.n	8003a34 <ADC_IRQHandler>
	...

08003a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <HAL_Init+0x40>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a0d      	ldr	r2, [pc, #52]	; (8003a78 <HAL_Init+0x40>)
 8003a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_Init+0x40>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <HAL_Init+0x40>)
 8003a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a54:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_Init+0x40>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <HAL_Init+0x40>)
 8003a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a60:	2003      	movs	r0, #3
 8003a62:	f000 fd71 	bl	8004548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a66:	2000      	movs	r0, #0
 8003a68:	f000 f808 	bl	8003a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a6c:	f7ff fd98 	bl	80035a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023c00 	.word	0x40023c00

08003a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_InitTick+0x54>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_InitTick+0x58>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fd89 	bl	80045b2 <HAL_SYSTICK_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e00e      	b.n	8003ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b0f      	cmp	r3, #15
 8003aae:	d80a      	bhi.n	8003ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	f000 fd51 	bl	800455e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003abc:	4a06      	ldr	r2, [pc, #24]	; (8003ad8 <HAL_InitTick+0x5c>)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e000      	b.n	8003ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000020 	.word	0x20000020
 8003ad4:	20000028 	.word	0x20000028
 8003ad8:	20000024 	.word	0x20000024

08003adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_IncTick+0x20>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_IncTick+0x24>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4413      	add	r3, r2
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <HAL_IncTick+0x24>)
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000028 	.word	0x20000028
 8003b00:	20001454 	.word	0x20001454

08003b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return uwTick;
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_GetTick+0x14>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20001454 	.word	0x20001454

08003b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b24:	f7ff ffee 	bl	8003b04 <HAL_GetTick>
 8003b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d005      	beq.n	8003b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_Delay+0x44>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b42:	bf00      	nop
 8003b44:	f7ff ffde 	bl	8003b04 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d8f7      	bhi.n	8003b44 <HAL_Delay+0x28>
  {
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000028 	.word	0x20000028

08003b64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e033      	b.n	8003be2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fd34 	bl	80035f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003baa:	f023 0302 	bic.w	r3, r3, #2
 8003bae:	f043 0202 	orr.w	r2, r3, #2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa78 	bl	80040ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	f043 0201 	orr.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8003bd2:	e001      	b.n	8003bd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_ADC_Start_DMA+0x1e>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e0e9      	b.n	8003dde <HAL_ADC_Start_DMA+0x1f2>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d018      	beq.n	8003c52 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c30:	4b6d      	ldr	r3, [pc, #436]	; (8003de8 <HAL_ADC_Start_DMA+0x1fc>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6d      	ldr	r2, [pc, #436]	; (8003dec <HAL_ADC_Start_DMA+0x200>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	0c9a      	lsrs	r2, r3, #18
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c44:	e002      	b.n	8003c4c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f9      	bne.n	8003c46 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c60:	d107      	bne.n	8003c72 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c70:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	f040 80a1 	bne.w	8003dc4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d106      	bne.n	8003cd0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f023 0206 	bic.w	r2, r3, #6
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
 8003cce:	e002      	b.n	8003cd6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cde:	4b44      	ldr	r3, [pc, #272]	; (8003df0 <HAL_ADC_Start_DMA+0x204>)
 8003ce0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	4a43      	ldr	r2, [pc, #268]	; (8003df4 <HAL_ADC_Start_DMA+0x208>)
 8003ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	4a42      	ldr	r2, [pc, #264]	; (8003df8 <HAL_ADC_Start_DMA+0x20c>)
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	4a41      	ldr	r2, [pc, #260]	; (8003dfc <HAL_ADC_Start_DMA+0x210>)
 8003cf8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d02:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d12:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d22:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	334c      	adds	r3, #76	; 0x4c
 8003d2e:	4619      	mov	r1, r3
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f000 fcf8 	bl	8004728 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d12a      	bne.n	8003d9a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2d      	ldr	r2, [pc, #180]	; (8003e00 <HAL_ADC_Start_DMA+0x214>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d015      	beq.n	8003d7a <HAL_ADC_Start_DMA+0x18e>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <HAL_ADC_Start_DMA+0x218>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d105      	bne.n	8003d64 <HAL_ADC_Start_DMA+0x178>
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <HAL_ADC_Start_DMA+0x204>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a27      	ldr	r2, [pc, #156]	; (8003e08 <HAL_ADC_Start_DMA+0x21c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d136      	bne.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_ADC_Start_DMA+0x204>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d130      	bne.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d129      	bne.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	e020      	b.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <HAL_ADC_Start_DMA+0x214>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d11b      	bne.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d114      	bne.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	e00b      	b.n	8003ddc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f043 0210 	orr.w	r2, r3, #16
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000020 	.word	0x20000020
 8003dec:	431bde83 	.word	0x431bde83
 8003df0:	40012300 	.word	0x40012300
 8003df4:	080042a5 	.word	0x080042a5
 8003df8:	0800435f 	.word	0x0800435f
 8003dfc:	0800437b 	.word	0x0800437b
 8003e00:	40012000 	.word	0x40012000
 8003e04:	40012100 	.word	0x40012100
 8003e08:	40012200 	.word	0x40012200

08003e0c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x1c>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e113      	b.n	800408c <HAL_ADC_ConfigChannel+0x244>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b09      	cmp	r3, #9
 8003e72:	d925      	bls.n	8003ec0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68d9      	ldr	r1, [r3, #12]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	4613      	mov	r3, r2
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	4413      	add	r3, r2
 8003e88:	3b1e      	subs	r3, #30
 8003e8a:	2207      	movs	r2, #7
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43da      	mvns	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	400a      	ands	r2, r1
 8003e98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68d9      	ldr	r1, [r3, #12]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	4618      	mov	r0, r3
 8003eac:	4603      	mov	r3, r0
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	4403      	add	r3, r0
 8003eb2:	3b1e      	subs	r3, #30
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	60da      	str	r2, [r3, #12]
 8003ebe:	e022      	b.n	8003f06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6919      	ldr	r1, [r3, #16]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	2207      	movs	r2, #7
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43da      	mvns	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6919      	ldr	r1, [r3, #16]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4403      	add	r3, r0
 8003efc:	409a      	lsls	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b06      	cmp	r3, #6
 8003f0c:	d824      	bhi.n	8003f58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3b05      	subs	r3, #5
 8003f20:	221f      	movs	r2, #31
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43da      	mvns	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	400a      	ands	r2, r1
 8003f2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	3b05      	subs	r3, #5
 8003f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	635a      	str	r2, [r3, #52]	; 0x34
 8003f56:	e04c      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b0c      	cmp	r3, #12
 8003f5e:	d824      	bhi.n	8003faa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	3b23      	subs	r3, #35	; 0x23
 8003f72:	221f      	movs	r2, #31
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	400a      	ands	r2, r1
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	4618      	mov	r0, r3
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	3b23      	subs	r3, #35	; 0x23
 8003f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa8:	e023      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	3b41      	subs	r3, #65	; 0x41
 8003fbc:	221f      	movs	r2, #31
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	400a      	ands	r2, r1
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	4618      	mov	r0, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3b41      	subs	r3, #65	; 0x41
 8003fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ff2:	4b29      	ldr	r3, [pc, #164]	; (8004098 <HAL_ADC_ConfigChannel+0x250>)
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a28      	ldr	r2, [pc, #160]	; (800409c <HAL_ADC_ConfigChannel+0x254>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d10f      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x1d8>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b12      	cmp	r3, #18
 8004006:	d10b      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1d      	ldr	r2, [pc, #116]	; (800409c <HAL_ADC_ConfigChannel+0x254>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d12b      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x23a>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_ADC_ConfigChannel+0x258>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <HAL_ADC_ConfigChannel+0x1f4>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b11      	cmp	r3, #17
 800403a:	d122      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a11      	ldr	r2, [pc, #68]	; (80040a0 <HAL_ADC_ConfigChannel+0x258>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d111      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800405e:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <HAL_ADC_ConfigChannel+0x25c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <HAL_ADC_ConfigChannel+0x260>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	0c9a      	lsrs	r2, r3, #18
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004074:	e002      	b.n	800407c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	3b01      	subs	r3, #1
 800407a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f9      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40012300 	.word	0x40012300
 800409c:	40012000 	.word	0x40012000
 80040a0:	10000012 	.word	0x10000012
 80040a4:	20000020 	.word	0x20000020
 80040a8:	431bde83 	.word	0x431bde83

080040ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040b4:	4b79      	ldr	r3, [pc, #484]	; (800429c <ADC_Init+0x1f0>)
 80040b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	021a      	lsls	r2, r3, #8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6899      	ldr	r1, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	4a58      	ldr	r2, [pc, #352]	; (80042a0 <ADC_Init+0x1f4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d022      	beq.n	800418a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004152:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6899      	ldr	r1, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6899      	ldr	r1, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	e00f      	b.n	80041aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004198:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0202 	bic.w	r2, r2, #2
 80041b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6899      	ldr	r1, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	7e1b      	ldrb	r3, [r3, #24]
 80041c4:	005a      	lsls	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01b      	beq.n	8004210 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80041f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6859      	ldr	r1, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	3b01      	subs	r3, #1
 8004204:	035a      	lsls	r2, r3, #13
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	e007      	b.n	8004220 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800421e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800422e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	3b01      	subs	r3, #1
 800423c:	051a      	lsls	r2, r3, #20
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004254:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6899      	ldr	r1, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004262:	025a      	lsls	r2, r3, #9
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6899      	ldr	r1, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	029a      	lsls	r2, r3, #10
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	609a      	str	r2, [r3, #8]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40012300 	.word	0x40012300
 80042a0:	0f000001 	.word	0x0f000001

080042a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d13c      	bne.n	8004338 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d12b      	bne.n	8004330 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d127      	bne.n	8004330 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d006      	beq.n	80042fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d119      	bne.n	8004330 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0220 	bic.w	r2, r2, #32
 800430a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	f043 0201 	orr.w	r2, r3, #1
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff fd6b 	bl	8003e0c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004336:	e00e      	b.n	8004356 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff fd75 	bl	8003e34 <HAL_ADC_ErrorCallback>
}
 800434a:	e004      	b.n	8004356 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff fd57 	bl	8003e20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2240      	movs	r2, #64	; 0x40
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7ff fd4a 	bl	8003e34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c4:	4013      	ands	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043da:	4a04      	ldr	r2, [pc, #16]	; (80043ec <__NVIC_SetPriorityGrouping+0x44>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	60d3      	str	r3, [r2, #12]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f4:	4b04      	ldr	r3, [pc, #16]	; (8004408 <__NVIC_GetPriorityGrouping+0x18>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 0307 	and.w	r3, r3, #7
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	2b00      	cmp	r3, #0
 800441c:	db0b      	blt.n	8004436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	4907      	ldr	r1, [pc, #28]	; (8004444 <__NVIC_EnableIRQ+0x38>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2001      	movs	r0, #1
 800442e:	fa00 f202 	lsl.w	r2, r0, r2
 8004432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	e000e100 	.word	0xe000e100

08004448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004458:	2b00      	cmp	r3, #0
 800445a:	db0a      	blt.n	8004472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	490c      	ldr	r1, [pc, #48]	; (8004494 <__NVIC_SetPriority+0x4c>)
 8004462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004466:	0112      	lsls	r2, r2, #4
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	440b      	add	r3, r1
 800446c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004470:	e00a      	b.n	8004488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4908      	ldr	r1, [pc, #32]	; (8004498 <__NVIC_SetPriority+0x50>)
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	3b04      	subs	r3, #4
 8004480:	0112      	lsls	r2, r2, #4
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	440b      	add	r3, r1
 8004486:	761a      	strb	r2, [r3, #24]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000e100 	.word	0xe000e100
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f1c3 0307 	rsb	r3, r3, #7
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	bf28      	it	cs
 80044ba:	2304      	movcs	r3, #4
 80044bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3304      	adds	r3, #4
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d902      	bls.n	80044cc <NVIC_EncodePriority+0x30>
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3b03      	subs	r3, #3
 80044ca:	e000      	b.n	80044ce <NVIC_EncodePriority+0x32>
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43da      	mvns	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	401a      	ands	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e4:	f04f 31ff 	mov.w	r1, #4294967295
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	fa01 f303 	lsl.w	r3, r1, r3
 80044ee:	43d9      	mvns	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f4:	4313      	orrs	r3, r2
         );
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3724      	adds	r7, #36	; 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3b01      	subs	r3, #1
 8004510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004514:	d301      	bcc.n	800451a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004516:	2301      	movs	r3, #1
 8004518:	e00f      	b.n	800453a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800451a:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <SysTick_Config+0x40>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3b01      	subs	r3, #1
 8004520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004522:	210f      	movs	r1, #15
 8004524:	f04f 30ff 	mov.w	r0, #4294967295
 8004528:	f7ff ff8e 	bl	8004448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <SysTick_Config+0x40>)
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004532:	4b04      	ldr	r3, [pc, #16]	; (8004544 <SysTick_Config+0x40>)
 8004534:	2207      	movs	r2, #7
 8004536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	e000e010 	.word	0xe000e010

08004548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ff29 	bl	80043a8 <__NVIC_SetPriorityGrouping>
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800455e:	b580      	push	{r7, lr}
 8004560:	b086      	sub	sp, #24
 8004562:	af00      	add	r7, sp, #0
 8004564:	4603      	mov	r3, r0
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004570:	f7ff ff3e 	bl	80043f0 <__NVIC_GetPriorityGrouping>
 8004574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	6978      	ldr	r0, [r7, #20]
 800457c:	f7ff ff8e 	bl	800449c <NVIC_EncodePriority>
 8004580:	4602      	mov	r2, r0
 8004582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004586:	4611      	mov	r1, r2
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff ff5d 	bl	8004448 <__NVIC_SetPriority>
}
 800458e:	bf00      	nop
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	4603      	mov	r3, r0
 800459e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff ff31 	bl	800440c <__NVIC_EnableIRQ>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff ffa2 	bl	8004504 <SysTick_Config>
 80045c0:	4603      	mov	r3, r0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045d8:	f7ff fa94 	bl	8003b04 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e099      	b.n	800471c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004608:	e00f      	b.n	800462a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800460a:	f7ff fa7b 	bl	8003b04 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b05      	cmp	r3, #5
 8004616:	d908      	bls.n	800462a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2203      	movs	r2, #3
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e078      	b.n	800471c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e8      	bne.n	800460a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4b38      	ldr	r3, [pc, #224]	; (8004724 <HAL_DMA_Init+0x158>)
 8004644:	4013      	ands	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800466e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2b04      	cmp	r3, #4
 8004682:	d107      	bne.n	8004694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	4313      	orrs	r3, r2
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0307 	bic.w	r3, r3, #7
 80046aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d117      	bne.n	80046ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00e      	beq.n	80046ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fb01 	bl	8004cd8 <DMA_CheckFifoParam>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2240      	movs	r2, #64	; 0x40
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046ea:	2301      	movs	r3, #1
 80046ec:	e016      	b.n	800471c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fab8 	bl	8004c6c <DMA_CalcBaseAndBitshift>
 80046fc:	4603      	mov	r3, r0
 80046fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	223f      	movs	r2, #63	; 0x3f
 8004706:	409a      	lsls	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	f010803f 	.word	0xf010803f

08004728 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_DMA_Start_IT+0x26>
 800474a:	2302      	movs	r3, #2
 800474c:	e040      	b.n	80047d0 <HAL_DMA_Start_IT+0xa8>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d12f      	bne.n	80047c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2202      	movs	r2, #2
 8004766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fa4a 	bl	8004c10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004780:	223f      	movs	r2, #63	; 0x3f
 8004782:	409a      	lsls	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0216 	orr.w	r2, r2, #22
 8004796:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0208 	orr.w	r2, r2, #8
 80047ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e005      	b.n	80047ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
 80047cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047e6:	f7ff f98d 	bl	8003b04 <HAL_GetTick>
 80047ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d008      	beq.n	800480a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2280      	movs	r2, #128	; 0x80
 80047fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e052      	b.n	80048b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0216 	bic.w	r2, r2, #22
 8004818:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695a      	ldr	r2, [r3, #20]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004828:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <HAL_DMA_Abort+0x62>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0208 	bic.w	r2, r2, #8
 8004848:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800485a:	e013      	b.n	8004884 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800485c:	f7ff f952 	bl	8003b04 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b05      	cmp	r3, #5
 8004868:	d90c      	bls.n	8004884 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2203      	movs	r2, #3
 8004874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e015      	b.n	80048b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e4      	bne.n	800485c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	223f      	movs	r2, #63	; 0x3f
 8004898:	409a      	lsls	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d004      	beq.n	80048d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2280      	movs	r2, #128	; 0x80
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e00c      	b.n	80048f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2205      	movs	r2, #5
 80048da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0201 	bic.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004908:	4b8e      	ldr	r3, [pc, #568]	; (8004b44 <HAL_DMA_IRQHandler+0x248>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a8e      	ldr	r2, [pc, #568]	; (8004b48 <HAL_DMA_IRQHandler+0x24c>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	0a9b      	lsrs	r3, r3, #10
 8004914:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004926:	2208      	movs	r2, #8
 8004928:	409a      	lsls	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4013      	ands	r3, r2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01a      	beq.n	8004968 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d013      	beq.n	8004968 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0204 	bic.w	r2, r2, #4
 800494e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	2208      	movs	r2, #8
 8004956:	409a      	lsls	r2, r3
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	f043 0201 	orr.w	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496c:	2201      	movs	r2, #1
 800496e:	409a      	lsls	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d012      	beq.n	800499e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498a:	2201      	movs	r2, #1
 800498c:	409a      	lsls	r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004996:	f043 0202 	orr.w	r2, r3, #2
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a2:	2204      	movs	r2, #4
 80049a4:	409a      	lsls	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d012      	beq.n	80049d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00b      	beq.n	80049d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c0:	2204      	movs	r2, #4
 80049c2:	409a      	lsls	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	f043 0204 	orr.w	r2, r3, #4
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d8:	2210      	movs	r2, #16
 80049da:	409a      	lsls	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d043      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d03c      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f6:	2210      	movs	r2, #16
 80049f8:	409a      	lsls	r2, r3
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d018      	beq.n	8004a3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d108      	bne.n	8004a2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d024      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
 8004a2a:	e01f      	b.n	8004a6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
 8004a3c:	e016      	b.n	8004a6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0208 	bic.w	r2, r2, #8
 8004a5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a70:	2220      	movs	r2, #32
 8004a72:	409a      	lsls	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 808f 	beq.w	8004b9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8087 	beq.w	8004b9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a92:	2220      	movs	r2, #32
 8004a94:	409a      	lsls	r2, r3
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b05      	cmp	r3, #5
 8004aa4:	d136      	bne.n	8004b14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0216 	bic.w	r2, r2, #22
 8004ab4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <HAL_DMA_IRQHandler+0x1da>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0208 	bic.w	r2, r2, #8
 8004ae4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aea:	223f      	movs	r2, #63	; 0x3f
 8004aec:	409a      	lsls	r2, r3
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d07e      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	4798      	blx	r3
        }
        return;
 8004b12:	e079      	b.n	8004c08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01d      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10d      	bne.n	8004b4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d031      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
 8004b40:	e02c      	b.n	8004b9c <HAL_DMA_IRQHandler+0x2a0>
 8004b42:	bf00      	nop
 8004b44:	20000020 	.word	0x20000020
 8004b48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d023      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4798      	blx	r3
 8004b5c:	e01e      	b.n	8004b9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10f      	bne.n	8004b8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0210 	bic.w	r2, r2, #16
 8004b7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d032      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d022      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2205      	movs	r2, #5
 8004bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d307      	bcc.n	8004be4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f2      	bne.n	8004bc8 <HAL_DMA_IRQHandler+0x2cc>
 8004be2:	e000      	b.n	8004be6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004be4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
 8004c06:	e000      	b.n	8004c0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c08:	bf00      	nop
    }
  }
}
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d108      	bne.n	8004c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c4e:	e007      	b.n	8004c60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	60da      	str	r2, [r3, #12]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	3b10      	subs	r3, #16
 8004c7c:	4a14      	ldr	r2, [pc, #80]	; (8004cd0 <DMA_CalcBaseAndBitshift+0x64>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c86:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <DMA_CalcBaseAndBitshift+0x68>)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d909      	bls.n	8004cae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	1d1a      	adds	r2, r3, #4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	659a      	str	r2, [r3, #88]	; 0x58
 8004cac:	e007      	b.n	8004cbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	aaaaaaab 	.word	0xaaaaaaab
 8004cd4:	080078e4 	.word	0x080078e4

08004cd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d11f      	bne.n	8004d32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d856      	bhi.n	8004da6 <DMA_CheckFifoParam+0xce>
 8004cf8:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <DMA_CheckFifoParam+0x28>)
 8004cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfe:	bf00      	nop
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d23 	.word	0x08004d23
 8004d08:	08004d11 	.word	0x08004d11
 8004d0c:	08004da7 	.word	0x08004da7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d046      	beq.n	8004daa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d20:	e043      	b.n	8004daa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d2a:	d140      	bne.n	8004dae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d30:	e03d      	b.n	8004dae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3a:	d121      	bne.n	8004d80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d837      	bhi.n	8004db2 <DMA_CheckFifoParam+0xda>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <DMA_CheckFifoParam+0x70>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d5f 	.word	0x08004d5f
 8004d50:	08004d59 	.word	0x08004d59
 8004d54:	08004d71 	.word	0x08004d71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d5c:	e030      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d025      	beq.n	8004db6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d6e:	e022      	b.n	8004db6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d78:	d11f      	bne.n	8004dba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d7e:	e01c      	b.n	8004dba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d903      	bls.n	8004d8e <DMA_CheckFifoParam+0xb6>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d003      	beq.n	8004d94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d8c:	e018      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
      break;
 8004d92:	e015      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00e      	beq.n	8004dbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
      break;
 8004da4:	e00b      	b.n	8004dbe <DMA_CheckFifoParam+0xe6>
      break;
 8004da6:	bf00      	nop
 8004da8:	e00a      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004daa:	bf00      	nop
 8004dac:	e008      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dae:	bf00      	nop
 8004db0:	e006      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004db2:	bf00      	nop
 8004db4:	e004      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004db6:	bf00      	nop
 8004db8:	e002      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dba:	bf00      	nop
 8004dbc:	e000      	b.n	8004dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dbe:	bf00      	nop
    }
  } 
  
  return status; 
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop

08004dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b089      	sub	sp, #36	; 0x24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e165      	b.n	80050b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dec:	2201      	movs	r2, #1
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	f040 8154 	bne.w	80050b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d005      	beq.n	8004e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d130      	bne.n	8004e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43db      	mvns	r3, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4013      	ands	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e58:	2201      	movs	r2, #1
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f003 0201 	and.w	r2, r3, #1
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d017      	beq.n	8004ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d123      	bne.n	8004f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	08da      	lsrs	r2, r3, #3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3208      	adds	r2, #8
 8004ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	220f      	movs	r2, #15
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	08da      	lsrs	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3208      	adds	r2, #8
 8004f0e:	69b9      	ldr	r1, [r7, #24]
 8004f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	2203      	movs	r2, #3
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 0203 	and.w	r2, r3, #3
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80ae 	beq.w	80050b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	4b5d      	ldr	r3, [pc, #372]	; (80050d0 <HAL_GPIO_Init+0x300>)
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	4a5c      	ldr	r2, [pc, #368]	; (80050d0 <HAL_GPIO_Init+0x300>)
 8004f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f64:	6453      	str	r3, [r2, #68]	; 0x44
 8004f66:	4b5a      	ldr	r3, [pc, #360]	; (80050d0 <HAL_GPIO_Init+0x300>)
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f72:	4a58      	ldr	r2, [pc, #352]	; (80050d4 <HAL_GPIO_Init+0x304>)
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	089b      	lsrs	r3, r3, #2
 8004f78:	3302      	adds	r3, #2
 8004f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	220f      	movs	r2, #15
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4013      	ands	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a4f      	ldr	r2, [pc, #316]	; (80050d8 <HAL_GPIO_Init+0x308>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d025      	beq.n	8004fea <HAL_GPIO_Init+0x21a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a4e      	ldr	r2, [pc, #312]	; (80050dc <HAL_GPIO_Init+0x30c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01f      	beq.n	8004fe6 <HAL_GPIO_Init+0x216>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a4d      	ldr	r2, [pc, #308]	; (80050e0 <HAL_GPIO_Init+0x310>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d019      	beq.n	8004fe2 <HAL_GPIO_Init+0x212>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a4c      	ldr	r2, [pc, #304]	; (80050e4 <HAL_GPIO_Init+0x314>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_GPIO_Init+0x20e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a4b      	ldr	r2, [pc, #300]	; (80050e8 <HAL_GPIO_Init+0x318>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00d      	beq.n	8004fda <HAL_GPIO_Init+0x20a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a4a      	ldr	r2, [pc, #296]	; (80050ec <HAL_GPIO_Init+0x31c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <HAL_GPIO_Init+0x206>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a49      	ldr	r2, [pc, #292]	; (80050f0 <HAL_GPIO_Init+0x320>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_GPIO_Init+0x202>
 8004fce:	2306      	movs	r3, #6
 8004fd0:	e00c      	b.n	8004fec <HAL_GPIO_Init+0x21c>
 8004fd2:	2307      	movs	r3, #7
 8004fd4:	e00a      	b.n	8004fec <HAL_GPIO_Init+0x21c>
 8004fd6:	2305      	movs	r3, #5
 8004fd8:	e008      	b.n	8004fec <HAL_GPIO_Init+0x21c>
 8004fda:	2304      	movs	r3, #4
 8004fdc:	e006      	b.n	8004fec <HAL_GPIO_Init+0x21c>
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e004      	b.n	8004fec <HAL_GPIO_Init+0x21c>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e002      	b.n	8004fec <HAL_GPIO_Init+0x21c>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <HAL_GPIO_Init+0x21c>
 8004fea:	2300      	movs	r3, #0
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	f002 0203 	and.w	r2, r2, #3
 8004ff2:	0092      	lsls	r2, r2, #2
 8004ff4:	4093      	lsls	r3, r2
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ffc:	4935      	ldr	r1, [pc, #212]	; (80050d4 <HAL_GPIO_Init+0x304>)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	089b      	lsrs	r3, r3, #2
 8005002:	3302      	adds	r3, #2
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800500a:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <HAL_GPIO_Init+0x324>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800502e:	4a31      	ldr	r2, [pc, #196]	; (80050f4 <HAL_GPIO_Init+0x324>)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005034:	4b2f      	ldr	r3, [pc, #188]	; (80050f4 <HAL_GPIO_Init+0x324>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	43db      	mvns	r3, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4013      	ands	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005058:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <HAL_GPIO_Init+0x324>)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800505e:	4b25      	ldr	r3, [pc, #148]	; (80050f4 <HAL_GPIO_Init+0x324>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	43db      	mvns	r3, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4013      	ands	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <HAL_GPIO_Init+0x324>)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005088:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <HAL_GPIO_Init+0x324>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	43db      	mvns	r3, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4013      	ands	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050ac:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <HAL_GPIO_Init+0x324>)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	3301      	adds	r3, #1
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	2b0f      	cmp	r3, #15
 80050bc:	f67f ae96 	bls.w	8004dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	3724      	adds	r7, #36	; 0x24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40013800 	.word	0x40013800
 80050d8:	40020000 	.word	0x40020000
 80050dc:	40020400 	.word	0x40020400
 80050e0:	40020800 	.word	0x40020800
 80050e4:	40020c00 	.word	0x40020c00
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40021400 	.word	0x40021400
 80050f0:	40021800 	.word	0x40021800
 80050f4:	40013c00 	.word	0x40013c00

080050f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	887b      	ldrh	r3, [r7, #2]
 800510a:	4013      	ands	r3, r2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
 8005114:	e001      	b.n	800511a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800511a:	7bfb      	ldrb	r3, [r7, #15]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005132:	4b08      	ldr	r3, [pc, #32]	; (8005154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d006      	beq.n	800514c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800513e:	4a05      	ldr	r2, [pc, #20]	; (8005154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005140:	88fb      	ldrh	r3, [r7, #6]
 8005142:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fd fbe4 	bl	8002914 <HAL_GPIO_EXTI_Callback>
  }
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40013c00 	.word	0x40013c00

08005158 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	4b20      	ldr	r3, [pc, #128]	; (80051e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	4a1f      	ldr	r2, [pc, #124]	; (80051e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800516c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005170:	6413      	str	r3, [r2, #64]	; 0x40
 8005172:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800517e:	4b1b      	ldr	r3, [pc, #108]	; (80051ec <HAL_PWREx_EnableOverDrive+0x94>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005184:	f7fe fcbe 	bl	8003b04 <HAL_GetTick>
 8005188:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800518a:	e009      	b.n	80051a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800518c:	f7fe fcba 	bl	8003b04 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800519a:	d901      	bls.n	80051a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e01f      	b.n	80051e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051a0:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d1ee      	bne.n	800518c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051b4:	f7fe fca6 	bl	8003b04 <HAL_GetTick>
 80051b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051ba:	e009      	b.n	80051d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051bc:	f7fe fca2 	bl	8003b04 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ca:	d901      	bls.n	80051d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e007      	b.n	80051e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051d0:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051dc:	d1ee      	bne.n	80051bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40023800 	.word	0x40023800
 80051ec:	420e0040 	.word	0x420e0040
 80051f0:	40007000 	.word	0x40007000
 80051f4:	420e0044 	.word	0x420e0044

080051f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0cc      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800520c:	4b68      	ldr	r3, [pc, #416]	; (80053b0 <HAL_RCC_ClockConfig+0x1b8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d90c      	bls.n	8005234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b65      	ldr	r3, [pc, #404]	; (80053b0 <HAL_RCC_ClockConfig+0x1b8>)
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005222:	4b63      	ldr	r3, [pc, #396]	; (80053b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0b8      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d020      	beq.n	8005282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800524c:	4b59      	ldr	r3, [pc, #356]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4a58      	ldr	r2, [pc, #352]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005264:	4b53      	ldr	r3, [pc, #332]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	4a52      	ldr	r2, [pc, #328]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800526e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005270:	4b50      	ldr	r3, [pc, #320]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	494d      	ldr	r1, [pc, #308]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	4313      	orrs	r3, r2
 8005280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d044      	beq.n	8005318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d107      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005296:	4b47      	ldr	r3, [pc, #284]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d119      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e07f      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d003      	beq.n	80052b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d107      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b6:	4b3f      	ldr	r3, [pc, #252]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e06f      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c6:	4b3b      	ldr	r3, [pc, #236]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e067      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052d6:	4b37      	ldr	r3, [pc, #220]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f023 0203 	bic.w	r2, r3, #3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	4934      	ldr	r1, [pc, #208]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052e8:	f7fe fc0c 	bl	8003b04 <HAL_GetTick>
 80052ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ee:	e00a      	b.n	8005306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f0:	f7fe fc08 	bl	8003b04 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e04f      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005306:	4b2b      	ldr	r3, [pc, #172]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 020c 	and.w	r2, r3, #12
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	429a      	cmp	r2, r3
 8005316:	d1eb      	bne.n	80052f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005318:	4b25      	ldr	r3, [pc, #148]	; (80053b0 <HAL_RCC_ClockConfig+0x1b8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d20c      	bcs.n	8005340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005326:	4b22      	ldr	r3, [pc, #136]	; (80053b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532e:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e032      	b.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800534c:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4916      	ldr	r1, [pc, #88]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	4313      	orrs	r3, r2
 800535c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800536a:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	490e      	ldr	r1, [pc, #56]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800537e:	f000 f855 	bl	800542c <HAL_RCC_GetSysClockFreq>
 8005382:	4602      	mov	r2, r0
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	091b      	lsrs	r3, r3, #4
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	490a      	ldr	r1, [pc, #40]	; (80053b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005390:	5ccb      	ldrb	r3, [r1, r3]
 8005392:	fa22 f303 	lsr.w	r3, r2, r3
 8005396:	4a09      	ldr	r2, [pc, #36]	; (80053bc <HAL_RCC_ClockConfig+0x1c4>)
 8005398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800539a:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <HAL_RCC_ClockConfig+0x1c8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe fb6c 	bl	8003a7c <HAL_InitTick>

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40023c00 	.word	0x40023c00
 80053b4:	40023800 	.word	0x40023800
 80053b8:	080078cc 	.word	0x080078cc
 80053bc:	20000020 	.word	0x20000020
 80053c0:	20000024 	.word	0x20000024

080053c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c8:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ca:	681b      	ldr	r3, [r3, #0]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000020 	.word	0x20000020

080053dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053e0:	f7ff fff0 	bl	80053c4 <HAL_RCC_GetHCLKFreq>
 80053e4:	4602      	mov	r2, r0
 80053e6:	4b05      	ldr	r3, [pc, #20]	; (80053fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	0a9b      	lsrs	r3, r3, #10
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	4903      	ldr	r1, [pc, #12]	; (8005400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053f2:	5ccb      	ldrb	r3, [r1, r3]
 80053f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	40023800 	.word	0x40023800
 8005400:	080078dc 	.word	0x080078dc

08005404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005408:	f7ff ffdc 	bl	80053c4 <HAL_RCC_GetHCLKFreq>
 800540c:	4602      	mov	r2, r0
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	0b5b      	lsrs	r3, r3, #13
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	4903      	ldr	r1, [pc, #12]	; (8005428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800541a:	5ccb      	ldrb	r3, [r1, r3]
 800541c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005420:	4618      	mov	r0, r3
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40023800 	.word	0x40023800
 8005428:	080078dc 	.word	0x080078dc

0800542c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800542c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005430:	b0ae      	sub	sp, #184	; 0xb8
 8005432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005452:	4bcb      	ldr	r3, [pc, #812]	; (8005780 <HAL_RCC_GetSysClockFreq+0x354>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 030c 	and.w	r3, r3, #12
 800545a:	2b0c      	cmp	r3, #12
 800545c:	f200 8206 	bhi.w	800586c <HAL_RCC_GetSysClockFreq+0x440>
 8005460:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	0800549d 	.word	0x0800549d
 800546c:	0800586d 	.word	0x0800586d
 8005470:	0800586d 	.word	0x0800586d
 8005474:	0800586d 	.word	0x0800586d
 8005478:	080054a5 	.word	0x080054a5
 800547c:	0800586d 	.word	0x0800586d
 8005480:	0800586d 	.word	0x0800586d
 8005484:	0800586d 	.word	0x0800586d
 8005488:	080054ad 	.word	0x080054ad
 800548c:	0800586d 	.word	0x0800586d
 8005490:	0800586d 	.word	0x0800586d
 8005494:	0800586d 	.word	0x0800586d
 8005498:	0800569d 	.word	0x0800569d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800549c:	4bb9      	ldr	r3, [pc, #740]	; (8005784 <HAL_RCC_GetSysClockFreq+0x358>)
 800549e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80054a2:	e1e7      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054a4:	4bb8      	ldr	r3, [pc, #736]	; (8005788 <HAL_RCC_GetSysClockFreq+0x35c>)
 80054a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80054aa:	e1e3      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054ac:	4bb4      	ldr	r3, [pc, #720]	; (8005780 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054b8:	4bb1      	ldr	r3, [pc, #708]	; (8005780 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d071      	beq.n	80055a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054c4:	4bae      	ldr	r3, [pc, #696]	; (8005780 <HAL_RCC_GetSysClockFreq+0x354>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	099b      	lsrs	r3, r3, #6
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054d0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80054d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054e0:	2300      	movs	r3, #0
 80054e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054ea:	4622      	mov	r2, r4
 80054ec:	462b      	mov	r3, r5
 80054ee:	f04f 0000 	mov.w	r0, #0
 80054f2:	f04f 0100 	mov.w	r1, #0
 80054f6:	0159      	lsls	r1, r3, #5
 80054f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054fc:	0150      	lsls	r0, r2, #5
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	4621      	mov	r1, r4
 8005504:	1a51      	subs	r1, r2, r1
 8005506:	6439      	str	r1, [r7, #64]	; 0x40
 8005508:	4629      	mov	r1, r5
 800550a:	eb63 0301 	sbc.w	r3, r3, r1
 800550e:	647b      	str	r3, [r7, #68]	; 0x44
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800551c:	4649      	mov	r1, r9
 800551e:	018b      	lsls	r3, r1, #6
 8005520:	4641      	mov	r1, r8
 8005522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005526:	4641      	mov	r1, r8
 8005528:	018a      	lsls	r2, r1, #6
 800552a:	4641      	mov	r1, r8
 800552c:	1a51      	subs	r1, r2, r1
 800552e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005530:	4649      	mov	r1, r9
 8005532:	eb63 0301 	sbc.w	r3, r3, r1
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005544:	4649      	mov	r1, r9
 8005546:	00cb      	lsls	r3, r1, #3
 8005548:	4641      	mov	r1, r8
 800554a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800554e:	4641      	mov	r1, r8
 8005550:	00ca      	lsls	r2, r1, #3
 8005552:	4610      	mov	r0, r2
 8005554:	4619      	mov	r1, r3
 8005556:	4603      	mov	r3, r0
 8005558:	4622      	mov	r2, r4
 800555a:	189b      	adds	r3, r3, r2
 800555c:	633b      	str	r3, [r7, #48]	; 0x30
 800555e:	462b      	mov	r3, r5
 8005560:	460a      	mov	r2, r1
 8005562:	eb42 0303 	adc.w	r3, r2, r3
 8005566:	637b      	str	r3, [r7, #52]	; 0x34
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005574:	4629      	mov	r1, r5
 8005576:	024b      	lsls	r3, r1, #9
 8005578:	4621      	mov	r1, r4
 800557a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800557e:	4621      	mov	r1, r4
 8005580:	024a      	lsls	r2, r1, #9
 8005582:	4610      	mov	r0, r2
 8005584:	4619      	mov	r1, r3
 8005586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005590:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005594:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005598:	f7fb f972 	bl	8000880 <__aeabi_uldivmod>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4613      	mov	r3, r2
 80055a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055a6:	e067      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a8:	4b75      	ldr	r3, [pc, #468]	; (8005780 <HAL_RCC_GetSysClockFreq+0x354>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	099b      	lsrs	r3, r3, #6
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055b4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80055b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80055c2:	2300      	movs	r3, #0
 80055c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80055ca:	4622      	mov	r2, r4
 80055cc:	462b      	mov	r3, r5
 80055ce:	f04f 0000 	mov.w	r0, #0
 80055d2:	f04f 0100 	mov.w	r1, #0
 80055d6:	0159      	lsls	r1, r3, #5
 80055d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055dc:	0150      	lsls	r0, r2, #5
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4621      	mov	r1, r4
 80055e4:	1a51      	subs	r1, r2, r1
 80055e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80055e8:	4629      	mov	r1, r5
 80055ea:	eb63 0301 	sbc.w	r3, r3, r1
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80055fc:	4649      	mov	r1, r9
 80055fe:	018b      	lsls	r3, r1, #6
 8005600:	4641      	mov	r1, r8
 8005602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005606:	4641      	mov	r1, r8
 8005608:	018a      	lsls	r2, r1, #6
 800560a:	4641      	mov	r1, r8
 800560c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005610:	4649      	mov	r1, r9
 8005612:	eb63 0b01 	sbc.w	fp, r3, r1
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005622:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005626:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800562a:	4692      	mov	sl, r2
 800562c:	469b      	mov	fp, r3
 800562e:	4623      	mov	r3, r4
 8005630:	eb1a 0303 	adds.w	r3, sl, r3
 8005634:	623b      	str	r3, [r7, #32]
 8005636:	462b      	mov	r3, r5
 8005638:	eb4b 0303 	adc.w	r3, fp, r3
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800564a:	4629      	mov	r1, r5
 800564c:	028b      	lsls	r3, r1, #10
 800564e:	4621      	mov	r1, r4
 8005650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005654:	4621      	mov	r1, r4
 8005656:	028a      	lsls	r2, r1, #10
 8005658:	4610      	mov	r0, r2
 800565a:	4619      	mov	r1, r3
 800565c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005660:	2200      	movs	r2, #0
 8005662:	673b      	str	r3, [r7, #112]	; 0x70
 8005664:	677a      	str	r2, [r7, #116]	; 0x74
 8005666:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800566a:	f7fb f909 	bl	8000880 <__aeabi_uldivmod>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4613      	mov	r3, r2
 8005674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005678:	4b41      	ldr	r3, [pc, #260]	; (8005780 <HAL_RCC_GetSysClockFreq+0x354>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	3301      	adds	r3, #1
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800568a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800568e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005692:	fbb2 f3f3 	udiv	r3, r2, r3
 8005696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800569a:	e0eb      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800569c:	4b38      	ldr	r3, [pc, #224]	; (8005780 <HAL_RCC_GetSysClockFreq+0x354>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056a8:	4b35      	ldr	r3, [pc, #212]	; (8005780 <HAL_RCC_GetSysClockFreq+0x354>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d06b      	beq.n	800578c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056b4:	4b32      	ldr	r3, [pc, #200]	; (8005780 <HAL_RCC_GetSysClockFreq+0x354>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	099b      	lsrs	r3, r3, #6
 80056ba:	2200      	movs	r2, #0
 80056bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80056be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	663b      	str	r3, [r7, #96]	; 0x60
 80056c8:	2300      	movs	r3, #0
 80056ca:	667b      	str	r3, [r7, #100]	; 0x64
 80056cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80056d0:	4622      	mov	r2, r4
 80056d2:	462b      	mov	r3, r5
 80056d4:	f04f 0000 	mov.w	r0, #0
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	0159      	lsls	r1, r3, #5
 80056de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056e2:	0150      	lsls	r0, r2, #5
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4621      	mov	r1, r4
 80056ea:	1a51      	subs	r1, r2, r1
 80056ec:	61b9      	str	r1, [r7, #24]
 80056ee:	4629      	mov	r1, r5
 80056f0:	eb63 0301 	sbc.w	r3, r3, r1
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005702:	4659      	mov	r1, fp
 8005704:	018b      	lsls	r3, r1, #6
 8005706:	4651      	mov	r1, sl
 8005708:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800570c:	4651      	mov	r1, sl
 800570e:	018a      	lsls	r2, r1, #6
 8005710:	4651      	mov	r1, sl
 8005712:	ebb2 0801 	subs.w	r8, r2, r1
 8005716:	4659      	mov	r1, fp
 8005718:	eb63 0901 	sbc.w	r9, r3, r1
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005728:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800572c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005730:	4690      	mov	r8, r2
 8005732:	4699      	mov	r9, r3
 8005734:	4623      	mov	r3, r4
 8005736:	eb18 0303 	adds.w	r3, r8, r3
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	462b      	mov	r3, r5
 800573e:	eb49 0303 	adc.w	r3, r9, r3
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005750:	4629      	mov	r1, r5
 8005752:	024b      	lsls	r3, r1, #9
 8005754:	4621      	mov	r1, r4
 8005756:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800575a:	4621      	mov	r1, r4
 800575c:	024a      	lsls	r2, r1, #9
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005766:	2200      	movs	r2, #0
 8005768:	65bb      	str	r3, [r7, #88]	; 0x58
 800576a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800576c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005770:	f7fb f886 	bl	8000880 <__aeabi_uldivmod>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4613      	mov	r3, r2
 800577a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800577e:	e065      	b.n	800584c <HAL_RCC_GetSysClockFreq+0x420>
 8005780:	40023800 	.word	0x40023800
 8005784:	00f42400 	.word	0x00f42400
 8005788:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800578c:	4b3d      	ldr	r3, [pc, #244]	; (8005884 <HAL_RCC_GetSysClockFreq+0x458>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	099b      	lsrs	r3, r3, #6
 8005792:	2200      	movs	r2, #0
 8005794:	4618      	mov	r0, r3
 8005796:	4611      	mov	r1, r2
 8005798:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800579c:	653b      	str	r3, [r7, #80]	; 0x50
 800579e:	2300      	movs	r3, #0
 80057a0:	657b      	str	r3, [r7, #84]	; 0x54
 80057a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80057a6:	4642      	mov	r2, r8
 80057a8:	464b      	mov	r3, r9
 80057aa:	f04f 0000 	mov.w	r0, #0
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	0159      	lsls	r1, r3, #5
 80057b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057b8:	0150      	lsls	r0, r2, #5
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4641      	mov	r1, r8
 80057c0:	1a51      	subs	r1, r2, r1
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	4649      	mov	r1, r9
 80057c6:	eb63 0301 	sbc.w	r3, r3, r1
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80057d8:	4659      	mov	r1, fp
 80057da:	018b      	lsls	r3, r1, #6
 80057dc:	4651      	mov	r1, sl
 80057de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057e2:	4651      	mov	r1, sl
 80057e4:	018a      	lsls	r2, r1, #6
 80057e6:	4651      	mov	r1, sl
 80057e8:	1a54      	subs	r4, r2, r1
 80057ea:	4659      	mov	r1, fp
 80057ec:	eb63 0501 	sbc.w	r5, r3, r1
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	00eb      	lsls	r3, r5, #3
 80057fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057fe:	00e2      	lsls	r2, r4, #3
 8005800:	4614      	mov	r4, r2
 8005802:	461d      	mov	r5, r3
 8005804:	4643      	mov	r3, r8
 8005806:	18e3      	adds	r3, r4, r3
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	464b      	mov	r3, r9
 800580c:	eb45 0303 	adc.w	r3, r5, r3
 8005810:	607b      	str	r3, [r7, #4]
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800581e:	4629      	mov	r1, r5
 8005820:	028b      	lsls	r3, r1, #10
 8005822:	4621      	mov	r1, r4
 8005824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005828:	4621      	mov	r1, r4
 800582a:	028a      	lsls	r2, r1, #10
 800582c:	4610      	mov	r0, r2
 800582e:	4619      	mov	r1, r3
 8005830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005834:	2200      	movs	r2, #0
 8005836:	64bb      	str	r3, [r7, #72]	; 0x48
 8005838:	64fa      	str	r2, [r7, #76]	; 0x4c
 800583a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800583e:	f7fb f81f 	bl	8000880 <__aeabi_uldivmod>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4613      	mov	r3, r2
 8005848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800584c:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <HAL_RCC_GetSysClockFreq+0x458>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	0f1b      	lsrs	r3, r3, #28
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800585a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800585e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005862:	fbb2 f3f3 	udiv	r3, r2, r3
 8005866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800586a:	e003      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800586c:	4b06      	ldr	r3, [pc, #24]	; (8005888 <HAL_RCC_GetSysClockFreq+0x45c>)
 800586e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005872:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005874:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005878:	4618      	mov	r0, r3
 800587a:	37b8      	adds	r7, #184	; 0xb8
 800587c:	46bd      	mov	sp, r7
 800587e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005882:	bf00      	nop
 8005884:	40023800 	.word	0x40023800
 8005888:	00f42400 	.word	0x00f42400

0800588c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e28d      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 8083 	beq.w	80059b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80058ac:	4b94      	ldr	r3, [pc, #592]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 030c 	and.w	r3, r3, #12
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d019      	beq.n	80058ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80058b8:	4b91      	ldr	r3, [pc, #580]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d106      	bne.n	80058d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80058c4:	4b8e      	ldr	r3, [pc, #568]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058d0:	d00c      	beq.n	80058ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058d2:	4b8b      	ldr	r3, [pc, #556]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d112      	bne.n	8005904 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058de:	4b88      	ldr	r3, [pc, #544]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ea:	d10b      	bne.n	8005904 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058ec:	4b84      	ldr	r3, [pc, #528]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d05b      	beq.n	80059b0 <HAL_RCC_OscConfig+0x124>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d157      	bne.n	80059b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e25a      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590c:	d106      	bne.n	800591c <HAL_RCC_OscConfig+0x90>
 800590e:	4b7c      	ldr	r3, [pc, #496]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a7b      	ldr	r2, [pc, #492]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	e01d      	b.n	8005958 <HAL_RCC_OscConfig+0xcc>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005924:	d10c      	bne.n	8005940 <HAL_RCC_OscConfig+0xb4>
 8005926:	4b76      	ldr	r3, [pc, #472]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a75      	ldr	r2, [pc, #468]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 800592c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	4b73      	ldr	r3, [pc, #460]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a72      	ldr	r2, [pc, #456]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	e00b      	b.n	8005958 <HAL_RCC_OscConfig+0xcc>
 8005940:	4b6f      	ldr	r3, [pc, #444]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a6e      	ldr	r2, [pc, #440]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	4b6c      	ldr	r3, [pc, #432]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a6b      	ldr	r2, [pc, #428]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d013      	beq.n	8005988 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005960:	f7fe f8d0 	bl	8003b04 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005968:	f7fe f8cc 	bl	8003b04 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b64      	cmp	r3, #100	; 0x64
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e21f      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597a:	4b61      	ldr	r3, [pc, #388]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f0      	beq.n	8005968 <HAL_RCC_OscConfig+0xdc>
 8005986:	e014      	b.n	80059b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fe f8bc 	bl	8003b04 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005990:	f7fe f8b8 	bl	8003b04 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b64      	cmp	r3, #100	; 0x64
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e20b      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a2:	4b57      	ldr	r3, [pc, #348]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f0      	bne.n	8005990 <HAL_RCC_OscConfig+0x104>
 80059ae:	e000      	b.n	80059b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d06f      	beq.n	8005a9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059be:	4b50      	ldr	r3, [pc, #320]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d017      	beq.n	80059fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80059ca:	4b4d      	ldr	r3, [pc, #308]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d105      	bne.n	80059e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80059d6:	4b4a      	ldr	r3, [pc, #296]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059e2:	4b47      	ldr	r3, [pc, #284]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80059ea:	2b0c      	cmp	r3, #12
 80059ec:	d11c      	bne.n	8005a28 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ee:	4b44      	ldr	r3, [pc, #272]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d116      	bne.n	8005a28 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059fa:	4b41      	ldr	r3, [pc, #260]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_RCC_OscConfig+0x186>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d001      	beq.n	8005a12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e1d3      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a12:	4b3b      	ldr	r3, [pc, #236]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	4937      	ldr	r1, [pc, #220]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a26:	e03a      	b.n	8005a9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d020      	beq.n	8005a72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a30:	4b34      	ldr	r3, [pc, #208]	; (8005b04 <HAL_RCC_OscConfig+0x278>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fe f865 	bl	8003b04 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a3e:	f7fe f861 	bl	8003b04 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e1b4      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a50:	4b2b      	ldr	r3, [pc, #172]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0f0      	beq.n	8005a3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5c:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4925      	ldr	r1, [pc, #148]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	600b      	str	r3, [r1, #0]
 8005a70:	e015      	b.n	8005a9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a72:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <HAL_RCC_OscConfig+0x278>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fe f844 	bl	8003b04 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a80:	f7fe f840 	bl	8003b04 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e193      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a92:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d036      	beq.n	8005b18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d016      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ab2:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <HAL_RCC_OscConfig+0x27c>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab8:	f7fe f824 	bl	8003b04 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ac0:	f7fe f820 	bl	8003b04 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e173      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ad2:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f0      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x234>
 8005ade:	e01b      	b.n	8005b18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae0:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <HAL_RCC_OscConfig+0x27c>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae6:	f7fe f80d 	bl	8003b04 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aec:	e00e      	b.n	8005b0c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aee:	f7fe f809 	bl	8003b04 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d907      	bls.n	8005b0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e15c      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
 8005b00:	40023800 	.word	0x40023800
 8005b04:	42470000 	.word	0x42470000
 8005b08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b0c:	4b8a      	ldr	r3, [pc, #552]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1ea      	bne.n	8005aee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8097 	beq.w	8005c54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b26:	2300      	movs	r3, #0
 8005b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b2a:	4b83      	ldr	r3, [pc, #524]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10f      	bne.n	8005b56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b36:	2300      	movs	r3, #0
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	4b7f      	ldr	r3, [pc, #508]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	4a7e      	ldr	r2, [pc, #504]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b44:	6413      	str	r3, [r2, #64]	; 0x40
 8005b46:	4b7c      	ldr	r3, [pc, #496]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	60bb      	str	r3, [r7, #8]
 8005b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b56:	4b79      	ldr	r3, [pc, #484]	; (8005d3c <HAL_RCC_OscConfig+0x4b0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d118      	bne.n	8005b94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b62:	4b76      	ldr	r3, [pc, #472]	; (8005d3c <HAL_RCC_OscConfig+0x4b0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a75      	ldr	r2, [pc, #468]	; (8005d3c <HAL_RCC_OscConfig+0x4b0>)
 8005b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b6e:	f7fd ffc9 	bl	8003b04 <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b76:	f7fd ffc5 	bl	8003b04 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e118      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b88:	4b6c      	ldr	r3, [pc, #432]	; (8005d3c <HAL_RCC_OscConfig+0x4b0>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0f0      	beq.n	8005b76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d106      	bne.n	8005baa <HAL_RCC_OscConfig+0x31e>
 8005b9c:	4b66      	ldr	r3, [pc, #408]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba0:	4a65      	ldr	r2, [pc, #404]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba8:	e01c      	b.n	8005be4 <HAL_RCC_OscConfig+0x358>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d10c      	bne.n	8005bcc <HAL_RCC_OscConfig+0x340>
 8005bb2:	4b61      	ldr	r3, [pc, #388]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb6:	4a60      	ldr	r2, [pc, #384]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005bb8:	f043 0304 	orr.w	r3, r3, #4
 8005bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bbe:	4b5e      	ldr	r3, [pc, #376]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	4a5d      	ldr	r2, [pc, #372]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bca:	e00b      	b.n	8005be4 <HAL_RCC_OscConfig+0x358>
 8005bcc:	4b5a      	ldr	r3, [pc, #360]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd0:	4a59      	ldr	r2, [pc, #356]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd8:	4b57      	ldr	r3, [pc, #348]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	4a56      	ldr	r2, [pc, #344]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005bde:	f023 0304 	bic.w	r3, r3, #4
 8005be2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d015      	beq.n	8005c18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bec:	f7fd ff8a 	bl	8003b04 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf2:	e00a      	b.n	8005c0a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bf4:	f7fd ff86 	bl	8003b04 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e0d7      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c0a:	4b4b      	ldr	r3, [pc, #300]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0ee      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x368>
 8005c16:	e014      	b.n	8005c42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fd ff74 	bl	8003b04 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c20:	f7fd ff70 	bl	8003b04 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e0c1      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c36:	4b40      	ldr	r3, [pc, #256]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1ee      	bne.n	8005c20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d105      	bne.n	8005c54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c48:	4b3b      	ldr	r3, [pc, #236]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	4a3a      	ldr	r2, [pc, #232]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 80ad 	beq.w	8005db8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c5e:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d060      	beq.n	8005d2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d145      	bne.n	8005cfe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c72:	4b33      	ldr	r3, [pc, #204]	; (8005d40 <HAL_RCC_OscConfig+0x4b4>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c78:	f7fd ff44 	bl	8003b04 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c80:	f7fd ff40 	bl	8003b04 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e093      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c92:	4b29      	ldr	r3, [pc, #164]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69da      	ldr	r2, [r3, #28]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	019b      	lsls	r3, r3, #6
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	041b      	lsls	r3, r3, #16
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	061b      	lsls	r3, r3, #24
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	071b      	lsls	r3, r3, #28
 8005cca:	491b      	ldr	r1, [pc, #108]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cd0:	4b1b      	ldr	r3, [pc, #108]	; (8005d40 <HAL_RCC_OscConfig+0x4b4>)
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd6:	f7fd ff15 	bl	8003b04 <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cde:	f7fd ff11 	bl	8003b04 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e064      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cf0:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0f0      	beq.n	8005cde <HAL_RCC_OscConfig+0x452>
 8005cfc:	e05c      	b.n	8005db8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <HAL_RCC_OscConfig+0x4b4>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d04:	f7fd fefe 	bl	8003b04 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d0c:	f7fd fefa 	bl	8003b04 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e04d      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1e:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <HAL_RCC_OscConfig+0x4ac>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCC_OscConfig+0x480>
 8005d2a:	e045      	b.n	8005db8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d107      	bne.n	8005d44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e040      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d44:	4b1f      	ldr	r3, [pc, #124]	; (8005dc4 <HAL_RCC_OscConfig+0x538>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d030      	beq.n	8005db4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d129      	bne.n	8005db4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d122      	bne.n	8005db4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d74:	4013      	ands	r3, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d119      	bne.n	8005db4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d10f      	bne.n	8005db4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d107      	bne.n	8005db4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d001      	beq.n	8005db8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40023800 	.word	0x40023800

08005dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e03f      	b.n	8005e5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fd fc76 	bl	80036e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2224      	movs	r2, #36	; 0x24
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 ff43 	bl	8006c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695a      	ldr	r2, [r3, #20]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	; 0x30
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d165      	bne.n	8005f4a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <HAL_UART_Transmit_DMA+0x26>
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e05e      	b.n	8005f4c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_UART_Transmit_DMA+0x38>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e057      	b.n	8005f4c <HAL_UART_Transmit_DMA+0xe8>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	88fa      	ldrh	r2, [r7, #6]
 8005eae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2221      	movs	r2, #33	; 0x21
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec8:	4a22      	ldr	r2, [pc, #136]	; (8005f54 <HAL_UART_Transmit_DMA+0xf0>)
 8005eca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	4a21      	ldr	r2, [pc, #132]	; (8005f58 <HAL_UART_Transmit_DMA+0xf4>)
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed8:	4a20      	ldr	r2, [pc, #128]	; (8005f5c <HAL_UART_Transmit_DMA+0xf8>)
 8005eda:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005ee4:	f107 0308 	add.w	r3, r7, #8
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef0:	6819      	ldr	r1, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	461a      	mov	r2, r3
 8005efa:	88fb      	ldrh	r3, [r7, #6]
 8005efc:	f7fe fc14 	bl	8004728 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f08:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3314      	adds	r3, #20
 8005f18:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	617b      	str	r3, [r7, #20]
   return(result);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3314      	adds	r3, #20
 8005f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f32:	627a      	str	r2, [r7, #36]	; 0x24
 8005f34:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	6a39      	ldr	r1, [r7, #32]
 8005f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e5      	bne.n	8005f12 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	e000      	b.n	8005f4c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005f4a:	2302      	movs	r3, #2
  }
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3730      	adds	r7, #48	; 0x30
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	08006531 	.word	0x08006531
 8005f58:	080065cb 	.word	0x080065cb
 8005f5c:	08006743 	.word	0x08006743

08005f60 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d11d      	bne.n	8005fb6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <HAL_UART_Receive_DMA+0x26>
 8005f80:	88fb      	ldrh	r3, [r7, #6]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e016      	b.n	8005fb8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_UART_Receive_DMA+0x38>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e00f      	b.n	8005fb8 <HAL_UART_Receive_DMA+0x58>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 fc13 	bl	80067d8 <UART_Start_Receive_DMA>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	e000      	b.n	8005fb8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
  }
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b0ba      	sub	sp, #232	; 0xe8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10f      	bne.n	8006026 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <HAL_UART_IRQHandler+0x66>
 8006012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fd7f 	bl	8006b22 <UART_Receive_IT>
      return;
 8006024:	e256      	b.n	80064d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 80de 	beq.w	80061ec <HAL_UART_IRQHandler+0x22c>
 8006030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800603c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006040:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80d1 	beq.w	80061ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800604a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00b      	beq.n	800606e <HAL_UART_IRQHandler+0xae>
 8006056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800605a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605e:	2b00      	cmp	r3, #0
 8006060:	d005      	beq.n	800606e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f043 0201 	orr.w	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00b      	beq.n	8006092 <HAL_UART_IRQHandler+0xd2>
 800607a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f043 0202 	orr.w	r2, r3, #2
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00b      	beq.n	80060b6 <HAL_UART_IRQHandler+0xf6>
 800609e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d005      	beq.n	80060b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f043 0204 	orr.w	r2, r3, #4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d011      	beq.n	80060e6 <HAL_UART_IRQHandler+0x126>
 80060c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c6:	f003 0320 	and.w	r3, r3, #32
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d105      	bne.n	80060da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f043 0208 	orr.w	r2, r3, #8
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 81ed 	beq.w	80064ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f4:	f003 0320 	and.w	r3, r3, #32
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d008      	beq.n	800610e <HAL_UART_IRQHandler+0x14e>
 80060fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fd0a 	bl	8006b22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	bf0c      	ite	eq
 800611c:	2301      	moveq	r3, #1
 800611e:	2300      	movne	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f003 0308 	and.w	r3, r3, #8
 800612e:	2b00      	cmp	r3, #0
 8006130:	d103      	bne.n	800613a <HAL_UART_IRQHandler+0x17a>
 8006132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006136:	2b00      	cmp	r3, #0
 8006138:	d04f      	beq.n	80061da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fc12 	bl	8006964 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d141      	bne.n	80061d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3314      	adds	r3, #20
 8006154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006164:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800616c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3314      	adds	r3, #20
 8006176:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800617a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800617e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006186:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1d9      	bne.n	800614e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d013      	beq.n	80061ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a6:	4a7d      	ldr	r2, [pc, #500]	; (800639c <HAL_UART_IRQHandler+0x3dc>)
 80061a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fb82 	bl	80048b8 <HAL_DMA_Abort_IT>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d016      	beq.n	80061e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061c4:	4610      	mov	r0, r2
 80061c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c8:	e00e      	b.n	80061e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f99a 	bl	8006504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d0:	e00a      	b.n	80061e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f996 	bl	8006504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	e006      	b.n	80061e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f992 	bl	8006504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80061e6:	e170      	b.n	80064ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e8:	bf00      	nop
    return;
 80061ea:	e16e      	b.n	80064ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	f040 814a 	bne.w	800648a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 8143 	beq.w	800648a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 813c 	beq.w	800648a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006212:	2300      	movs	r3, #0
 8006214:	60bb      	str	r3, [r7, #8]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006232:	2b40      	cmp	r3, #64	; 0x40
 8006234:	f040 80b4 	bne.w	80063a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006244:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8140 	beq.w	80064ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006256:	429a      	cmp	r2, r3
 8006258:	f080 8139 	bcs.w	80064ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006262:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800626e:	f000 8088 	beq.w	8006382 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006288:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800628c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800629e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1d9      	bne.n	8006272 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3314      	adds	r3, #20
 80062c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3314      	adds	r3, #20
 80062de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e1      	bne.n	80062be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3314      	adds	r3, #20
 8006300:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800630a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800630c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006310:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3314      	adds	r3, #20
 800631a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800631e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006320:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006324:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800632c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1e3      	bne.n	80062fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	330c      	adds	r3, #12
 8006346:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006352:	f023 0310 	bic.w	r3, r3, #16
 8006356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	330c      	adds	r3, #12
 8006360:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006364:	65ba      	str	r2, [r7, #88]	; 0x58
 8006366:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800636a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e3      	bne.n	8006340 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fa2b 	bl	80047d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800638a:	b29b      	uxth	r3, r3
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	b29b      	uxth	r3, r3
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f8c0 	bl	8006518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006398:	e099      	b.n	80064ce <HAL_UART_IRQHandler+0x50e>
 800639a:	bf00      	nop
 800639c:	08006a2b 	.word	0x08006a2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 808b 	beq.w	80064d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80063bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8086 	beq.w	80064d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	330c      	adds	r3, #12
 80063cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063ea:	647a      	str	r2, [r7, #68]	; 0x44
 80063ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e3      	bne.n	80063c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3314      	adds	r3, #20
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	623b      	str	r3, [r7, #32]
   return(result);
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3314      	adds	r3, #20
 800641e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006422:	633a      	str	r2, [r7, #48]	; 0x30
 8006424:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e3      	bne.n	80063fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2220      	movs	r2, #32
 800643a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	60fb      	str	r3, [r7, #12]
   return(result);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0310 	bic.w	r3, r3, #16
 800645a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	330c      	adds	r3, #12
 8006464:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006468:	61fa      	str	r2, [r7, #28]
 800646a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646c:	69b9      	ldr	r1, [r7, #24]
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	e841 2300 	strex	r3, r2, [r1]
 8006474:	617b      	str	r3, [r7, #20]
   return(result);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1e3      	bne.n	8006444 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800647c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f848 	bl	8006518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006488:	e023      	b.n	80064d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006492:	2b00      	cmp	r3, #0
 8006494:	d009      	beq.n	80064aa <HAL_UART_IRQHandler+0x4ea>
 8006496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800649a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fad5 	bl	8006a52 <UART_Transmit_IT>
    return;
 80064a8:	e014      	b.n	80064d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00e      	beq.n	80064d4 <HAL_UART_IRQHandler+0x514>
 80064b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fb15 	bl	8006af2 <UART_EndTransmit_IT>
    return;
 80064c8:	e004      	b.n	80064d4 <HAL_UART_IRQHandler+0x514>
    return;
 80064ca:	bf00      	nop
 80064cc:	e002      	b.n	80064d4 <HAL_UART_IRQHandler+0x514>
      return;
 80064ce:	bf00      	nop
 80064d0:	e000      	b.n	80064d4 <HAL_UART_IRQHandler+0x514>
      return;
 80064d2:	bf00      	nop
  }
}
 80064d4:	37e8      	adds	r7, #232	; 0xe8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop

080064dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b090      	sub	sp, #64	; 0x40
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d137      	bne.n	80065bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800654c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654e:	2200      	movs	r2, #0
 8006550:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3314      	adds	r3, #20
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	623b      	str	r3, [r7, #32]
   return(result);
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006568:	63bb      	str	r3, [r7, #56]	; 0x38
 800656a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3314      	adds	r3, #20
 8006570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006572:	633a      	str	r2, [r7, #48]	; 0x30
 8006574:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e5      	bne.n	8006552 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	330c      	adds	r3, #12
 800658c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	60fb      	str	r3, [r7, #12]
   return(result);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800659c:	637b      	str	r3, [r7, #52]	; 0x34
 800659e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065a6:	61fa      	str	r2, [r7, #28]
 80065a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	69b9      	ldr	r1, [r7, #24]
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	617b      	str	r3, [r7, #20]
   return(result);
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e5      	bne.n	8006586 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065ba:	e002      	b.n	80065c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80065bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80065be:	f7fa fc45 	bl	8000e4c <HAL_UART_TxCpltCallback>
}
 80065c2:	bf00      	nop
 80065c4:	3740      	adds	r7, #64	; 0x40
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f7ff ff7f 	bl	80064dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065de:	bf00      	nop
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b09c      	sub	sp, #112	; 0x70
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d172      	bne.n	80066e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006604:	2200      	movs	r2, #0
 8006606:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	330c      	adds	r3, #12
 800660e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800661e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	330c      	adds	r3, #12
 8006626:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006628:	65ba      	str	r2, [r7, #88]	; 0x58
 800662a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800662e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e5      	bne.n	8006608 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3314      	adds	r3, #20
 8006642:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800664c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664e:	f023 0301 	bic.w	r3, r3, #1
 8006652:	667b      	str	r3, [r7, #100]	; 0x64
 8006654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3314      	adds	r3, #20
 800665a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800665c:	647a      	str	r2, [r7, #68]	; 0x44
 800665e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800666a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e5      	bne.n	800663c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3314      	adds	r3, #20
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	623b      	str	r3, [r7, #32]
   return(result);
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006686:	663b      	str	r3, [r7, #96]	; 0x60
 8006688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3314      	adds	r3, #20
 800668e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006690:	633a      	str	r2, [r7, #48]	; 0x30
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e5      	bne.n	8006670 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d119      	bne.n	80066e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0310 	bic.w	r3, r3, #16
 80066ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066d4:	61fa      	str	r2, [r7, #28]
 80066d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	69b9      	ldr	r1, [r7, #24]
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	617b      	str	r3, [r7, #20]
   return(result);
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e5      	bne.n	80066b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d106      	bne.n	80066fe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066f4:	4619      	mov	r1, r3
 80066f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066f8:	f7ff ff0e 	bl	8006518 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066fc:	e002      	b.n	8006704 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80066fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006700:	f7fa fbc0 	bl	8000e84 <HAL_UART_RxCpltCallback>
}
 8006704:	bf00      	nop
 8006706:	3770      	adds	r7, #112	; 0x70
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	2b01      	cmp	r3, #1
 8006720:	d108      	bne.n	8006734 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	b29b      	uxth	r3, r3
 800672a:	4619      	mov	r1, r3
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f7ff fef3 	bl	8006518 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006732:	e002      	b.n	800673a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff fedb 	bl	80064f0 <HAL_UART_RxHalfCpltCallback>
}
 800673a:	bf00      	nop
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800674a:	2300      	movs	r3, #0
 800674c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675e:	2b80      	cmp	r3, #128	; 0x80
 8006760:	bf0c      	ite	eq
 8006762:	2301      	moveq	r3, #1
 8006764:	2300      	movne	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b21      	cmp	r3, #33	; 0x21
 8006774:	d108      	bne.n	8006788 <UART_DMAError+0x46>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d005      	beq.n	8006788 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2200      	movs	r2, #0
 8006780:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006782:	68b8      	ldr	r0, [r7, #8]
 8006784:	f000 f8c6 	bl	8006914 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	bf0c      	ite	eq
 8006796:	2301      	moveq	r3, #1
 8006798:	2300      	movne	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b22      	cmp	r3, #34	; 0x22
 80067a8:	d108      	bne.n	80067bc <UART_DMAError+0x7a>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80067b6:	68b8      	ldr	r0, [r7, #8]
 80067b8:	f000 f8d4 	bl	8006964 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	f043 0210 	orr.w	r2, r3, #16
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067c8:	68b8      	ldr	r0, [r7, #8]
 80067ca:	f7ff fe9b 	bl	8006504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b098      	sub	sp, #96	; 0x60
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2222      	movs	r2, #34	; 0x22
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	4a40      	ldr	r2, [pc, #256]	; (8006908 <UART_Start_Receive_DMA+0x130>)
 8006806:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	4a3f      	ldr	r2, [pc, #252]	; (800690c <UART_Start_Receive_DMA+0x134>)
 800680e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	4a3e      	ldr	r2, [pc, #248]	; (8006910 <UART_Start_Receive_DMA+0x138>)
 8006816:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681c:	2200      	movs	r2, #0
 800681e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006820:	f107 0308 	add.w	r3, r7, #8
 8006824:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3304      	adds	r3, #4
 8006830:	4619      	mov	r1, r3
 8006832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	f7fd ff76 	bl	8004728 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800683c:	2300      	movs	r3, #0
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	613b      	str	r3, [r7, #16]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d019      	beq.n	8006896 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	330c      	adds	r3, #12
 8006868:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006878:	65bb      	str	r3, [r7, #88]	; 0x58
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	330c      	adds	r3, #12
 8006880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006882:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006884:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e5      	bne.n	8006862 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3314      	adds	r3, #20
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	657b      	str	r3, [r7, #84]	; 0x54
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3314      	adds	r3, #20
 80068b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e5      	bne.n	8006896 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3314      	adds	r3, #20
 80068d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	617b      	str	r3, [r7, #20]
   return(result);
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068e0:	653b      	str	r3, [r7, #80]	; 0x50
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3314      	adds	r3, #20
 80068e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068ea:	627a      	str	r2, [r7, #36]	; 0x24
 80068ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6a39      	ldr	r1, [r7, #32]
 80068f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e5      	bne.n	80068ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3760      	adds	r7, #96	; 0x60
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	080065e7 	.word	0x080065e7
 800690c:	0800670d 	.word	0x0800670d
 8006910:	08006743 	.word	0x08006743

08006914 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b089      	sub	sp, #36	; 0x24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	330c      	adds	r3, #12
 8006922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	60bb      	str	r3, [r7, #8]
   return(result);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	330c      	adds	r3, #12
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	61ba      	str	r2, [r7, #24]
 800693e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6979      	ldr	r1, [r7, #20]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	613b      	str	r3, [r7, #16]
   return(result);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e5      	bne.n	800691c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006958:	bf00      	nop
 800695a:	3724      	adds	r7, #36	; 0x24
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006964:	b480      	push	{r7}
 8006966:	b095      	sub	sp, #84	; 0x54
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	330c      	adds	r3, #12
 8006972:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	e853 3f00 	ldrex	r3, [r3]
 800697a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800698c:	643a      	str	r2, [r7, #64]	; 0x40
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006994:	e841 2300 	strex	r3, r2, [r1]
 8006998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e5      	bne.n	800696c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3314      	adds	r3, #20
 80069a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3314      	adds	r3, #20
 80069be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e5      	bne.n	80069a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d119      	bne.n	8006a10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	330c      	adds	r3, #12
 80069e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f023 0310 	bic.w	r3, r3, #16
 80069f2:	647b      	str	r3, [r7, #68]	; 0x44
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	330c      	adds	r3, #12
 80069fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069fc:	61ba      	str	r2, [r7, #24]
 80069fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6979      	ldr	r1, [r7, #20]
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e5      	bne.n	80069dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a1e:	bf00      	nop
 8006a20:	3754      	adds	r7, #84	; 0x54
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff fd5d 	bl	8006504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a4a:	bf00      	nop
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b21      	cmp	r3, #33	; 0x21
 8006a64:	d13e      	bne.n	8006ae4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6e:	d114      	bne.n	8006a9a <UART_Transmit_IT+0x48>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d110      	bne.n	8006a9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	1c9a      	adds	r2, r3, #2
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	621a      	str	r2, [r3, #32]
 8006a98:	e008      	b.n	8006aac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	1c59      	adds	r1, r3, #1
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6211      	str	r1, [r2, #32]
 8006aa4:	781a      	ldrb	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10f      	bne.n	8006ae0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ace:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ade:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e000      	b.n	8006ae6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ae4:	2302      	movs	r3, #2
  }
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fa f99a 	bl	8000e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b08c      	sub	sp, #48	; 0x30
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b22      	cmp	r3, #34	; 0x22
 8006b34:	f040 80ab 	bne.w	8006c8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b40:	d117      	bne.n	8006b72 <UART_Receive_IT+0x50>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d113      	bne.n	8006b72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6a:	1c9a      	adds	r2, r3, #2
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8006b70:	e026      	b.n	8006bc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b84:	d007      	beq.n	8006b96 <UART_Receive_IT+0x74>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <UART_Receive_IT+0x82>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d106      	bne.n	8006ba4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	e008      	b.n	8006bb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d15a      	bne.n	8006c8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0220 	bic.w	r2, r2, #32
 8006be2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695a      	ldr	r2, [r3, #20]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0201 	bic.w	r2, r2, #1
 8006c02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d135      	bne.n	8006c80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	330c      	adds	r3, #12
 8006c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f023 0310 	bic.w	r3, r3, #16
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	330c      	adds	r3, #12
 8006c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3a:	623a      	str	r2, [r7, #32]
 8006c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	69f9      	ldr	r1, [r7, #28]
 8006c40:	6a3a      	ldr	r2, [r7, #32]
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e5      	bne.n	8006c1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0310 	and.w	r3, r3, #16
 8006c58:	2b10      	cmp	r3, #16
 8006c5a:	d10a      	bne.n	8006c72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff fc4d 	bl	8006518 <HAL_UARTEx_RxEventCallback>
 8006c7e:	e002      	b.n	8006c86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7fa f8ff 	bl	8000e84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	e002      	b.n	8006c90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e000      	b.n	8006c90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c8e:	2302      	movs	r3, #2
  }
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3730      	adds	r7, #48	; 0x30
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c9c:	b0c0      	sub	sp, #256	; 0x100
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb4:	68d9      	ldr	r1, [r3, #12]
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	ea40 0301 	orr.w	r3, r0, r1
 8006cc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cf0:	f021 010c 	bic.w	r1, r1, #12
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d12:	6999      	ldr	r1, [r3, #24]
 8006d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	ea40 0301 	orr.w	r3, r0, r1
 8006d1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4b8f      	ldr	r3, [pc, #572]	; (8006f64 <UART_SetConfig+0x2cc>)
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d005      	beq.n	8006d38 <UART_SetConfig+0xa0>
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4b8d      	ldr	r3, [pc, #564]	; (8006f68 <UART_SetConfig+0x2d0>)
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d104      	bne.n	8006d42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d38:	f7fe fb64 	bl	8005404 <HAL_RCC_GetPCLK2Freq>
 8006d3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d40:	e003      	b.n	8006d4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d42:	f7fe fb4b 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
 8006d46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d54:	f040 810c 	bne.w	8006f70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d6a:	4622      	mov	r2, r4
 8006d6c:	462b      	mov	r3, r5
 8006d6e:	1891      	adds	r1, r2, r2
 8006d70:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d72:	415b      	adcs	r3, r3
 8006d74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	eb12 0801 	adds.w	r8, r2, r1
 8006d80:	4629      	mov	r1, r5
 8006d82:	eb43 0901 	adc.w	r9, r3, r1
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d9a:	4690      	mov	r8, r2
 8006d9c:	4699      	mov	r9, r3
 8006d9e:	4623      	mov	r3, r4
 8006da0:	eb18 0303 	adds.w	r3, r8, r3
 8006da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006da8:	462b      	mov	r3, r5
 8006daa:	eb49 0303 	adc.w	r3, r9, r3
 8006dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006dc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	18db      	adds	r3, r3, r3
 8006dca:	653b      	str	r3, [r7, #80]	; 0x50
 8006dcc:	4613      	mov	r3, r2
 8006dce:	eb42 0303 	adc.w	r3, r2, r3
 8006dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8006dd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006dd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ddc:	f7f9 fd50 	bl	8000880 <__aeabi_uldivmod>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4b61      	ldr	r3, [pc, #388]	; (8006f6c <UART_SetConfig+0x2d4>)
 8006de6:	fba3 2302 	umull	r2, r3, r3, r2
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	011c      	lsls	r4, r3, #4
 8006dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006df8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006dfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e00:	4642      	mov	r2, r8
 8006e02:	464b      	mov	r3, r9
 8006e04:	1891      	adds	r1, r2, r2
 8006e06:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e08:	415b      	adcs	r3, r3
 8006e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e10:	4641      	mov	r1, r8
 8006e12:	eb12 0a01 	adds.w	sl, r2, r1
 8006e16:	4649      	mov	r1, r9
 8006e18:	eb43 0b01 	adc.w	fp, r3, r1
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e30:	4692      	mov	sl, r2
 8006e32:	469b      	mov	fp, r3
 8006e34:	4643      	mov	r3, r8
 8006e36:	eb1a 0303 	adds.w	r3, sl, r3
 8006e3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e3e:	464b      	mov	r3, r9
 8006e40:	eb4b 0303 	adc.w	r3, fp, r3
 8006e44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	18db      	adds	r3, r3, r3
 8006e60:	643b      	str	r3, [r7, #64]	; 0x40
 8006e62:	4613      	mov	r3, r2
 8006e64:	eb42 0303 	adc.w	r3, r2, r3
 8006e68:	647b      	str	r3, [r7, #68]	; 0x44
 8006e6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e72:	f7f9 fd05 	bl	8000880 <__aeabi_uldivmod>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4b3b      	ldr	r3, [pc, #236]	; (8006f6c <UART_SetConfig+0x2d4>)
 8006e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	2264      	movs	r2, #100	; 0x64
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	1acb      	subs	r3, r1, r3
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e92:	4b36      	ldr	r3, [pc, #216]	; (8006f6c <UART_SetConfig+0x2d4>)
 8006e94:	fba3 2302 	umull	r2, r3, r3, r2
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ea0:	441c      	add	r4, r3
 8006ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006eb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	1891      	adds	r1, r2, r2
 8006eba:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ebc:	415b      	adcs	r3, r3
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ec4:	4641      	mov	r1, r8
 8006ec6:	1851      	adds	r1, r2, r1
 8006ec8:	6339      	str	r1, [r7, #48]	; 0x30
 8006eca:	4649      	mov	r1, r9
 8006ecc:	414b      	adcs	r3, r1
 8006ece:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006edc:	4659      	mov	r1, fp
 8006ede:	00cb      	lsls	r3, r1, #3
 8006ee0:	4651      	mov	r1, sl
 8006ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ee6:	4651      	mov	r1, sl
 8006ee8:	00ca      	lsls	r2, r1, #3
 8006eea:	4610      	mov	r0, r2
 8006eec:	4619      	mov	r1, r3
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	189b      	adds	r3, r3, r2
 8006ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ef8:	464b      	mov	r3, r9
 8006efa:	460a      	mov	r2, r1
 8006efc:	eb42 0303 	adc.w	r3, r2, r3
 8006f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f18:	460b      	mov	r3, r1
 8006f1a:	18db      	adds	r3, r3, r3
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f1e:	4613      	mov	r3, r2
 8006f20:	eb42 0303 	adc.w	r3, r2, r3
 8006f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f2e:	f7f9 fca7 	bl	8000880 <__aeabi_uldivmod>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <UART_SetConfig+0x2d4>)
 8006f38:	fba3 1302 	umull	r1, r3, r3, r2
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	2164      	movs	r1, #100	; 0x64
 8006f40:	fb01 f303 	mul.w	r3, r1, r3
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	3332      	adds	r3, #50	; 0x32
 8006f4a:	4a08      	ldr	r2, [pc, #32]	; (8006f6c <UART_SetConfig+0x2d4>)
 8006f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	f003 0207 	and.w	r2, r3, #7
 8006f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4422      	add	r2, r4
 8006f5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f60:	e105      	b.n	800716e <UART_SetConfig+0x4d6>
 8006f62:	bf00      	nop
 8006f64:	40011000 	.word	0x40011000
 8006f68:	40011400 	.word	0x40011400
 8006f6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f74:	2200      	movs	r2, #0
 8006f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f82:	4642      	mov	r2, r8
 8006f84:	464b      	mov	r3, r9
 8006f86:	1891      	adds	r1, r2, r2
 8006f88:	6239      	str	r1, [r7, #32]
 8006f8a:	415b      	adcs	r3, r3
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f92:	4641      	mov	r1, r8
 8006f94:	1854      	adds	r4, r2, r1
 8006f96:	4649      	mov	r1, r9
 8006f98:	eb43 0501 	adc.w	r5, r3, r1
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	00eb      	lsls	r3, r5, #3
 8006fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006faa:	00e2      	lsls	r2, r4, #3
 8006fac:	4614      	mov	r4, r2
 8006fae:	461d      	mov	r5, r3
 8006fb0:	4643      	mov	r3, r8
 8006fb2:	18e3      	adds	r3, r4, r3
 8006fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fb8:	464b      	mov	r3, r9
 8006fba:	eb45 0303 	adc.w	r3, r5, r3
 8006fbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006fde:	4629      	mov	r1, r5
 8006fe0:	008b      	lsls	r3, r1, #2
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fe8:	4621      	mov	r1, r4
 8006fea:	008a      	lsls	r2, r1, #2
 8006fec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ff0:	f7f9 fc46 	bl	8000880 <__aeabi_uldivmod>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4b60      	ldr	r3, [pc, #384]	; (800717c <UART_SetConfig+0x4e4>)
 8006ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8006ffe:	095b      	lsrs	r3, r3, #5
 8007000:	011c      	lsls	r4, r3, #4
 8007002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007006:	2200      	movs	r2, #0
 8007008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800700c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007010:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007014:	4642      	mov	r2, r8
 8007016:	464b      	mov	r3, r9
 8007018:	1891      	adds	r1, r2, r2
 800701a:	61b9      	str	r1, [r7, #24]
 800701c:	415b      	adcs	r3, r3
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007024:	4641      	mov	r1, r8
 8007026:	1851      	adds	r1, r2, r1
 8007028:	6139      	str	r1, [r7, #16]
 800702a:	4649      	mov	r1, r9
 800702c:	414b      	adcs	r3, r1
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800703c:	4659      	mov	r1, fp
 800703e:	00cb      	lsls	r3, r1, #3
 8007040:	4651      	mov	r1, sl
 8007042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007046:	4651      	mov	r1, sl
 8007048:	00ca      	lsls	r2, r1, #3
 800704a:	4610      	mov	r0, r2
 800704c:	4619      	mov	r1, r3
 800704e:	4603      	mov	r3, r0
 8007050:	4642      	mov	r2, r8
 8007052:	189b      	adds	r3, r3, r2
 8007054:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007058:	464b      	mov	r3, r9
 800705a:	460a      	mov	r2, r1
 800705c:	eb42 0303 	adc.w	r3, r2, r3
 8007060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	67bb      	str	r3, [r7, #120]	; 0x78
 800706e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007070:	f04f 0200 	mov.w	r2, #0
 8007074:	f04f 0300 	mov.w	r3, #0
 8007078:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800707c:	4649      	mov	r1, r9
 800707e:	008b      	lsls	r3, r1, #2
 8007080:	4641      	mov	r1, r8
 8007082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007086:	4641      	mov	r1, r8
 8007088:	008a      	lsls	r2, r1, #2
 800708a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800708e:	f7f9 fbf7 	bl	8000880 <__aeabi_uldivmod>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4b39      	ldr	r3, [pc, #228]	; (800717c <UART_SetConfig+0x4e4>)
 8007098:	fba3 1302 	umull	r1, r3, r3, r2
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	2164      	movs	r1, #100	; 0x64
 80070a0:	fb01 f303 	mul.w	r3, r1, r3
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	3332      	adds	r3, #50	; 0x32
 80070aa:	4a34      	ldr	r2, [pc, #208]	; (800717c <UART_SetConfig+0x4e4>)
 80070ac:	fba2 2303 	umull	r2, r3, r2, r3
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070b6:	441c      	add	r4, r3
 80070b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070bc:	2200      	movs	r2, #0
 80070be:	673b      	str	r3, [r7, #112]	; 0x70
 80070c0:	677a      	str	r2, [r7, #116]	; 0x74
 80070c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80070c6:	4642      	mov	r2, r8
 80070c8:	464b      	mov	r3, r9
 80070ca:	1891      	adds	r1, r2, r2
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	415b      	adcs	r3, r3
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070d6:	4641      	mov	r1, r8
 80070d8:	1851      	adds	r1, r2, r1
 80070da:	6039      	str	r1, [r7, #0]
 80070dc:	4649      	mov	r1, r9
 80070de:	414b      	adcs	r3, r1
 80070e0:	607b      	str	r3, [r7, #4]
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070ee:	4659      	mov	r1, fp
 80070f0:	00cb      	lsls	r3, r1, #3
 80070f2:	4651      	mov	r1, sl
 80070f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f8:	4651      	mov	r1, sl
 80070fa:	00ca      	lsls	r2, r1, #3
 80070fc:	4610      	mov	r0, r2
 80070fe:	4619      	mov	r1, r3
 8007100:	4603      	mov	r3, r0
 8007102:	4642      	mov	r2, r8
 8007104:	189b      	adds	r3, r3, r2
 8007106:	66bb      	str	r3, [r7, #104]	; 0x68
 8007108:	464b      	mov	r3, r9
 800710a:	460a      	mov	r2, r1
 800710c:	eb42 0303 	adc.w	r3, r2, r3
 8007110:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	663b      	str	r3, [r7, #96]	; 0x60
 800711c:	667a      	str	r2, [r7, #100]	; 0x64
 800711e:	f04f 0200 	mov.w	r2, #0
 8007122:	f04f 0300 	mov.w	r3, #0
 8007126:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800712a:	4649      	mov	r1, r9
 800712c:	008b      	lsls	r3, r1, #2
 800712e:	4641      	mov	r1, r8
 8007130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007134:	4641      	mov	r1, r8
 8007136:	008a      	lsls	r2, r1, #2
 8007138:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800713c:	f7f9 fba0 	bl	8000880 <__aeabi_uldivmod>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4b0d      	ldr	r3, [pc, #52]	; (800717c <UART_SetConfig+0x4e4>)
 8007146:	fba3 1302 	umull	r1, r3, r3, r2
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	2164      	movs	r1, #100	; 0x64
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	3332      	adds	r3, #50	; 0x32
 8007158:	4a08      	ldr	r2, [pc, #32]	; (800717c <UART_SetConfig+0x4e4>)
 800715a:	fba2 2303 	umull	r2, r3, r2, r3
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	f003 020f 	and.w	r2, r3, #15
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4422      	add	r2, r4
 800716c:	609a      	str	r2, [r3, #8]
}
 800716e:	bf00      	nop
 8007170:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007174:	46bd      	mov	sp, r7
 8007176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800717a:	bf00      	nop
 800717c:	51eb851f 	.word	0x51eb851f

08007180 <__cxa_pure_virtual>:
 8007180:	b508      	push	{r3, lr}
 8007182:	f000 f80d 	bl	80071a0 <_ZSt9terminatev>

08007186 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007186:	b508      	push	{r3, lr}
 8007188:	4780      	blx	r0
 800718a:	f000 f80e 	bl	80071aa <abort>
	...

08007190 <_ZSt13get_terminatev>:
 8007190:	4b02      	ldr	r3, [pc, #8]	; (800719c <_ZSt13get_terminatev+0xc>)
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	f3bf 8f5b 	dmb	ish
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	2000002c 	.word	0x2000002c

080071a0 <_ZSt9terminatev>:
 80071a0:	b508      	push	{r3, lr}
 80071a2:	f7ff fff5 	bl	8007190 <_ZSt13get_terminatev>
 80071a6:	f7ff ffee 	bl	8007186 <_ZN10__cxxabiv111__terminateEPFvvE>

080071aa <abort>:
 80071aa:	b508      	push	{r3, lr}
 80071ac:	2006      	movs	r0, #6
 80071ae:	f000 f873 	bl	8007298 <raise>
 80071b2:	2001      	movs	r0, #1
 80071b4:	f7fc fbc4 	bl	8003940 <_exit>

080071b8 <__errno>:
 80071b8:	4b01      	ldr	r3, [pc, #4]	; (80071c0 <__errno+0x8>)
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000030 	.word	0x20000030

080071c4 <__libc_init_array>:
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	4d0d      	ldr	r5, [pc, #52]	; (80071fc <__libc_init_array+0x38>)
 80071c8:	4c0d      	ldr	r4, [pc, #52]	; (8007200 <__libc_init_array+0x3c>)
 80071ca:	1b64      	subs	r4, r4, r5
 80071cc:	10a4      	asrs	r4, r4, #2
 80071ce:	2600      	movs	r6, #0
 80071d0:	42a6      	cmp	r6, r4
 80071d2:	d109      	bne.n	80071e8 <__libc_init_array+0x24>
 80071d4:	4d0b      	ldr	r5, [pc, #44]	; (8007204 <__libc_init_array+0x40>)
 80071d6:	4c0c      	ldr	r4, [pc, #48]	; (8007208 <__libc_init_array+0x44>)
 80071d8:	f000 f9b0 	bl	800753c <_init>
 80071dc:	1b64      	subs	r4, r4, r5
 80071de:	10a4      	asrs	r4, r4, #2
 80071e0:	2600      	movs	r6, #0
 80071e2:	42a6      	cmp	r6, r4
 80071e4:	d105      	bne.n	80071f2 <__libc_init_array+0x2e>
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ec:	4798      	blx	r3
 80071ee:	3601      	adds	r6, #1
 80071f0:	e7ee      	b.n	80071d0 <__libc_init_array+0xc>
 80071f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f6:	4798      	blx	r3
 80071f8:	3601      	adds	r6, #1
 80071fa:	e7f2      	b.n	80071e2 <__libc_init_array+0x1e>
 80071fc:	080078f4 	.word	0x080078f4
 8007200:	080078f4 	.word	0x080078f4
 8007204:	080078f4 	.word	0x080078f4
 8007208:	08007900 	.word	0x08007900

0800720c <memcpy>:
 800720c:	440a      	add	r2, r1
 800720e:	4291      	cmp	r1, r2
 8007210:	f100 33ff 	add.w	r3, r0, #4294967295
 8007214:	d100      	bne.n	8007218 <memcpy+0xc>
 8007216:	4770      	bx	lr
 8007218:	b510      	push	{r4, lr}
 800721a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800721e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007222:	4291      	cmp	r1, r2
 8007224:	d1f9      	bne.n	800721a <memcpy+0xe>
 8007226:	bd10      	pop	{r4, pc}

08007228 <memset>:
 8007228:	4402      	add	r2, r0
 800722a:	4603      	mov	r3, r0
 800722c:	4293      	cmp	r3, r2
 800722e:	d100      	bne.n	8007232 <memset+0xa>
 8007230:	4770      	bx	lr
 8007232:	f803 1b01 	strb.w	r1, [r3], #1
 8007236:	e7f9      	b.n	800722c <memset+0x4>

08007238 <realloc>:
 8007238:	4b02      	ldr	r3, [pc, #8]	; (8007244 <realloc+0xc>)
 800723a:	460a      	mov	r2, r1
 800723c:	4601      	mov	r1, r0
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	f000 b8da 	b.w	80073f8 <_realloc_r>
 8007244:	20000030 	.word	0x20000030

08007248 <_raise_r>:
 8007248:	291f      	cmp	r1, #31
 800724a:	b538      	push	{r3, r4, r5, lr}
 800724c:	4604      	mov	r4, r0
 800724e:	460d      	mov	r5, r1
 8007250:	d904      	bls.n	800725c <_raise_r+0x14>
 8007252:	2316      	movs	r3, #22
 8007254:	6003      	str	r3, [r0, #0]
 8007256:	f04f 30ff 	mov.w	r0, #4294967295
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800725e:	b112      	cbz	r2, 8007266 <_raise_r+0x1e>
 8007260:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007264:	b94b      	cbnz	r3, 800727a <_raise_r+0x32>
 8007266:	4620      	mov	r0, r4
 8007268:	f000 f830 	bl	80072cc <_getpid_r>
 800726c:	462a      	mov	r2, r5
 800726e:	4601      	mov	r1, r0
 8007270:	4620      	mov	r0, r4
 8007272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007276:	f000 b817 	b.w	80072a8 <_kill_r>
 800727a:	2b01      	cmp	r3, #1
 800727c:	d00a      	beq.n	8007294 <_raise_r+0x4c>
 800727e:	1c59      	adds	r1, r3, #1
 8007280:	d103      	bne.n	800728a <_raise_r+0x42>
 8007282:	2316      	movs	r3, #22
 8007284:	6003      	str	r3, [r0, #0]
 8007286:	2001      	movs	r0, #1
 8007288:	e7e7      	b.n	800725a <_raise_r+0x12>
 800728a:	2400      	movs	r4, #0
 800728c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007290:	4628      	mov	r0, r5
 8007292:	4798      	blx	r3
 8007294:	2000      	movs	r0, #0
 8007296:	e7e0      	b.n	800725a <_raise_r+0x12>

08007298 <raise>:
 8007298:	4b02      	ldr	r3, [pc, #8]	; (80072a4 <raise+0xc>)
 800729a:	4601      	mov	r1, r0
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	f7ff bfd3 	b.w	8007248 <_raise_r>
 80072a2:	bf00      	nop
 80072a4:	20000030 	.word	0x20000030

080072a8 <_kill_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4d07      	ldr	r5, [pc, #28]	; (80072c8 <_kill_r+0x20>)
 80072ac:	2300      	movs	r3, #0
 80072ae:	4604      	mov	r4, r0
 80072b0:	4608      	mov	r0, r1
 80072b2:	4611      	mov	r1, r2
 80072b4:	602b      	str	r3, [r5, #0]
 80072b6:	f7fc fb33 	bl	8003920 <_kill>
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	d102      	bne.n	80072c4 <_kill_r+0x1c>
 80072be:	682b      	ldr	r3, [r5, #0]
 80072c0:	b103      	cbz	r3, 80072c4 <_kill_r+0x1c>
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	bd38      	pop	{r3, r4, r5, pc}
 80072c6:	bf00      	nop
 80072c8:	20001460 	.word	0x20001460

080072cc <_getpid_r>:
 80072cc:	f7fc bb20 	b.w	8003910 <_getpid>

080072d0 <sbrk_aligned>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	4e0e      	ldr	r6, [pc, #56]	; (800730c <sbrk_aligned+0x3c>)
 80072d4:	460c      	mov	r4, r1
 80072d6:	6831      	ldr	r1, [r6, #0]
 80072d8:	4605      	mov	r5, r0
 80072da:	b911      	cbnz	r1, 80072e2 <sbrk_aligned+0x12>
 80072dc:	f000 f8bc 	bl	8007458 <_sbrk_r>
 80072e0:	6030      	str	r0, [r6, #0]
 80072e2:	4621      	mov	r1, r4
 80072e4:	4628      	mov	r0, r5
 80072e6:	f000 f8b7 	bl	8007458 <_sbrk_r>
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	d00a      	beq.n	8007304 <sbrk_aligned+0x34>
 80072ee:	1cc4      	adds	r4, r0, #3
 80072f0:	f024 0403 	bic.w	r4, r4, #3
 80072f4:	42a0      	cmp	r0, r4
 80072f6:	d007      	beq.n	8007308 <sbrk_aligned+0x38>
 80072f8:	1a21      	subs	r1, r4, r0
 80072fa:	4628      	mov	r0, r5
 80072fc:	f000 f8ac 	bl	8007458 <_sbrk_r>
 8007300:	3001      	adds	r0, #1
 8007302:	d101      	bne.n	8007308 <sbrk_aligned+0x38>
 8007304:	f04f 34ff 	mov.w	r4, #4294967295
 8007308:	4620      	mov	r0, r4
 800730a:	bd70      	pop	{r4, r5, r6, pc}
 800730c:	2000145c 	.word	0x2000145c

08007310 <_malloc_r>:
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	1ccd      	adds	r5, r1, #3
 8007316:	f025 0503 	bic.w	r5, r5, #3
 800731a:	3508      	adds	r5, #8
 800731c:	2d0c      	cmp	r5, #12
 800731e:	bf38      	it	cc
 8007320:	250c      	movcc	r5, #12
 8007322:	2d00      	cmp	r5, #0
 8007324:	4607      	mov	r7, r0
 8007326:	db01      	blt.n	800732c <_malloc_r+0x1c>
 8007328:	42a9      	cmp	r1, r5
 800732a:	d905      	bls.n	8007338 <_malloc_r+0x28>
 800732c:	230c      	movs	r3, #12
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	2600      	movs	r6, #0
 8007332:	4630      	mov	r0, r6
 8007334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007338:	4e2e      	ldr	r6, [pc, #184]	; (80073f4 <_malloc_r+0xe4>)
 800733a:	f000 f89d 	bl	8007478 <__malloc_lock>
 800733e:	6833      	ldr	r3, [r6, #0]
 8007340:	461c      	mov	r4, r3
 8007342:	bb34      	cbnz	r4, 8007392 <_malloc_r+0x82>
 8007344:	4629      	mov	r1, r5
 8007346:	4638      	mov	r0, r7
 8007348:	f7ff ffc2 	bl	80072d0 <sbrk_aligned>
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	4604      	mov	r4, r0
 8007350:	d14d      	bne.n	80073ee <_malloc_r+0xde>
 8007352:	6834      	ldr	r4, [r6, #0]
 8007354:	4626      	mov	r6, r4
 8007356:	2e00      	cmp	r6, #0
 8007358:	d140      	bne.n	80073dc <_malloc_r+0xcc>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	4631      	mov	r1, r6
 800735e:	4638      	mov	r0, r7
 8007360:	eb04 0803 	add.w	r8, r4, r3
 8007364:	f000 f878 	bl	8007458 <_sbrk_r>
 8007368:	4580      	cmp	r8, r0
 800736a:	d13a      	bne.n	80073e2 <_malloc_r+0xd2>
 800736c:	6821      	ldr	r1, [r4, #0]
 800736e:	3503      	adds	r5, #3
 8007370:	1a6d      	subs	r5, r5, r1
 8007372:	f025 0503 	bic.w	r5, r5, #3
 8007376:	3508      	adds	r5, #8
 8007378:	2d0c      	cmp	r5, #12
 800737a:	bf38      	it	cc
 800737c:	250c      	movcc	r5, #12
 800737e:	4629      	mov	r1, r5
 8007380:	4638      	mov	r0, r7
 8007382:	f7ff ffa5 	bl	80072d0 <sbrk_aligned>
 8007386:	3001      	adds	r0, #1
 8007388:	d02b      	beq.n	80073e2 <_malloc_r+0xd2>
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	442b      	add	r3, r5
 800738e:	6023      	str	r3, [r4, #0]
 8007390:	e00e      	b.n	80073b0 <_malloc_r+0xa0>
 8007392:	6822      	ldr	r2, [r4, #0]
 8007394:	1b52      	subs	r2, r2, r5
 8007396:	d41e      	bmi.n	80073d6 <_malloc_r+0xc6>
 8007398:	2a0b      	cmp	r2, #11
 800739a:	d916      	bls.n	80073ca <_malloc_r+0xba>
 800739c:	1961      	adds	r1, r4, r5
 800739e:	42a3      	cmp	r3, r4
 80073a0:	6025      	str	r5, [r4, #0]
 80073a2:	bf18      	it	ne
 80073a4:	6059      	strne	r1, [r3, #4]
 80073a6:	6863      	ldr	r3, [r4, #4]
 80073a8:	bf08      	it	eq
 80073aa:	6031      	streq	r1, [r6, #0]
 80073ac:	5162      	str	r2, [r4, r5]
 80073ae:	604b      	str	r3, [r1, #4]
 80073b0:	4638      	mov	r0, r7
 80073b2:	f104 060b 	add.w	r6, r4, #11
 80073b6:	f000 f865 	bl	8007484 <__malloc_unlock>
 80073ba:	f026 0607 	bic.w	r6, r6, #7
 80073be:	1d23      	adds	r3, r4, #4
 80073c0:	1af2      	subs	r2, r6, r3
 80073c2:	d0b6      	beq.n	8007332 <_malloc_r+0x22>
 80073c4:	1b9b      	subs	r3, r3, r6
 80073c6:	50a3      	str	r3, [r4, r2]
 80073c8:	e7b3      	b.n	8007332 <_malloc_r+0x22>
 80073ca:	6862      	ldr	r2, [r4, #4]
 80073cc:	42a3      	cmp	r3, r4
 80073ce:	bf0c      	ite	eq
 80073d0:	6032      	streq	r2, [r6, #0]
 80073d2:	605a      	strne	r2, [r3, #4]
 80073d4:	e7ec      	b.n	80073b0 <_malloc_r+0xa0>
 80073d6:	4623      	mov	r3, r4
 80073d8:	6864      	ldr	r4, [r4, #4]
 80073da:	e7b2      	b.n	8007342 <_malloc_r+0x32>
 80073dc:	4634      	mov	r4, r6
 80073de:	6876      	ldr	r6, [r6, #4]
 80073e0:	e7b9      	b.n	8007356 <_malloc_r+0x46>
 80073e2:	230c      	movs	r3, #12
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	4638      	mov	r0, r7
 80073e8:	f000 f84c 	bl	8007484 <__malloc_unlock>
 80073ec:	e7a1      	b.n	8007332 <_malloc_r+0x22>
 80073ee:	6025      	str	r5, [r4, #0]
 80073f0:	e7de      	b.n	80073b0 <_malloc_r+0xa0>
 80073f2:	bf00      	nop
 80073f4:	20001458 	.word	0x20001458

080073f8 <_realloc_r>:
 80073f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073fc:	4680      	mov	r8, r0
 80073fe:	4614      	mov	r4, r2
 8007400:	460e      	mov	r6, r1
 8007402:	b921      	cbnz	r1, 800740e <_realloc_r+0x16>
 8007404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007408:	4611      	mov	r1, r2
 800740a:	f7ff bf81 	b.w	8007310 <_malloc_r>
 800740e:	b92a      	cbnz	r2, 800741c <_realloc_r+0x24>
 8007410:	f000 f83e 	bl	8007490 <_free_r>
 8007414:	4625      	mov	r5, r4
 8007416:	4628      	mov	r0, r5
 8007418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800741c:	f000 f884 	bl	8007528 <_malloc_usable_size_r>
 8007420:	4284      	cmp	r4, r0
 8007422:	4607      	mov	r7, r0
 8007424:	d802      	bhi.n	800742c <_realloc_r+0x34>
 8007426:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800742a:	d812      	bhi.n	8007452 <_realloc_r+0x5a>
 800742c:	4621      	mov	r1, r4
 800742e:	4640      	mov	r0, r8
 8007430:	f7ff ff6e 	bl	8007310 <_malloc_r>
 8007434:	4605      	mov	r5, r0
 8007436:	2800      	cmp	r0, #0
 8007438:	d0ed      	beq.n	8007416 <_realloc_r+0x1e>
 800743a:	42bc      	cmp	r4, r7
 800743c:	4622      	mov	r2, r4
 800743e:	4631      	mov	r1, r6
 8007440:	bf28      	it	cs
 8007442:	463a      	movcs	r2, r7
 8007444:	f7ff fee2 	bl	800720c <memcpy>
 8007448:	4631      	mov	r1, r6
 800744a:	4640      	mov	r0, r8
 800744c:	f000 f820 	bl	8007490 <_free_r>
 8007450:	e7e1      	b.n	8007416 <_realloc_r+0x1e>
 8007452:	4635      	mov	r5, r6
 8007454:	e7df      	b.n	8007416 <_realloc_r+0x1e>
	...

08007458 <_sbrk_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d06      	ldr	r5, [pc, #24]	; (8007474 <_sbrk_r+0x1c>)
 800745c:	2300      	movs	r3, #0
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	f7fc fa76 	bl	8003954 <_sbrk>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_sbrk_r+0x1a>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_sbrk_r+0x1a>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	20001460 	.word	0x20001460

08007478 <__malloc_lock>:
 8007478:	4801      	ldr	r0, [pc, #4]	; (8007480 <__malloc_lock+0x8>)
 800747a:	f000 b85d 	b.w	8007538 <__retarget_lock_acquire_recursive>
 800747e:	bf00      	nop
 8007480:	20001464 	.word	0x20001464

08007484 <__malloc_unlock>:
 8007484:	4801      	ldr	r0, [pc, #4]	; (800748c <__malloc_unlock+0x8>)
 8007486:	f000 b858 	b.w	800753a <__retarget_lock_release_recursive>
 800748a:	bf00      	nop
 800748c:	20001464 	.word	0x20001464

08007490 <_free_r>:
 8007490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007492:	2900      	cmp	r1, #0
 8007494:	d044      	beq.n	8007520 <_free_r+0x90>
 8007496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800749a:	9001      	str	r0, [sp, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f1a1 0404 	sub.w	r4, r1, #4
 80074a2:	bfb8      	it	lt
 80074a4:	18e4      	addlt	r4, r4, r3
 80074a6:	f7ff ffe7 	bl	8007478 <__malloc_lock>
 80074aa:	4a1e      	ldr	r2, [pc, #120]	; (8007524 <_free_r+0x94>)
 80074ac:	9801      	ldr	r0, [sp, #4]
 80074ae:	6813      	ldr	r3, [r2, #0]
 80074b0:	b933      	cbnz	r3, 80074c0 <_free_r+0x30>
 80074b2:	6063      	str	r3, [r4, #4]
 80074b4:	6014      	str	r4, [r2, #0]
 80074b6:	b003      	add	sp, #12
 80074b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074bc:	f7ff bfe2 	b.w	8007484 <__malloc_unlock>
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	d908      	bls.n	80074d6 <_free_r+0x46>
 80074c4:	6825      	ldr	r5, [r4, #0]
 80074c6:	1961      	adds	r1, r4, r5
 80074c8:	428b      	cmp	r3, r1
 80074ca:	bf01      	itttt	eq
 80074cc:	6819      	ldreq	r1, [r3, #0]
 80074ce:	685b      	ldreq	r3, [r3, #4]
 80074d0:	1949      	addeq	r1, r1, r5
 80074d2:	6021      	streq	r1, [r4, #0]
 80074d4:	e7ed      	b.n	80074b2 <_free_r+0x22>
 80074d6:	461a      	mov	r2, r3
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	b10b      	cbz	r3, 80074e0 <_free_r+0x50>
 80074dc:	42a3      	cmp	r3, r4
 80074de:	d9fa      	bls.n	80074d6 <_free_r+0x46>
 80074e0:	6811      	ldr	r1, [r2, #0]
 80074e2:	1855      	adds	r5, r2, r1
 80074e4:	42a5      	cmp	r5, r4
 80074e6:	d10b      	bne.n	8007500 <_free_r+0x70>
 80074e8:	6824      	ldr	r4, [r4, #0]
 80074ea:	4421      	add	r1, r4
 80074ec:	1854      	adds	r4, r2, r1
 80074ee:	42a3      	cmp	r3, r4
 80074f0:	6011      	str	r1, [r2, #0]
 80074f2:	d1e0      	bne.n	80074b6 <_free_r+0x26>
 80074f4:	681c      	ldr	r4, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	6053      	str	r3, [r2, #4]
 80074fa:	4421      	add	r1, r4
 80074fc:	6011      	str	r1, [r2, #0]
 80074fe:	e7da      	b.n	80074b6 <_free_r+0x26>
 8007500:	d902      	bls.n	8007508 <_free_r+0x78>
 8007502:	230c      	movs	r3, #12
 8007504:	6003      	str	r3, [r0, #0]
 8007506:	e7d6      	b.n	80074b6 <_free_r+0x26>
 8007508:	6825      	ldr	r5, [r4, #0]
 800750a:	1961      	adds	r1, r4, r5
 800750c:	428b      	cmp	r3, r1
 800750e:	bf04      	itt	eq
 8007510:	6819      	ldreq	r1, [r3, #0]
 8007512:	685b      	ldreq	r3, [r3, #4]
 8007514:	6063      	str	r3, [r4, #4]
 8007516:	bf04      	itt	eq
 8007518:	1949      	addeq	r1, r1, r5
 800751a:	6021      	streq	r1, [r4, #0]
 800751c:	6054      	str	r4, [r2, #4]
 800751e:	e7ca      	b.n	80074b6 <_free_r+0x26>
 8007520:	b003      	add	sp, #12
 8007522:	bd30      	pop	{r4, r5, pc}
 8007524:	20001458 	.word	0x20001458

08007528 <_malloc_usable_size_r>:
 8007528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800752c:	1f18      	subs	r0, r3, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	bfbc      	itt	lt
 8007532:	580b      	ldrlt	r3, [r1, r0]
 8007534:	18c0      	addlt	r0, r0, r3
 8007536:	4770      	bx	lr

08007538 <__retarget_lock_acquire_recursive>:
 8007538:	4770      	bx	lr

0800753a <__retarget_lock_release_recursive>:
 800753a:	4770      	bx	lr

0800753c <_init>:
 800753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753e:	bf00      	nop
 8007540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007542:	bc08      	pop	{r3}
 8007544:	469e      	mov	lr, r3
 8007546:	4770      	bx	lr

08007548 <_fini>:
 8007548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754a:	bf00      	nop
 800754c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754e:	bc08      	pop	{r3}
 8007550:	469e      	mov	lr, r3
 8007552:	4770      	bx	lr
