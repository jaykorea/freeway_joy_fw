
check.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000732c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007888  08007888  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007888  08007888  00017888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007890  08007890  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800789c  0800789c  0001789c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080078a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013cc  20000090  08007930  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000145c  08007930  0002145c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140d1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bca  00000000  00000000  00034191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00036d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  000379d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f74  00000000  00000000  00038570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f803  00000000  00000000  0005e4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd01f  00000000  00000000  0006dce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ad06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003888  00000000  00000000  0014ad58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000090 	.word	0x20000090
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080074d8 	.word	0x080074d8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000094 	.word	0x20000094
 8000200:	080074d8 	.word	0x080074d8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_dmul>:
 8000214:	b570      	push	{r4, r5, r6, lr}
 8000216:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800021e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000222:	bf1d      	ittte	ne
 8000224:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000228:	ea94 0f0c 	teqne	r4, ip
 800022c:	ea95 0f0c 	teqne	r5, ip
 8000230:	f000 f8de 	bleq	80003f0 <__aeabi_dmul+0x1dc>
 8000234:	442c      	add	r4, r5
 8000236:	ea81 0603 	eor.w	r6, r1, r3
 800023a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800023e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000242:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000246:	bf18      	it	ne
 8000248:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800024c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000254:	d038      	beq.n	80002c8 <__aeabi_dmul+0xb4>
 8000256:	fba0 ce02 	umull	ip, lr, r0, r2
 800025a:	f04f 0500 	mov.w	r5, #0
 800025e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000262:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000266:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026a:	f04f 0600 	mov.w	r6, #0
 800026e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000272:	f09c 0f00 	teq	ip, #0
 8000276:	bf18      	it	ne
 8000278:	f04e 0e01 	orrne.w	lr, lr, #1
 800027c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000280:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000284:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000288:	d204      	bcs.n	8000294 <__aeabi_dmul+0x80>
 800028a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800028e:	416d      	adcs	r5, r5
 8000290:	eb46 0606 	adc.w	r6, r6, r6
 8000294:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000298:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800029c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002ac:	bf88      	it	hi
 80002ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b2:	d81e      	bhi.n	80002f2 <__aeabi_dmul+0xde>
 80002b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002b8:	bf08      	it	eq
 80002ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002be:	f150 0000 	adcs.w	r0, r0, #0
 80002c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002cc:	ea46 0101 	orr.w	r1, r6, r1
 80002d0:	ea40 0002 	orr.w	r0, r0, r2
 80002d4:	ea81 0103 	eor.w	r1, r1, r3
 80002d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002dc:	bfc2      	ittt	gt
 80002de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002e6:	bd70      	popgt	{r4, r5, r6, pc}
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f04f 0e00 	mov.w	lr, #0
 80002f0:	3c01      	subs	r4, #1
 80002f2:	f300 80ab 	bgt.w	800044c <__aeabi_dmul+0x238>
 80002f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fa:	bfde      	ittt	le
 80002fc:	2000      	movle	r0, #0
 80002fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000302:	bd70      	pople	{r4, r5, r6, pc}
 8000304:	f1c4 0400 	rsb	r4, r4, #0
 8000308:	3c20      	subs	r4, #32
 800030a:	da35      	bge.n	8000378 <__aeabi_dmul+0x164>
 800030c:	340c      	adds	r4, #12
 800030e:	dc1b      	bgt.n	8000348 <__aeabi_dmul+0x134>
 8000310:	f104 0414 	add.w	r4, r4, #20
 8000314:	f1c4 0520 	rsb	r5, r4, #32
 8000318:	fa00 f305 	lsl.w	r3, r0, r5
 800031c:	fa20 f004 	lsr.w	r0, r0, r4
 8000320:	fa01 f205 	lsl.w	r2, r1, r5
 8000324:	ea40 0002 	orr.w	r0, r0, r2
 8000328:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800032c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	fa21 f604 	lsr.w	r6, r1, r4
 8000338:	eb42 0106 	adc.w	r1, r2, r6
 800033c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000340:	bf08      	it	eq
 8000342:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f1c4 040c 	rsb	r4, r4, #12
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f304 	lsl.w	r3, r0, r4
 8000354:	fa20 f005 	lsr.w	r0, r0, r5
 8000358:	fa01 f204 	lsl.w	r2, r1, r4
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000368:	f141 0100 	adc.w	r1, r1, #0
 800036c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000370:	bf08      	it	eq
 8000372:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000376:	bd70      	pop	{r4, r5, r6, pc}
 8000378:	f1c4 0520 	rsb	r5, r4, #32
 800037c:	fa00 f205 	lsl.w	r2, r0, r5
 8000380:	ea4e 0e02 	orr.w	lr, lr, r2
 8000384:	fa20 f304 	lsr.w	r3, r0, r4
 8000388:	fa01 f205 	lsl.w	r2, r1, r5
 800038c:	ea43 0302 	orr.w	r3, r3, r2
 8000390:	fa21 f004 	lsr.w	r0, r1, r4
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000398:	fa21 f204 	lsr.w	r2, r1, r4
 800039c:	ea20 0002 	bic.w	r0, r0, r2
 80003a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a8:	bf08      	it	eq
 80003aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f094 0f00 	teq	r4, #0
 80003b4:	d10f      	bne.n	80003d6 <__aeabi_dmul+0x1c2>
 80003b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ba:	0040      	lsls	r0, r0, #1
 80003bc:	eb41 0101 	adc.w	r1, r1, r1
 80003c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c4:	bf08      	it	eq
 80003c6:	3c01      	subeq	r4, #1
 80003c8:	d0f7      	beq.n	80003ba <__aeabi_dmul+0x1a6>
 80003ca:	ea41 0106 	orr.w	r1, r1, r6
 80003ce:	f095 0f00 	teq	r5, #0
 80003d2:	bf18      	it	ne
 80003d4:	4770      	bxne	lr
 80003d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003da:	0052      	lsls	r2, r2, #1
 80003dc:	eb43 0303 	adc.w	r3, r3, r3
 80003e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e4:	bf08      	it	eq
 80003e6:	3d01      	subeq	r5, #1
 80003e8:	d0f7      	beq.n	80003da <__aeabi_dmul+0x1c6>
 80003ea:	ea43 0306 	orr.w	r3, r3, r6
 80003ee:	4770      	bx	lr
 80003f0:	ea94 0f0c 	teq	r4, ip
 80003f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003f8:	bf18      	it	ne
 80003fa:	ea95 0f0c 	teqne	r5, ip
 80003fe:	d00c      	beq.n	800041a <__aeabi_dmul+0x206>
 8000400:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000404:	bf18      	it	ne
 8000406:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040a:	d1d1      	bne.n	80003b0 <__aeabi_dmul+0x19c>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800041e:	bf06      	itte	eq
 8000420:	4610      	moveq	r0, r2
 8000422:	4619      	moveq	r1, r3
 8000424:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000428:	d019      	beq.n	800045e <__aeabi_dmul+0x24a>
 800042a:	ea94 0f0c 	teq	r4, ip
 800042e:	d102      	bne.n	8000436 <__aeabi_dmul+0x222>
 8000430:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000434:	d113      	bne.n	800045e <__aeabi_dmul+0x24a>
 8000436:	ea95 0f0c 	teq	r5, ip
 800043a:	d105      	bne.n	8000448 <__aeabi_dmul+0x234>
 800043c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000440:	bf1c      	itt	ne
 8000442:	4610      	movne	r0, r2
 8000444:	4619      	movne	r1, r3
 8000446:	d10a      	bne.n	800045e <__aeabi_dmul+0x24a>
 8000448:	ea81 0103 	eor.w	r1, r1, r3
 800044c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000450:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd70      	pop	{r4, r5, r6, pc}
 800045e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000462:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000466:	bd70      	pop	{r4, r5, r6, pc}

08000468 <__aeabi_drsub>:
 8000468:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e002      	b.n	8000474 <__adddf3>
 800046e:	bf00      	nop

08000470 <__aeabi_dsub>:
 8000470:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000474 <__adddf3>:
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	bf1f      	itttt	ne
 800048a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800048e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000492:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000496:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049a:	f000 80e2 	beq.w	8000662 <__adddf3+0x1ee>
 800049e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004a6:	bfb8      	it	lt
 80004a8:	426d      	neglt	r5, r5
 80004aa:	dd0c      	ble.n	80004c6 <__adddf3+0x52>
 80004ac:	442c      	add	r4, r5
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	ea82 0000 	eor.w	r0, r2, r0
 80004ba:	ea83 0101 	eor.w	r1, r3, r1
 80004be:	ea80 0202 	eor.w	r2, r0, r2
 80004c2:	ea81 0303 	eor.w	r3, r1, r3
 80004c6:	2d36      	cmp	r5, #54	; 0x36
 80004c8:	bf88      	it	hi
 80004ca:	bd30      	pophi	{r4, r5, pc}
 80004cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x70>
 80004de:	4240      	negs	r0, r0
 80004e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x84>
 80004f2:	4252      	negs	r2, r2
 80004f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004f8:	ea94 0f05 	teq	r4, r5
 80004fc:	f000 80a7 	beq.w	800064e <__adddf3+0x1da>
 8000500:	f1a4 0401 	sub.w	r4, r4, #1
 8000504:	f1d5 0e20 	rsbs	lr, r5, #32
 8000508:	db0d      	blt.n	8000526 <__adddf3+0xb2>
 800050a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800050e:	fa22 f205 	lsr.w	r2, r2, r5
 8000512:	1880      	adds	r0, r0, r2
 8000514:	f141 0100 	adc.w	r1, r1, #0
 8000518:	fa03 f20e 	lsl.w	r2, r3, lr
 800051c:	1880      	adds	r0, r0, r2
 800051e:	fa43 f305 	asr.w	r3, r3, r5
 8000522:	4159      	adcs	r1, r3
 8000524:	e00e      	b.n	8000544 <__adddf3+0xd0>
 8000526:	f1a5 0520 	sub.w	r5, r5, #32
 800052a:	f10e 0e20 	add.w	lr, lr, #32
 800052e:	2a01      	cmp	r2, #1
 8000530:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000534:	bf28      	it	cs
 8000536:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	18c0      	adds	r0, r0, r3
 8000540:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	d507      	bpl.n	800055a <__adddf3+0xe6>
 800054a:	f04f 0e00 	mov.w	lr, #0
 800054e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000552:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000556:	eb6e 0101 	sbc.w	r1, lr, r1
 800055a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800055e:	d31b      	bcc.n	8000598 <__adddf3+0x124>
 8000560:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000564:	d30c      	bcc.n	8000580 <__adddf3+0x10c>
 8000566:	0849      	lsrs	r1, r1, #1
 8000568:	ea5f 0030 	movs.w	r0, r0, rrx
 800056c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000570:	f104 0401 	add.w	r4, r4, #1
 8000574:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000578:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800057c:	f080 809a 	bcs.w	80006b4 <__adddf3+0x240>
 8000580:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000584:	bf08      	it	eq
 8000586:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058a:	f150 0000 	adcs.w	r0, r0, #0
 800058e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000592:	ea41 0105 	orr.w	r1, r1, r5
 8000596:	bd30      	pop	{r4, r5, pc}
 8000598:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800059c:	4140      	adcs	r0, r0
 800059e:	eb41 0101 	adc.w	r1, r1, r1
 80005a2:	3c01      	subs	r4, #1
 80005a4:	bf28      	it	cs
 80005a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005aa:	d2e9      	bcs.n	8000580 <__adddf3+0x10c>
 80005ac:	f091 0f00 	teq	r1, #0
 80005b0:	bf04      	itt	eq
 80005b2:	4601      	moveq	r1, r0
 80005b4:	2000      	moveq	r0, #0
 80005b6:	fab1 f381 	clz	r3, r1
 80005ba:	bf08      	it	eq
 80005bc:	3320      	addeq	r3, #32
 80005be:	f1a3 030b 	sub.w	r3, r3, #11
 80005c2:	f1b3 0220 	subs.w	r2, r3, #32
 80005c6:	da0c      	bge.n	80005e2 <__adddf3+0x16e>
 80005c8:	320c      	adds	r2, #12
 80005ca:	dd08      	ble.n	80005de <__adddf3+0x16a>
 80005cc:	f102 0c14 	add.w	ip, r2, #20
 80005d0:	f1c2 020c 	rsb	r2, r2, #12
 80005d4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005d8:	fa21 f102 	lsr.w	r1, r1, r2
 80005dc:	e00c      	b.n	80005f8 <__adddf3+0x184>
 80005de:	f102 0214 	add.w	r2, r2, #20
 80005e2:	bfd8      	it	le
 80005e4:	f1c2 0c20 	rsble	ip, r2, #32
 80005e8:	fa01 f102 	lsl.w	r1, r1, r2
 80005ec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f0:	bfdc      	itt	le
 80005f2:	ea41 010c 	orrle.w	r1, r1, ip
 80005f6:	4090      	lslle	r0, r2
 80005f8:	1ae4      	subs	r4, r4, r3
 80005fa:	bfa2      	ittt	ge
 80005fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000600:	4329      	orrge	r1, r5
 8000602:	bd30      	popge	{r4, r5, pc}
 8000604:	ea6f 0404 	mvn.w	r4, r4
 8000608:	3c1f      	subs	r4, #31
 800060a:	da1c      	bge.n	8000646 <__adddf3+0x1d2>
 800060c:	340c      	adds	r4, #12
 800060e:	dc0e      	bgt.n	800062e <__adddf3+0x1ba>
 8000610:	f104 0414 	add.w	r4, r4, #20
 8000614:	f1c4 0220 	rsb	r2, r4, #32
 8000618:	fa20 f004 	lsr.w	r0, r0, r4
 800061c:	fa01 f302 	lsl.w	r3, r1, r2
 8000620:	ea40 0003 	orr.w	r0, r0, r3
 8000624:	fa21 f304 	lsr.w	r3, r1, r4
 8000628:	ea45 0103 	orr.w	r1, r5, r3
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	f1c4 040c 	rsb	r4, r4, #12
 8000632:	f1c4 0220 	rsb	r2, r4, #32
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 f304 	lsl.w	r3, r1, r4
 800063e:	ea40 0003 	orr.w	r0, r0, r3
 8000642:	4629      	mov	r1, r5
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	fa21 f004 	lsr.w	r0, r1, r4
 800064a:	4629      	mov	r1, r5
 800064c:	bd30      	pop	{r4, r5, pc}
 800064e:	f094 0f00 	teq	r4, #0
 8000652:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000656:	bf06      	itte	eq
 8000658:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800065c:	3401      	addeq	r4, #1
 800065e:	3d01      	subne	r5, #1
 8000660:	e74e      	b.n	8000500 <__adddf3+0x8c>
 8000662:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000666:	bf18      	it	ne
 8000668:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800066c:	d029      	beq.n	80006c2 <__adddf3+0x24e>
 800066e:	ea94 0f05 	teq	r4, r5
 8000672:	bf08      	it	eq
 8000674:	ea90 0f02 	teqeq	r0, r2
 8000678:	d005      	beq.n	8000686 <__adddf3+0x212>
 800067a:	ea54 0c00 	orrs.w	ip, r4, r0
 800067e:	bf04      	itt	eq
 8000680:	4619      	moveq	r1, r3
 8000682:	4610      	moveq	r0, r2
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea91 0f03 	teq	r1, r3
 800068a:	bf1e      	ittt	ne
 800068c:	2100      	movne	r1, #0
 800068e:	2000      	movne	r0, #0
 8000690:	bd30      	popne	{r4, r5, pc}
 8000692:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000696:	d105      	bne.n	80006a4 <__adddf3+0x230>
 8000698:	0040      	lsls	r0, r0, #1
 800069a:	4149      	adcs	r1, r1
 800069c:	bf28      	it	cs
 800069e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a2:	bd30      	pop	{r4, r5, pc}
 80006a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006a8:	bf3c      	itt	cc
 80006aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ae:	bd30      	popcc	{r4, r5, pc}
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c6:	bf1a      	itte	ne
 80006c8:	4619      	movne	r1, r3
 80006ca:	4610      	movne	r0, r2
 80006cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d0:	bf1c      	itt	ne
 80006d2:	460b      	movne	r3, r1
 80006d4:	4602      	movne	r2, r0
 80006d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006da:	bf06      	itte	eq
 80006dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e0:	ea91 0f03 	teqeq	r1, r3
 80006e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	bf00      	nop

080006ec <__aeabi_ui2d>:
 80006ec:	f090 0f00 	teq	r0, #0
 80006f0:	bf04      	itt	eq
 80006f2:	2100      	moveq	r1, #0
 80006f4:	4770      	bxeq	lr
 80006f6:	b530      	push	{r4, r5, lr}
 80006f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000700:	f04f 0500 	mov.w	r5, #0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e750      	b.n	80005ac <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_i2d>:
 800070c:	f090 0f00 	teq	r0, #0
 8000710:	bf04      	itt	eq
 8000712:	2100      	moveq	r1, #0
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800071c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000720:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000724:	bf48      	it	mi
 8000726:	4240      	negmi	r0, r0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e73e      	b.n	80005ac <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_f2d>:
 8000730:	0042      	lsls	r2, r0, #1
 8000732:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000736:	ea4f 0131 	mov.w	r1, r1, rrx
 800073a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800073e:	bf1f      	itttt	ne
 8000740:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000744:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000748:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800074c:	4770      	bxne	lr
 800074e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000752:	bf08      	it	eq
 8000754:	4770      	bxeq	lr
 8000756:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075a:	bf04      	itt	eq
 800075c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000768:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000770:	e71c      	b.n	80005ac <__adddf3+0x138>
 8000772:	bf00      	nop

08000774 <__aeabi_ul2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f04f 0500 	mov.w	r5, #0
 8000782:	e00a      	b.n	800079a <__aeabi_l2d+0x16>

08000784 <__aeabi_l2d>:
 8000784:	ea50 0201 	orrs.w	r2, r0, r1
 8000788:	bf08      	it	eq
 800078a:	4770      	bxeq	lr
 800078c:	b530      	push	{r4, r5, lr}
 800078e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000792:	d502      	bpl.n	800079a <__aeabi_l2d+0x16>
 8000794:	4240      	negs	r0, r0
 8000796:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800079e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007a6:	f43f aed8 	beq.w	800055a <__adddf3+0xe6>
 80007aa:	f04f 0203 	mov.w	r2, #3
 80007ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b2:	bf18      	it	ne
 80007b4:	3203      	addne	r2, #3
 80007b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ba:	bf18      	it	ne
 80007bc:	3203      	addne	r2, #3
 80007be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ca:	fa20 f002 	lsr.w	r0, r0, r2
 80007ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d2:	ea40 000e 	orr.w	r0, r0, lr
 80007d6:	fa21 f102 	lsr.w	r1, r1, r2
 80007da:	4414      	add	r4, r2
 80007dc:	e6bd      	b.n	800055a <__adddf3+0xe6>
 80007de:	bf00      	nop

080007e0 <__aeabi_d2f>:
 80007e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007e8:	bf24      	itt	cs
 80007ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f2:	d90d      	bls.n	8000810 <__aeabi_d2f+0x30>
 80007f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000800:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000804:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000808:	bf08      	it	eq
 800080a:	f020 0001 	biceq.w	r0, r0, #1
 800080e:	4770      	bx	lr
 8000810:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000814:	d121      	bne.n	800085a <__aeabi_d2f+0x7a>
 8000816:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081a:	bfbc      	itt	lt
 800081c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000820:	4770      	bxlt	lr
 8000822:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000826:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082a:	f1c2 0218 	rsb	r2, r2, #24
 800082e:	f1c2 0c20 	rsb	ip, r2, #32
 8000832:	fa10 f30c 	lsls.w	r3, r0, ip
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	bf18      	it	ne
 800083c:	f040 0001 	orrne.w	r0, r0, #1
 8000840:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000844:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000848:	fa03 fc0c 	lsl.w	ip, r3, ip
 800084c:	ea40 000c 	orr.w	r0, r0, ip
 8000850:	fa23 f302 	lsr.w	r3, r3, r2
 8000854:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000858:	e7cc      	b.n	80007f4 <__aeabi_d2f+0x14>
 800085a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800085e:	d107      	bne.n	8000870 <__aeabi_d2f+0x90>
 8000860:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000864:	bf1e      	ittt	ne
 8000866:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800086e:	4770      	bxne	lr
 8000870:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000874:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000878:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <__aeabi_uldivmod>:
 8000880:	b953      	cbnz	r3, 8000898 <__aeabi_uldivmod+0x18>
 8000882:	b94a      	cbnz	r2, 8000898 <__aeabi_uldivmod+0x18>
 8000884:	2900      	cmp	r1, #0
 8000886:	bf08      	it	eq
 8000888:	2800      	cmpeq	r0, #0
 800088a:	bf1c      	itt	ne
 800088c:	f04f 31ff 	movne.w	r1, #4294967295
 8000890:	f04f 30ff 	movne.w	r0, #4294967295
 8000894:	f000 b974 	b.w	8000b80 <__aeabi_idiv0>
 8000898:	f1ad 0c08 	sub.w	ip, sp, #8
 800089c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a0:	f000 f806 	bl	80008b0 <__udivmoddi4>
 80008a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ac:	b004      	add	sp, #16
 80008ae:	4770      	bx	lr

080008b0 <__udivmoddi4>:
 80008b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b4:	9d08      	ldr	r5, [sp, #32]
 80008b6:	4604      	mov	r4, r0
 80008b8:	468e      	mov	lr, r1
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d14d      	bne.n	800095a <__udivmoddi4+0xaa>
 80008be:	428a      	cmp	r2, r1
 80008c0:	4694      	mov	ip, r2
 80008c2:	d969      	bls.n	8000998 <__udivmoddi4+0xe8>
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	b152      	cbz	r2, 80008e0 <__udivmoddi4+0x30>
 80008ca:	fa01 f302 	lsl.w	r3, r1, r2
 80008ce:	f1c2 0120 	rsb	r1, r2, #32
 80008d2:	fa20 f101 	lsr.w	r1, r0, r1
 80008d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80008da:	ea41 0e03 	orr.w	lr, r1, r3
 80008de:	4094      	lsls	r4, r2
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	0c21      	lsrs	r1, r4, #16
 80008e6:	fbbe f6f8 	udiv	r6, lr, r8
 80008ea:	fa1f f78c 	uxth.w	r7, ip
 80008ee:	fb08 e316 	mls	r3, r8, r6, lr
 80008f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008f6:	fb06 f107 	mul.w	r1, r6, r7
 80008fa:	4299      	cmp	r1, r3
 80008fc:	d90a      	bls.n	8000914 <__udivmoddi4+0x64>
 80008fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000902:	f106 30ff 	add.w	r0, r6, #4294967295
 8000906:	f080 811f 	bcs.w	8000b48 <__udivmoddi4+0x298>
 800090a:	4299      	cmp	r1, r3
 800090c:	f240 811c 	bls.w	8000b48 <__udivmoddi4+0x298>
 8000910:	3e02      	subs	r6, #2
 8000912:	4463      	add	r3, ip
 8000914:	1a5b      	subs	r3, r3, r1
 8000916:	b2a4      	uxth	r4, r4
 8000918:	fbb3 f0f8 	udiv	r0, r3, r8
 800091c:	fb08 3310 	mls	r3, r8, r0, r3
 8000920:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000924:	fb00 f707 	mul.w	r7, r0, r7
 8000928:	42a7      	cmp	r7, r4
 800092a:	d90a      	bls.n	8000942 <__udivmoddi4+0x92>
 800092c:	eb1c 0404 	adds.w	r4, ip, r4
 8000930:	f100 33ff 	add.w	r3, r0, #4294967295
 8000934:	f080 810a 	bcs.w	8000b4c <__udivmoddi4+0x29c>
 8000938:	42a7      	cmp	r7, r4
 800093a:	f240 8107 	bls.w	8000b4c <__udivmoddi4+0x29c>
 800093e:	4464      	add	r4, ip
 8000940:	3802      	subs	r0, #2
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	1be4      	subs	r4, r4, r7
 8000948:	2600      	movs	r6, #0
 800094a:	b11d      	cbz	r5, 8000954 <__udivmoddi4+0xa4>
 800094c:	40d4      	lsrs	r4, r2
 800094e:	2300      	movs	r3, #0
 8000950:	e9c5 4300 	strd	r4, r3, [r5]
 8000954:	4631      	mov	r1, r6
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	428b      	cmp	r3, r1
 800095c:	d909      	bls.n	8000972 <__udivmoddi4+0xc2>
 800095e:	2d00      	cmp	r5, #0
 8000960:	f000 80ef 	beq.w	8000b42 <__udivmoddi4+0x292>
 8000964:	2600      	movs	r6, #0
 8000966:	e9c5 0100 	strd	r0, r1, [r5]
 800096a:	4630      	mov	r0, r6
 800096c:	4631      	mov	r1, r6
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	fab3 f683 	clz	r6, r3
 8000976:	2e00      	cmp	r6, #0
 8000978:	d14a      	bne.n	8000a10 <__udivmoddi4+0x160>
 800097a:	428b      	cmp	r3, r1
 800097c:	d302      	bcc.n	8000984 <__udivmoddi4+0xd4>
 800097e:	4282      	cmp	r2, r0
 8000980:	f200 80f9 	bhi.w	8000b76 <__udivmoddi4+0x2c6>
 8000984:	1a84      	subs	r4, r0, r2
 8000986:	eb61 0303 	sbc.w	r3, r1, r3
 800098a:	2001      	movs	r0, #1
 800098c:	469e      	mov	lr, r3
 800098e:	2d00      	cmp	r5, #0
 8000990:	d0e0      	beq.n	8000954 <__udivmoddi4+0xa4>
 8000992:	e9c5 4e00 	strd	r4, lr, [r5]
 8000996:	e7dd      	b.n	8000954 <__udivmoddi4+0xa4>
 8000998:	b902      	cbnz	r2, 800099c <__udivmoddi4+0xec>
 800099a:	deff      	udf	#255	; 0xff
 800099c:	fab2 f282 	clz	r2, r2
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	f040 8092 	bne.w	8000aca <__udivmoddi4+0x21a>
 80009a6:	eba1 010c 	sub.w	r1, r1, ip
 80009aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ae:	fa1f fe8c 	uxth.w	lr, ip
 80009b2:	2601      	movs	r6, #1
 80009b4:	0c20      	lsrs	r0, r4, #16
 80009b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ba:	fb07 1113 	mls	r1, r7, r3, r1
 80009be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c2:	fb0e f003 	mul.w	r0, lr, r3
 80009c6:	4288      	cmp	r0, r1
 80009c8:	d908      	bls.n	80009dc <__udivmoddi4+0x12c>
 80009ca:	eb1c 0101 	adds.w	r1, ip, r1
 80009ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80009d2:	d202      	bcs.n	80009da <__udivmoddi4+0x12a>
 80009d4:	4288      	cmp	r0, r1
 80009d6:	f200 80cb 	bhi.w	8000b70 <__udivmoddi4+0x2c0>
 80009da:	4643      	mov	r3, r8
 80009dc:	1a09      	subs	r1, r1, r0
 80009de:	b2a4      	uxth	r4, r4
 80009e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e4:	fb07 1110 	mls	r1, r7, r0, r1
 80009e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009ec:	fb0e fe00 	mul.w	lr, lr, r0
 80009f0:	45a6      	cmp	lr, r4
 80009f2:	d908      	bls.n	8000a06 <__udivmoddi4+0x156>
 80009f4:	eb1c 0404 	adds.w	r4, ip, r4
 80009f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fc:	d202      	bcs.n	8000a04 <__udivmoddi4+0x154>
 80009fe:	45a6      	cmp	lr, r4
 8000a00:	f200 80bb 	bhi.w	8000b7a <__udivmoddi4+0x2ca>
 8000a04:	4608      	mov	r0, r1
 8000a06:	eba4 040e 	sub.w	r4, r4, lr
 8000a0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a0e:	e79c      	b.n	800094a <__udivmoddi4+0x9a>
 8000a10:	f1c6 0720 	rsb	r7, r6, #32
 8000a14:	40b3      	lsls	r3, r6
 8000a16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000a22:	fa01 f306 	lsl.w	r3, r1, r6
 8000a26:	431c      	orrs	r4, r3
 8000a28:	40f9      	lsrs	r1, r7
 8000a2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000a32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a36:	0c20      	lsrs	r0, r4, #16
 8000a38:	fa1f fe8c 	uxth.w	lr, ip
 8000a3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000a40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a44:	fb08 f00e 	mul.w	r0, r8, lr
 8000a48:	4288      	cmp	r0, r1
 8000a4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000a4e:	d90b      	bls.n	8000a68 <__udivmoddi4+0x1b8>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a58:	f080 8088 	bcs.w	8000b6c <__udivmoddi4+0x2bc>
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	f240 8085 	bls.w	8000b6c <__udivmoddi4+0x2bc>
 8000a62:	f1a8 0802 	sub.w	r8, r8, #2
 8000a66:	4461      	add	r1, ip
 8000a68:	1a09      	subs	r1, r1, r0
 8000a6a:	b2a4      	uxth	r4, r4
 8000a6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a70:	fb09 1110 	mls	r1, r9, r0, r1
 8000a74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a7c:	458e      	cmp	lr, r1
 8000a7e:	d908      	bls.n	8000a92 <__udivmoddi4+0x1e2>
 8000a80:	eb1c 0101 	adds.w	r1, ip, r1
 8000a84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a88:	d26c      	bcs.n	8000b64 <__udivmoddi4+0x2b4>
 8000a8a:	458e      	cmp	lr, r1
 8000a8c:	d96a      	bls.n	8000b64 <__udivmoddi4+0x2b4>
 8000a8e:	3802      	subs	r0, #2
 8000a90:	4461      	add	r1, ip
 8000a92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a96:	fba0 9402 	umull	r9, r4, r0, r2
 8000a9a:	eba1 010e 	sub.w	r1, r1, lr
 8000a9e:	42a1      	cmp	r1, r4
 8000aa0:	46c8      	mov	r8, r9
 8000aa2:	46a6      	mov	lr, r4
 8000aa4:	d356      	bcc.n	8000b54 <__udivmoddi4+0x2a4>
 8000aa6:	d053      	beq.n	8000b50 <__udivmoddi4+0x2a0>
 8000aa8:	b15d      	cbz	r5, 8000ac2 <__udivmoddi4+0x212>
 8000aaa:	ebb3 0208 	subs.w	r2, r3, r8
 8000aae:	eb61 010e 	sbc.w	r1, r1, lr
 8000ab2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ab6:	fa22 f306 	lsr.w	r3, r2, r6
 8000aba:	40f1      	lsrs	r1, r6
 8000abc:	431f      	orrs	r7, r3
 8000abe:	e9c5 7100 	strd	r7, r1, [r5]
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	f1c2 0320 	rsb	r3, r2, #32
 8000ace:	40d8      	lsrs	r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ad8:	4091      	lsls	r1, r2
 8000ada:	4301      	orrs	r1, r0
 8000adc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae0:	fa1f fe8c 	uxth.w	lr, ip
 8000ae4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ae8:	fb07 3610 	mls	r6, r7, r0, r3
 8000aec:	0c0b      	lsrs	r3, r1, #16
 8000aee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000af2:	fb00 f60e 	mul.w	r6, r0, lr
 8000af6:	429e      	cmp	r6, r3
 8000af8:	fa04 f402 	lsl.w	r4, r4, r2
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x260>
 8000afe:	eb1c 0303 	adds.w	r3, ip, r3
 8000b02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b06:	d22f      	bcs.n	8000b68 <__udivmoddi4+0x2b8>
 8000b08:	429e      	cmp	r6, r3
 8000b0a:	d92d      	bls.n	8000b68 <__udivmoddi4+0x2b8>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1b9b      	subs	r3, r3, r6
 8000b12:	b289      	uxth	r1, r1
 8000b14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b18:	fb07 3316 	mls	r3, r7, r6, r3
 8000b1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b20:	fb06 f30e 	mul.w	r3, r6, lr
 8000b24:	428b      	cmp	r3, r1
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x28a>
 8000b28:	eb1c 0101 	adds.w	r1, ip, r1
 8000b2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b30:	d216      	bcs.n	8000b60 <__udivmoddi4+0x2b0>
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d914      	bls.n	8000b60 <__udivmoddi4+0x2b0>
 8000b36:	3e02      	subs	r6, #2
 8000b38:	4461      	add	r1, ip
 8000b3a:	1ac9      	subs	r1, r1, r3
 8000b3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b40:	e738      	b.n	80009b4 <__udivmoddi4+0x104>
 8000b42:	462e      	mov	r6, r5
 8000b44:	4628      	mov	r0, r5
 8000b46:	e705      	b.n	8000954 <__udivmoddi4+0xa4>
 8000b48:	4606      	mov	r6, r0
 8000b4a:	e6e3      	b.n	8000914 <__udivmoddi4+0x64>
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	e6f8      	b.n	8000942 <__udivmoddi4+0x92>
 8000b50:	454b      	cmp	r3, r9
 8000b52:	d2a9      	bcs.n	8000aa8 <__udivmoddi4+0x1f8>
 8000b54:	ebb9 0802 	subs.w	r8, r9, r2
 8000b58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b5c:	3801      	subs	r0, #1
 8000b5e:	e7a3      	b.n	8000aa8 <__udivmoddi4+0x1f8>
 8000b60:	4646      	mov	r6, r8
 8000b62:	e7ea      	b.n	8000b3a <__udivmoddi4+0x28a>
 8000b64:	4620      	mov	r0, r4
 8000b66:	e794      	b.n	8000a92 <__udivmoddi4+0x1e2>
 8000b68:	4640      	mov	r0, r8
 8000b6a:	e7d1      	b.n	8000b10 <__udivmoddi4+0x260>
 8000b6c:	46d0      	mov	r8, sl
 8000b6e:	e77b      	b.n	8000a68 <__udivmoddi4+0x1b8>
 8000b70:	3b02      	subs	r3, #2
 8000b72:	4461      	add	r1, ip
 8000b74:	e732      	b.n	80009dc <__udivmoddi4+0x12c>
 8000b76:	4630      	mov	r0, r6
 8000b78:	e709      	b.n	800098e <__udivmoddi4+0xde>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	e742      	b.n	8000a06 <__udivmoddi4+0x156>

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>:

// Create Serial Buffer with UART2:
BufferedSerial buff_serial(huart3);

// Constructor:
BufferedSerial::BufferedSerial(UART_HandleTypeDef &huart_)
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  : huart(huart_) {}
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb2:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_ZN14BufferedSerial4initEv>:

// Init:
void BufferedSerial::init(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  reset_rx_buffer();
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f000 f91f 	bl	8000e10 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_ZN14BufferedSerial4readEv>:

// Read new char in RX buffer:
int BufferedSerial::read(void) {
 8000bda:	b480      	push	{r7}
 8000bdc:	b085      	sub	sp, #20
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  // Get DMA head:
  uint16_t dma_head = (RX_BUF_SIZE - huart.hdmarx->Instance->NDTR) & rx_buf_mask;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bf8:	81fb      	strh	r3, [r7, #14]

  // Quit if no new character:
  if (dma_head == rx_tail) return -1;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000c00:	89fa      	ldrh	r2, [r7, #14]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d102      	bne.n	8000c0c <_ZN14BufferedSerial4readEv+0x32>
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e016      	b.n	8000c3a <_ZN14BufferedSerial4readEv+0x60>

  // Get next char in buffer:
  int c = (int) rx_buf[rx_tail++];
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	b291      	uxth	r1, r2
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	f8a2 1804 	strh.w	r1, [r2, #2052]	; 0x804
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	791b      	ldrb	r3, [r3, #4]
 8000c24:	60bb      	str	r3, [r7, #8]

  // Wrap around if rx_tail > RX_BUF_SIZE:
  rx_tail &= rx_buf_mask;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804

  return c;
 8000c38:	68bb      	ldr	r3, [r7, #8]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_ZN14BufferedSerial5writeEPKhi>:

// Prepare data and send it:
void BufferedSerial::write(const uint8_t *data, const int length) {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
  // If data can fit at the end of the buffer:
  if (tx_head + length < TX_BUF_SIZE) {
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000c58:	461a      	mov	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c62:	da25      	bge.n	8000cb0 <_ZN14BufferedSerial5writeEPKhi+0x6a>
    memcpy(&(tx_buf[tx_head]), data, length);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	4413      	add	r3, r2
 8000c72:	3304      	adds	r3, #4
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f006 fa95 	bl	80071a8 <memcpy>
    tx_head += length; // ) & tx_buf_mask
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4413      	add	r3, r2
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
    if (tx_head > tx_end) tx_end = tx_head; // Avoids "wrong checksum for topic id and msg" in rosserial logs
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	; 0x80a
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d921      	bls.n	8000ce6 <_ZN14BufferedSerial5writeEPKhi+0xa0>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
 8000cae:	e01a      	b.n	8000ce6 <_ZN14BufferedSerial5writeEPKhi+0xa0>
  }
  // Else data is copied at the beginning of TX buffer:
  else {
    memcpy(tx_buf, data, length);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f006 fa74 	bl	80071a8 <memcpy>
    if (tx_head > tx_tail) tx_end = tx_head; // Avoids tx_end > tx_tail
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d905      	bls.n	8000cdc <_ZN14BufferedSerial5writeEPKhi+0x96>
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
    tx_head = length;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
  }

  // Send data:
  flush_tx_buffer();
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 f804 	bl	8000cf4 <_ZN14BufferedSerial15flush_tx_bufferEv>
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_ZN14BufferedSerial15flush_tx_bufferEv>:

// Send data:
void BufferedSerial::flush_tx_buffer(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  static bool mutex = false;

  // Reset indexes if they are at the same position:
  if (tx_head != 0 && tx_head == tx_tail) {   // Can be removed (just for better memory management)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00f      	beq.n	8000d26 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d107      	bne.n	8000d26 <_ZN14BufferedSerial15flush_tx_bufferEv+0x32>
     tx_head = 0;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
     tx_tail = 0;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
   }

  // Quit if UART not ready to transmit data or no data to send:
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b20      	cmp	r3, #32
 8000d32:	d10b      	bne.n	8000d4c <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d003      	beq.n	8000d4c <_ZN14BufferedSerial15flush_tx_bufferEv+0x58>
 8000d44:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5c>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <_ZN14BufferedSerial15flush_tx_bufferEv+0x5e>
 8000d50:	2300      	movs	r3, #0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d156      	bne.n	8000e04 <_ZN14BufferedSerial15flush_tx_bufferEv+0x110>
  mutex = true;
 8000d56:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]

  // Reset flush index if already sent complete TX buffer:
  if (tx_tail == tx_end) tx_tail = 0;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	; 0x80a
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d103      	bne.n	8000d74 <_ZN14BufferedSerial15flush_tx_bufferEv+0x80>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808

  // Send data behind head:
  if (tx_tail < tx_head) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f8b3 2808 	ldrh.w	r2, [r3, #2056]	; 0x808
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d21c      	bcs.n	8000dbe <_ZN14BufferedSerial15flush_tx_bufferEv+0xca>
    uint16_t length = tx_head - tx_tail;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	3304      	adds	r3, #4
 8000da8:	89ba      	ldrh	r2, [r7, #12]
 8000daa:	4619      	mov	r1, r3
 8000dac:	f005 f828 	bl	8005e00 <HAL_UART_Transmit_DMA>
    tx_tail = tx_head;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f8b3 2806 	ldrh.w	r2, [r3, #2054]	; 0x806
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
 8000dbc:	e01e      	b.n	8000dfc <_ZN14BufferedSerial15flush_tx_bufferEv+0x108>
  }
  // Else end the buffer before resetting tail index:
  else {
    uint16_t length = tx_end - tx_tail;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f8b3 280a 	ldrh.w	r2, [r3, #2058]	; 0x80a
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	81fb      	strh	r3, [r7, #14]
    HAL_UART_Transmit_DMA(&huart, &(tx_buf[tx_tail]), length);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	3304      	adds	r3, #4
 8000de2:	89fa      	ldrh	r2, [r7, #14]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f005 f80b 	bl	8005e00 <HAL_UART_Transmit_DMA>

    // Reset indexes:
    tx_end = TX_BUF_SIZE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df0:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
    tx_tail = 0;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
  }

  mutex = false;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <_ZN14BufferedSerial15flush_tx_bufferEv+0x118>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e000      	b.n	8000e06 <_ZN14BufferedSerial15flush_tx_bufferEv+0x112>
  if (huart.gState != HAL_UART_STATE_READY || tx_head == tx_tail || mutex) return;
 8000e04:	bf00      	nop
}
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200008b8 	.word	0x200008b8

08000e10 <_ZN14BufferedSerial15reset_rx_bufferEv>:


// Reset DMA to the beginning of the RX buffer:
inline void BufferedSerial::reset_rx_buffer(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart, rx_buf, RX_BUF_SIZE);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e24:	4619      	mov	r1, r3
 8000e26:	f005 f869 	bl	8005efc <HAL_UART_Receive_DMA>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_ZN14BufferedSerial10get_handleEv>:

// Get UART Handle:
UART_HandleTypeDef* const BufferedSerial::get_handle(void) { return &huart; }
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <HAL_UART_TxCpltCallback>:


// DMA callbacks:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart) {
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  // Comparing pointers: (remove equality if only one UART is used)
  if (huart->Instance == buff_serial.get_handle()->Instance) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681c      	ldr	r4, [r3, #0]
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <HAL_UART_TxCpltCallback+0x34>)
 8000e5a:	f7ff ffea 	bl	8000e32 <_ZN14BufferedSerial10get_handleEv>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	429c      	cmp	r4, r3
 8000e64:	bf0c      	ite	eq
 8000e66:	2301      	moveq	r3, #1
 8000e68:	2300      	movne	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <HAL_UART_TxCpltCallback+0x2a>
    buff_serial.flush_tx_buffer();
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <HAL_UART_TxCpltCallback+0x34>)
 8000e72:	f7ff ff3f 	bl	8000cf4 <_ZN14BufferedSerial15flush_tx_bufferEv>
  }
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000ac 	.word	0x200000ac

08000e84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  buff_serial.reset_rx_buffer();  // Can be commented if DMA mode for RX is Circular
 8000e8c:	4803      	ldr	r0, [pc, #12]	; (8000e9c <HAL_UART_RxCpltCallback+0x18>)
 8000e8e:	f7ff ffbf 	bl	8000e10 <_ZN14BufferedSerial15reset_rx_bufferEv>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200000ac 	.word	0x200000ac

08000ea0 <_Z41__static_initialization_and_destruction_0ii>:
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d108      	bne.n	8000ec2 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d103      	bne.n	8000ec2 <_Z41__static_initialization_and_destruction_0ii+0x22>
BufferedSerial buff_serial(huart3);
 8000eba:	4904      	ldr	r1, [pc, #16]	; (8000ecc <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000ebe:	f7ff fe61 	bl	8000b84 <_ZN14BufferedSerialC1ER20__UART_HandleTypeDef>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000964 	.word	0x20000964
 8000ed0:	200000ac 	.word	0x200000ac

08000ed4 <_GLOBAL__sub_I_buff_serial>:
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff ffdf 	bl	8000ea0 <_Z41__static_initialization_and_destruction_0ii>
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	0a5a      	lsrs	r2, r3, #9
 8000ef4:	490f      	ldr	r1, [pc, #60]	; (8000f34 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ef6:	fba1 1202 	umull	r1, r2, r1, r2
 8000efa:	09d2      	lsrs	r2, r2, #7
 8000efc:	490e      	ldr	r1, [pc, #56]	; (8000f38 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000efe:	fb01 f202 	mul.w	r2, r1, r2
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	0a5b      	lsrs	r3, r3, #9
 8000f0c:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	09db      	lsrs	r3, r3, #7
 8000f14:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	441a      	add	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	00044b83 	.word	0x00044b83
 8000f38:	3b9aca00 	.word	0x3b9aca00

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f002 fd80 	bl	8003a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 f828 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f000 f95c 	bl	8001204 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4c:	f000 f91c 	bl	8001188 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f50:	f000 f8f0 	bl	8001134 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000f54:	f000 f88e 	bl	8001074 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, XY, 2);
 8000f58:	2202      	movs	r2, #2
 8000f5a:	490b      	ldr	r1, [pc, #44]	; (8000f88 <main+0x4c>)
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <main+0x50>)
 8000f5e:	f002 fe4b 	bl	8003bf8 <HAL_ADC_Start_DMA>

  setup();
 8000f62:	f001 fbe5 	bl	8002730 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  x_val = XY[0];
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <main+0x4c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <main+0x54>)
 8000f6c:	6013      	str	r3, [r2, #0]
	  y_val = XY[1];
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <main+0x4c>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <main+0x58>)
 8000f74:	6013      	str	r3, [r2, #0]
	  loop(x_val, y_val);
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <main+0x54>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <main+0x58>)
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fbf9 	bl	8002778 <loop>
  {
 8000f86:	e7ee      	b.n	8000f66 <main+0x2a>
 8000f88:	20000a68 	.word	0x20000a68
 8000f8c:	200008bc 	.word	0x200008bc
 8000f90:	20000a70 	.word	0x20000a70
 8000f94:	20000a74 	.word	0x20000a74

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2234      	movs	r2, #52	; 0x34
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 f90c 	bl	80071c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <SystemClock_Config+0xd4>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a29      	ldr	r2, [pc, #164]	; (800106c <SystemClock_Config+0xd4>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <SystemClock_Config+0xd4>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <SystemClock_Config+0xd8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fe4:	4a22      	ldr	r2, [pc, #136]	; (8001070 <SystemClock_Config+0xd8>)
 8000fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <SystemClock_Config+0xd8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2310      	movs	r3, #16
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001008:	2300      	movs	r3, #0
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800100c:	2310      	movs	r3, #16
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001010:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001014:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001016:	2304      	movs	r3, #4
 8001018:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800101a:	2302      	movs	r3, #2
 800101c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4618      	mov	r0, r3
 8001028:	f004 fbfe 	bl	8005828 <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001032:	f000 f97f 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
 8001038:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103a:	2302      	movs	r3, #2
 800103c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	2102      	movs	r1, #2
 8001052:	4618      	mov	r0, r3
 8001054:	f004 f89e 	bl	8005194 <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800105e:	f000 f969 	bl	8001334 <Error_Handler>
  }
}
 8001062:	bf00      	nop
 8001064:	3750      	adds	r7, #80	; 0x50
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40007000 	.word	0x40007000

08001074 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	463b      	mov	r3, r7
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_ADC1_Init+0xb4>)
 8001088:	4a28      	ldr	r2, [pc, #160]	; (800112c <MX_ADC1_Init+0xb8>)
 800108a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <MX_ADC1_Init+0xb4>)
 800108e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001092:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <MX_ADC1_Init+0xb4>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <MX_ADC1_Init+0xb4>)
 800109c:	2201      	movs	r2, #1
 800109e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <MX_ADC1_Init+0xb4>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <MX_ADC1_Init+0xb4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <MX_ADC1_Init+0xb4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_ADC1_Init+0xb4>)
 80010b6:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <MX_ADC1_Init+0xbc>)
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_ADC1_Init+0xb4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_ADC1_Init+0xb4>)
 80010c2:	2202      	movs	r2, #2
 80010c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_ADC1_Init+0xb4>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_ADC1_Init+0xb4>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d4:	4814      	ldr	r0, [pc, #80]	; (8001128 <MX_ADC1_Init+0xb4>)
 80010d6:	f002 fd4b 	bl	8003b70 <HAL_ADC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010e0:	f000 f928 	bl	8001334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80010ec:	2304      	movs	r3, #4
 80010ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <MX_ADC1_Init+0xb4>)
 80010f6:	f002 fead 	bl	8003e54 <HAL_ADC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001100:	f000 f918 	bl	8001334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001104:	2301      	movs	r3, #1
 8001106:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001108:	2302      	movs	r3, #2
 800110a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_ADC1_Init+0xb4>)
 8001112:	f002 fe9f 	bl	8003e54 <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800111c:	f000 f90a 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200008bc 	.word	0x200008bc
 800112c:	40012000 	.word	0x40012000
 8001130:	0f000001 	.word	0x0f000001

08001134 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART3_UART_Init+0x4c>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_USART3_UART_Init+0x50>)
 800113c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_USART3_UART_Init+0x4c>)
 8001140:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001144:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART3_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USART3_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART3_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USART3_UART_Init+0x4c>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART3_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_USART3_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART3_UART_Init+0x4c>)
 800116c:	f004 fdfa 	bl	8005d64 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001176:	f000 f8dd 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000964 	.word	0x20000964
 8001184:	40004800 	.word	0x40004800

08001188 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_DMA_Init+0x78>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <MX_DMA_Init+0x78>)
 8001198:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_DMA_Init+0x78>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_DMA_Init+0x78>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <MX_DMA_Init+0x78>)
 80011b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_DMA_Init+0x78>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	200c      	movs	r0, #12
 80011cc:	f003 f9cd 	bl	800456a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011d0:	200c      	movs	r0, #12
 80011d2:	f003 f9e6 	bl	80045a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	200e      	movs	r0, #14
 80011dc:	f003 f9c5 	bl	800456a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80011e0:	200e      	movs	r0, #14
 80011e2:	f003 f9de 	bl	80045a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2038      	movs	r0, #56	; 0x38
 80011ec:	f003 f9bd 	bl	800456a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f0:	2038      	movs	r0, #56	; 0x38
 80011f2:	f003 f9d6 	bl	80045a2 <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b41      	ldr	r3, [pc, #260]	; (8001324 <MX_GPIO_Init+0x120>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a40      	ldr	r2, [pc, #256]	; (8001324 <MX_GPIO_Init+0x120>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <MX_GPIO_Init+0x120>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b3a      	ldr	r3, [pc, #232]	; (8001324 <MX_GPIO_Init+0x120>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a39      	ldr	r2, [pc, #228]	; (8001324 <MX_GPIO_Init+0x120>)
 8001240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b37      	ldr	r3, [pc, #220]	; (8001324 <MX_GPIO_Init+0x120>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b33      	ldr	r3, [pc, #204]	; (8001324 <MX_GPIO_Init+0x120>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a32      	ldr	r2, [pc, #200]	; (8001324 <MX_GPIO_Init+0x120>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <MX_GPIO_Init+0x120>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <MX_GPIO_Init+0x120>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <MX_GPIO_Init+0x120>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <MX_GPIO_Init+0x120>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800128a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001290:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4821      	ldr	r0, [pc, #132]	; (8001328 <MX_GPIO_Init+0x124>)
 80012a2:	f003 fd9b 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012a6:	230c      	movs	r3, #12
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b6:	2307      	movs	r3, #7
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	481a      	ldr	r0, [pc, #104]	; (800132c <MX_GPIO_Init+0x128>)
 80012c2:	f003 fd8b 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : e_stop_Pin */
  GPIO_InitStruct.Pin = e_stop_Pin;
 80012c6:	2320      	movs	r3, #32
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012ca:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(e_stop_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4814      	ldr	r0, [pc, #80]	; (800132c <MX_GPIO_Init+0x128>)
 80012dc:	f003 fd7e 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_pin_Pin */
  GPIO_InitStruct.Pin = joy_pin_Pin;
 80012e0:	2308      	movs	r3, #8
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012e4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_pin_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	480e      	ldr	r0, [pc, #56]	; (8001330 <MX_GPIO_Init+0x12c>)
 80012f6:	f003 fd71 	bl	8004ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2009      	movs	r0, #9
 8001300:	f003 f933 	bl	800456a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001304:	2009      	movs	r0, #9
 8001306:	f003 f94c 	bl	80045a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2017      	movs	r0, #23
 8001310:	f003 f92b 	bl	800456a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001314:	2017      	movs	r0, #23
 8001316:	f003 f944 	bl	80045a2 <HAL_NVIC_EnableIRQ>

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40020800 	.word	0x40020800
 800132c:	40020000 	.word	0x40020000
 8001330:	40020400 	.word	0x40020400

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <_ZN13STM32HardwareC1Ev>:
// Create Serial Buffer with UART2:
extern BufferedSerial buff_serial;

class STM32Hardware {
 public:
  STM32Hardware() : serial(&buff_serial) {}
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <_ZN13STM32HardwareC1Ev+0x1c>)
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	200000ac 	.word	0x200000ac

08001360 <_ZN13STM32Hardware4initEv>:

  // Any initialization code necessary to use the serial port:
  void init() { serial->init(); }
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fc29 	bl	8000bc4 <_ZN14BufferedSerial4initEv>
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_ZN13STM32Hardware4readEv>:

  // Read a byte from the serial port. -1 = failure:
  int read() { return serial->read(); }
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fc27 	bl	8000bda <_ZN14BufferedSerial4readEv>
 800138c:	4603      	mov	r3, r0
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_ZN13STM32Hardware5writeEPhi>:

  // Write data to the connection to ROS:
  void write(uint8_t* data, int length) { serial->write(data, length); }
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fc4b 	bl	8000c46 <_ZN14BufferedSerial5writeEPKhi>
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_ZN13STM32Hardware4timeEv>:

  // Returns milliseconds since start of program:
  unsigned long time() { return HAL_GetTick(); };
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	f002 fba6 	bl	8003b10 <HAL_GetTick>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80013ce:	b480      	push	{r7}
 80013d0:	b087      	sub	sp, #28
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 80013da:	463b      	mov	r3, r7
 80013dc:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	15db      	asrs	r3, r3, #23
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80013f4:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	607a      	str	r2, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	0159      	lsls	r1, r3, #5
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	b2ca      	uxtb	r2, r1
 8001426:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	10d9      	asrs	r1, r3, #3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	12d9      	asrs	r1, r3, #11
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	b2ca      	uxtb	r2, r1
 8001442:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	b25a      	sxtb	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	14db      	asrs	r3, r3, #19
 800144e:	b25b      	sxtb	r3, r3
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	b25b      	sxtb	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b259      	sxtb	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	b2ca      	uxtb	r2, r1
 8001462:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	111b      	asrs	r3, r3, #4
 8001468:	b2da      	uxtb	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	1c59      	adds	r1, r3, #1
 800146e:	6079      	str	r1, [r7, #4]
 8001470:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001478:	edd7 7a00 	vldr	s15, [r7]
 800147c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	d508      	bpl.n	8001498 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3b01      	subs	r3, #1
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001498:	2308      	movs	r3, #8
  }
 800149a:	4618      	mov	r0, r3
 800149c:	371c      	adds	r7, #28
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 80014a6:	b480      	push	{r7}
 80014a8:	b085      	sub	sp, #20
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3303      	adds	r3, #3
 80014b8:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f003 0207 	and.w	r2, r3, #7
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	00da      	lsls	r2, r3, #3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	431a      	orrs	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	02da      	lsls	r2, r3, #11
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	04db      	lsls	r3, r3, #19
 8001500:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8001504:	431a      	orrs	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	4313      	orrs	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9e>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800153c:	05db      	lsls	r3, r3, #23
 800153e:	431a      	orrs	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	431a      	orrs	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	601a      	str	r2, [r3, #0]

    return 8;
 800155c:	2308      	movs	r3, #8
  }
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_ZN3ros3MsgC1Ev>:
class Msg
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <_ZN3ros3MsgC1Ev+0x1c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	08007858 	.word	0x08007858

080015ac <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
      data()
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ffe8 	bl	800158c <_ZN3ros3MsgC1Ev>
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3304      	adds	r3, #4
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ffcf 	bl	800156a <_ZN3ros4TimeC1Ev>
    {
    }
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	08007840 	.word	0x08007840

080015dc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6859      	ldr	r1, [r3, #4]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	b2ca      	uxtb	r2, r1
 80015f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	0a19      	lsrs	r1, r3, #8
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3301      	adds	r3, #1
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	4413      	add	r3, r2
 8001606:	b2ca      	uxtb	r2, r1
 8001608:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	0c19      	lsrs	r1, r3, #16
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3302      	adds	r3, #2
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	4413      	add	r3, r2
 8001618:	b2ca      	uxtb	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	0e19      	lsrs	r1, r3, #24
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3303      	adds	r3, #3
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	4413      	add	r3, r2
 800162a:	b2ca      	uxtb	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	3304      	adds	r3, #4
 8001632:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6899      	ldr	r1, [r3, #8]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	4413      	add	r3, r2
 800163e:	b2ca      	uxtb	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	0a19      	lsrs	r1, r3, #8
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3301      	adds	r3, #1
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	4413      	add	r3, r2
 8001650:	b2ca      	uxtb	r2, r1
 8001652:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	0c19      	lsrs	r1, r3, #16
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3302      	adds	r3, #2
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	4413      	add	r3, r2
 8001662:	b2ca      	uxtb	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	0e19      	lsrs	r1, r3, #24
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3303      	adds	r3, #3
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	4413      	add	r3, r2
 8001674:	b2ca      	uxtb	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3304      	adds	r3, #4
 800167c:	60fb      	str	r3, [r7, #12]
      return offset;
 800167e:	68fb      	ldr	r3, [r7, #12]
    }
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3301      	adds	r3, #1
 80016b0:	6839      	ldr	r1, [r7, #0]
 80016b2:	440b      	add	r3, r1
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3302      	adds	r3, #2
 80016c6:	6839      	ldr	r1, [r7, #0]
 80016c8:	440b      	add	r3, r1
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	041b      	lsls	r3, r3, #16
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3303      	adds	r3, #3
 80016dc:	6839      	ldr	r1, [r7, #0]
 80016de:	440b      	add	r3, r1
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	061b      	lsls	r3, r3, #24
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3304      	adds	r3, #4
 80016ee:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	440b      	add	r3, r1
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3302      	adds	r3, #2
 800171c:	6839      	ldr	r1, [r7, #0]
 800171e:	440b      	add	r3, r1
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3303      	adds	r3, #3
 8001732:	6839      	ldr	r1, [r7, #0]
 8001734:	440b      	add	r3, r1
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3304      	adds	r3, #4
 8001744:	60fb      	str	r3, [r7, #12]
     return offset;
 8001746:	68fb      	ldr	r3, [r7, #12]
    }
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	080074f0 	.word	0x080074f0

08001770 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	08007500 	.word	0x08007500

0800178c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fef8 	bl	800158c <_ZN3ros3MsgC1Ev>
 800179c:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	809a      	strh	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
    {
    }
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	08007828 	.word	0x08007828
 80017d0:	08007524 	.word	0x08007524

080017d4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	8899      	ldrh	r1, [r3, #4]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	b2ca      	uxtb	r2, r1
 80017ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	889b      	ldrh	r3, [r3, #4]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	b299      	uxth	r1, r3
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	3301      	adds	r3, #1
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	b2ca      	uxtb	r2, r1
 8001802:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	3302      	adds	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fcf8 	bl	8000204 <strlen>
 8001814:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	4413      	add	r3, r2
 800181c:	69b9      	ldr	r1, [r7, #24]
 800181e:	4618      	mov	r0, r3
 8001820:	f001 f8a8 	bl	8002974 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	3304      	adds	r3, #4
 8001828:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	18d0      	adds	r0, r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4619      	mov	r1, r3
 8001838:	f005 fcb6 	bl	80071a8 <memcpy>
      offset += length_topic_name;
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4413      	add	r3, r2
 8001842:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fcdb 	bl	8000204 <strlen>
 800184e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	4413      	add	r3, r2
 8001856:	6979      	ldr	r1, [r7, #20]
 8001858:	4618      	mov	r0, r3
 800185a:	f001 f88b 	bl	8002974 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	18d0      	adds	r0, r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4619      	mov	r1, r3
 8001872:	f005 fc99 	bl	80071a8 <memcpy>
      offset += length_message_type;
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	4413      	add	r3, r2
 800187c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fcbe 	bl	8000204 <strlen>
 8001888:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4413      	add	r3, r2
 8001890:	6939      	ldr	r1, [r7, #16]
 8001892:	4618      	mov	r0, r3
 8001894:	f001 f86e 	bl	8002974 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	3304      	adds	r3, #4
 800189c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	18d0      	adds	r0, r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4619      	mov	r1, r3
 80018ac:	f005 fc7c 	bl	80071a8 <memcpy>
      offset += length_md5sum;
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4413      	add	r3, r2
 80018b6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	b2ca      	uxtb	r2, r1
 80018c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	0a19      	lsrs	r1, r3, #8
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3301      	adds	r3, #1
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	0c19      	lsrs	r1, r3, #16
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3302      	adds	r3, #2
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	b2ca      	uxtb	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	0e19      	lsrs	r1, r3, #24
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3303      	adds	r3, #3
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	4413      	add	r3, r2
 80018f6:	b2ca      	uxtb	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	61fb      	str	r3, [r7, #28]
      return offset;
 8001900:	69fb      	ldr	r3, [r7, #28]
    }
 8001902:	4618      	mov	r0, r3
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800190a:	b580      	push	{r7, lr}
 800190c:	b08a      	sub	sp, #40	; 0x28
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	4413      	add	r3, r2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b29a      	uxth	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	889b      	ldrh	r3, [r3, #4]
 800192a:	b21a      	sxth	r2, r3
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	3301      	adds	r3, #1
 8001930:	6839      	ldr	r1, [r7, #0]
 8001932:	440b      	add	r3, r1
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21b      	sxth	r3, r3
 800193a:	4313      	orrs	r3, r2
 800193c:	b21b      	sxth	r3, r3
 800193e:	b29a      	uxth	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	3302      	adds	r3, #2
 8001948:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	441a      	add	r2, r3
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f001 f82a 	bl	80029b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	3304      	adds	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	4413      	add	r3, r2
 800196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196e:	429a      	cmp	r2, r3
 8001970:	d20c      	bcs.n	800198c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	441a      	add	r2, r3
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	3b01      	subs	r3, #1
 800197c:	6839      	ldr	r1, [r7, #0]
 800197e:	440b      	add	r3, r1
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	3301      	adds	r3, #1
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
 800198a:	e7ec      	b.n	8001966 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	4413      	add	r3, r2
 8001992:	3b01      	subs	r3, #1
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	4413      	add	r3, r2
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	3b01      	subs	r3, #1
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	441a      	add	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	4413      	add	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	441a      	add	r2, r3
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fff7 	bl	80029b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	3304      	adds	r3, #4
 80019c6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	623b      	str	r3, [r7, #32]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4413      	add	r3, r2
 80019d2:	6a3a      	ldr	r2, [r7, #32]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d20c      	bcs.n	80019f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	441a      	add	r2, r3
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	6839      	ldr	r1, [r7, #0]
 80019e4:	440b      	add	r3, r1
 80019e6:	7812      	ldrb	r2, [r2, #0]
 80019e8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	3301      	adds	r3, #1
 80019ee:	623b      	str	r3, [r7, #32]
 80019f0:	e7ec      	b.n	80019cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4413      	add	r3, r2
 80019f8:	3b01      	subs	r3, #1
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	441a      	add	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4413      	add	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	441a      	add	r2, r3
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 ffc4 	bl	80029b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d20c      	bcs.n	8001a58 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	441a      	add	r2, r3
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	6839      	ldr	r1, [r7, #0]
 8001a4a:	440b      	add	r3, r1
 8001a4c:	7812      	ldrb	r2, [r2, #0]
 8001a4e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	3301      	adds	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e7ec      	b.n	8001a32 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	441a      	add	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4413      	add	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	6839      	ldr	r1, [r7, #0]
 8001a86:	440a      	add	r2, r1
 8001a88:	7812      	ldrb	r2, [r2, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	3301      	adds	r3, #1
 8001a94:	6839      	ldr	r1, [r7, #0]
 8001a96:	440b      	add	r3, r1
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	6839      	ldr	r1, [r7, #0]
 8001aa8:	440b      	add	r3, r1
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	041b      	lsls	r3, r3, #16
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	3303      	adds	r3, #3
 8001ab8:	6839      	ldr	r1, [r7, #0]
 8001aba:	440b      	add	r3, r1
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	061b      	lsls	r3, r3, #24
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	3304      	adds	r3, #4
 8001ace:	61bb      	str	r3, [r7, #24]
     return offset;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
    }
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	08007528 	.word	0x08007528

08001af8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	08007544 	.word	0x08007544

08001b14 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fd34 	bl	800158c <_ZN3ros3MsgC1Ev>
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	711a      	strb	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001b34:	609a      	str	r2, [r3, #8]
    {
    }
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	08007810 	.word	0x08007810
 8001b44:	08007524 	.word	0x08007524

08001b48 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	7912      	ldrb	r2, [r2, #4]
 8001b60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3301      	adds	r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fb49 	bl	8000204 <strlen>
 8001b72:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	68b9      	ldr	r1, [r7, #8]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 fef9 	bl	8002974 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3304      	adds	r3, #4
 8001b86:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	18d0      	adds	r0, r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f005 fb07 	bl	80071a8 <memcpy>
      offset += length_msg;
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    }
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	441a      	add	r2, r3
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fee9 	bl	80029b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	3304      	adds	r3, #4
 8001be2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d20c      	bcs.n	8001c0e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	441a      	add	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	6839      	ldr	r1, [r7, #0]
 8001c00:	440b      	add	r3, r1
 8001c02:	7812      	ldrb	r2, [r2, #0]
 8001c04:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	e7ec      	b.n	8001be8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	3b01      	subs	r3, #1
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	441a      	add	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
     return offset;
 8001c32:	693b      	ldr	r3, [r7, #16]
    }
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	08007568 	.word	0x08007568

08001c58 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	0800757c 	.word	0x0800757c

08001c74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fc84 	bl	800158c <_ZN3ros3MsgC1Ev>
 8001c84:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	080077f8 	.word	0x080077f8

08001cbc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6859      	ldr	r1, [r3, #4]
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b2ca      	uxtb	r2, r1
 8001cd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	0a19      	lsrs	r1, r3, #8
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	b2ca      	uxtb	r2, r1
 8001ce8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	0c19      	lsrs	r1, r3, #16
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b2ca      	uxtb	r2, r1
 8001cfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	0e19      	lsrs	r1, r3, #24
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3303      	adds	r3, #3
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	b2ca      	uxtb	r2, r1
 8001d0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	3304      	adds	r3, #4
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	6a3a      	ldr	r2, [r7, #32]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d22b      	bcs.n	8001d7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001d30:	6939      	ldr	r1, [r7, #16]
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	b2ca      	uxtb	r2, r1
 8001d3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	0a19      	lsrs	r1, r3, #8
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	3301      	adds	r3, #1
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	b2ca      	uxtb	r2, r1
 8001d4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	0c19      	lsrs	r1, r3, #16
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	3302      	adds	r3, #2
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	b2ca      	uxtb	r2, r1
 8001d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	0e19      	lsrs	r1, r3, #24
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	3303      	adds	r3, #3
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	b2ca      	uxtb	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	3304      	adds	r3, #4
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	3301      	adds	r3, #1
 8001d76:	623b      	str	r3, [r7, #32]
 8001d78:	e7ce      	b.n	8001d18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6919      	ldr	r1, [r3, #16]
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	b2ca      	uxtb	r2, r1
 8001d86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	0a19      	lsrs	r1, r3, #8
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	3301      	adds	r3, #1
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	4413      	add	r3, r2
 8001d96:	b2ca      	uxtb	r2, r1
 8001d98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	0c19      	lsrs	r1, r3, #16
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	3302      	adds	r3, #2
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	b2ca      	uxtb	r2, r1
 8001daa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	0e19      	lsrs	r1, r3, #24
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	3303      	adds	r3, #3
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	4413      	add	r3, r2
 8001dba:	b2ca      	uxtb	r2, r1
 8001dbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d22b      	bcs.n	8001e2a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699a      	ldr	r2, [r3, #24]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001de0:	68f9      	ldr	r1, [r7, #12]
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	b2ca      	uxtb	r2, r1
 8001dea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	0a19      	lsrs	r1, r3, #8
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	3301      	adds	r3, #1
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	b2ca      	uxtb	r2, r1
 8001dfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	0c19      	lsrs	r1, r3, #16
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	3302      	adds	r3, #2
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	b2ca      	uxtb	r2, r1
 8001e0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	0e19      	lsrs	r1, r3, #24
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3303      	adds	r3, #3
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	b2ca      	uxtb	r2, r1
 8001e1a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	3304      	adds	r3, #4
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3301      	adds	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	e7ce      	b.n	8001dc8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69d9      	ldr	r1, [r3, #28]
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	b2ca      	uxtb	r2, r1
 8001e36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	0a19      	lsrs	r1, r3, #8
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	3301      	adds	r3, #1
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	b2ca      	uxtb	r2, r1
 8001e48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	0c19      	lsrs	r1, r3, #16
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	3302      	adds	r3, #2
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	b2ca      	uxtb	r2, r1
 8001e5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	0e19      	lsrs	r1, r3, #24
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	3303      	adds	r3, #3
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	b2ca      	uxtb	r2, r1
 8001e6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	3304      	adds	r3, #4
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d228      	bcs.n	8001ed4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe f9b8 	bl	8000204 <strlen>
 8001e94:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	6979      	ldr	r1, [r7, #20]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fd68 	bl	8002974 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	18d0      	adds	r0, r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f005 f972 	bl	80071a8 <memcpy>
      offset += length_stringsi;
 8001ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	4413      	add	r3, r2
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	e7d1      	b.n	8001e78 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b08e      	sub	sp, #56	; 0x38
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef8:	3301      	adds	r3, #1
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	6a3a      	ldr	r2, [r7, #32]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	4413      	add	r3, r2
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	6a3a      	ldr	r2, [r7, #32]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2e:	3304      	adds	r3, #4
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	6a3a      	ldr	r2, [r7, #32]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d90a      	bls.n	8001f52 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f005 f944 	bl	80071d4 <realloc>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a3a      	ldr	r2, [r7, #32]
 8001f56:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001f58:	2300      	movs	r3, #0
 8001f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d236      	bcs.n	8001fd4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f6e:	6839      	ldr	r1, [r7, #0]
 8001f70:	440a      	add	r2, r1
 8001f72:	7812      	ldrb	r2, [r2, #0]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	6839      	ldr	r1, [r7, #0]
 8001f80:	440b      	add	r3, r1
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8e:	3302      	adds	r3, #2
 8001f90:	6839      	ldr	r1, [r7, #0]
 8001f92:	440b      	add	r3, r1
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	440b      	add	r3, r1
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	4313      	orrs	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	3208      	adds	r2, #8
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	3301      	adds	r3, #1
 8001fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fd2:	e7c3      	b.n	8001f5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002004:	3303      	adds	r3, #3
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	061b      	lsls	r3, r3, #24
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	4313      	orrs	r3, r2
 8002012:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002016:	3304      	adds	r3, #4
 8002018:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	429a      	cmp	r2, r3
 8002022:	d90a      	bls.n	800203a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f005 f8d0 	bl	80071d4 <realloc>
 8002034:	4602      	mov	r2, r0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800204a:	429a      	cmp	r2, r3
 800204c:	d236      	bcs.n	80020bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002056:	6839      	ldr	r1, [r7, #0]
 8002058:	440a      	add	r2, r1
 800205a:	7812      	ldrb	r2, [r2, #0]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002064:	3301      	adds	r3, #1
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	440b      	add	r3, r1
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002076:	3302      	adds	r3, #2
 8002078:	6839      	ldr	r1, [r7, #0]
 800207a:	440b      	add	r3, r1
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	041b      	lsls	r3, r3, #16
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002088:	3303      	adds	r3, #3
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	440b      	add	r3, r1
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	061b      	lsls	r3, r3, #24
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800209c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209e:	3304      	adds	r3, #4
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	3214      	adds	r2, #20
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80020b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b6:	3301      	adds	r3, #1
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ba:	e7c3      	b.n	8002044 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80020c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c8:	3301      	adds	r3, #1
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	4413      	add	r3, r2
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80020d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020da:	3302      	adds	r3, #2
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80020ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ec:	3303      	adds	r3, #3
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4413      	add	r3, r2
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	3304      	adds	r3, #4
 8002100:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	429a      	cmp	r2, r3
 800210a:	d90a      	bls.n	8002122 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4619      	mov	r1, r3
 8002116:	4610      	mov	r0, r2
 8002118:	f005 f85c 	bl	80071d4 <realloc>
 800211c:	4602      	mov	r2, r0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002132:	429a      	cmp	r2, r3
 8002134:	d23f      	bcs.n	80021b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	441a      	add	r2, r3
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fc34 	bl	80029b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214a:	3304      	adds	r3, #4
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
 8002152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215a:	429a      	cmp	r2, r3
 800215c:	d20c      	bcs.n	8002178 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	441a      	add	r2, r3
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	3b01      	subs	r3, #1
 8002168:	6839      	ldr	r1, [r7, #0]
 800216a:	440b      	add	r3, r1
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	3301      	adds	r3, #1
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	e7ec      	b.n	8002152 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4413      	add	r3, r2
 800217e:	3b01      	subs	r3, #1
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	4413      	add	r3, r2
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218a:	3b01      	subs	r3, #1
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	441a      	add	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	3220      	adds	r2, #32
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80021ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b0:	3301      	adds	r3, #1
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b4:	e7ba      	b.n	800212c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80021b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80021b8:	4618      	mov	r0, r3
 80021ba:	3738      	adds	r7, #56	; 0x38
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	0800771c 	.word	0x0800771c

080021dc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	080075a0 	.word	0x080075a0

080021f8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	611a      	str	r2, [r3, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68d8      	ldr	r0, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6891      	ldr	r1, [r2, #8]
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	4798      	blx	r3
 8002244:	4603      	mov	r3, r0
  };
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
  }
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f98a 	bl	800158c <_ZN3ros3MsgC1Ev>
 8002278:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
    {
    }
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	080077b4 	.word	0x080077b4

080022a4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	441a      	add	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80022be:	eeb0 0a67 	vmov.f32	s0, s15
 80022c2:	4610      	mov	r0, r2
 80022c4:	f7ff f883 	bl	80013ce <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4413      	add	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	441a      	add	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80022dc:	eeb0 0a67 	vmov.f32	s0, s15
 80022e0:	4610      	mov	r0, r2
 80022e2:	f7ff f874 	bl	80013ce <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80022e6:	4602      	mov	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	441a      	add	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80022fa:	eeb0 0a67 	vmov.f32	s0, s15
 80022fe:	4610      	mov	r0, r2
 8002300:	f7ff f865 	bl	80013ce <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4413      	add	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
      return offset;
 800230c:	68fb      	ldr	r3, [r7, #12]
    }
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	441a      	add	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f7ff f8b8 	bl	80014a6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002336:	4602      	mov	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	441a      	add	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3308      	adds	r3, #8
 8002348:	4619      	mov	r1, r3
 800234a:	4610      	mov	r0, r2
 800234c:	f7ff f8ab 	bl	80014a6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4413      	add	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	441a      	add	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	330c      	adds	r3, #12
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7ff f89e 	bl	80014a6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800236a:	4602      	mov	r2, r0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
     return offset;
 8002372:	68fb      	ldr	r3, [r7, #12]
    }
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	080075c4 	.word	0x080075c4

08002398 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	080075dc 	.word	0x080075dc

080023b4 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f8e4 	bl	800158c <_ZN3ros3MsgC1Ev>
 80023c4:	4a08      	ldr	r2, [pc, #32]	; (80023e8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff4a 	bl	8002268 <_ZN13geometry_msgs7Vector3C1Ev>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3314      	adds	r3, #20
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff45 	bl	8002268 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	0800779c 	.word	0x0800779c

080023ec <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	1d18      	adds	r0, r3, #4
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f7ff ff4d 	bl	80022a4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800240a:	4602      	mov	r2, r0
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f103 0014 	add.w	r0, r3, #20
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	4413      	add	r3, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f7ff ff40 	bl	80022a4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4413      	add	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
      return offset;
 800242c:	68fb      	ldr	r3, [r7, #12]
    }
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	1d18      	adds	r0, r3, #4
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	4413      	add	r3, r2
 800244e:	4619      	mov	r1, r3
 8002450:	f7ff ff61 	bl	8002316 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4413      	add	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f103 0014 	add.w	r0, r3, #20
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	4413      	add	r3, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f7ff ff54 	bl	8002316 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800246e:	4602      	mov	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
     return offset;
 8002476:	68fb      	ldr	r3, [r7, #12]
    }
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	08007600 	.word	0x08007600

0800249c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	08007614 	.word	0x08007614

080024b8 <_ZN13freeway_joyfw10stm_fw_msgC1Ev>:
      typedef bool _e_stop_status_type;
      _e_stop_status_type e_stop_status;
      typedef geometry_msgs::Twist _cmd_vel_mcu_type;
      _cmd_vel_mcu_type cmd_vel_mcu;

    stm_fw_msg():
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
      am_status(0),
      e_stop_status(0),
      cmd_vel_mcu()
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f862 	bl	800158c <_ZN3ros3MsgC1Ev>
 80024c8:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <_ZN13freeway_joyfw10stm_fw_msgC1Ev+0x38>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	711a      	strb	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	715a      	strb	r2, [r3, #5]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3308      	adds	r3, #8
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ff68 	bl	80023b4 <_ZN13geometry_msgs5TwistC1Ev>
    {
    }
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	08007784 	.word	0x08007784

080024f4 <_ZNK13freeway_joyfw10stm_fw_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_am_status;
      u_am_status.real = this->am_status;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	791b      	ldrb	r3, [r3, #4]
 8002506:	743b      	strb	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_am_status.base >> (8 * 0)) & 0xFF;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	4413      	add	r3, r2
 800250e:	7c3a      	ldrb	r2, [r7, #16]
 8002510:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->am_status);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_e_stop_status;
      u_e_stop_status.real = this->e_stop_status;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	795b      	ldrb	r3, [r3, #5]
 800251c:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_e_stop_status.base >> (8 * 0)) & 0xFF;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	4413      	add	r3, r2
 8002524:	7b3a      	ldrb	r2, [r7, #12]
 8002526:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->e_stop_status);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3301      	adds	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
      offset += this->cmd_vel_mcu.serialize(outbuffer + offset);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f103 0008 	add.w	r0, r3, #8
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f7ff ff56 	bl	80023ec <_ZNK13geometry_msgs5Twist9serializeEPh>
 8002540:	4602      	mov	r2, r0
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	4413      	add	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
      return offset;
 8002548:	697b      	ldr	r3, [r7, #20]
    }
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_ZN13freeway_joyfw10stm_fw_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_am_status;
      u_am_status.base = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	743b      	strb	r3, [r7, #16]
      u_am_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002564:	7c3a      	ldrb	r2, [r7, #16]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	440b      	add	r3, r1
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	b2db      	uxtb	r3, r3
 8002572:	743b      	strb	r3, [r7, #16]
      this->am_status = u_am_status.real;
 8002574:	7c3a      	ldrb	r2, [r7, #16]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->am_status);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3301      	adds	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_e_stop_status;
      u_e_stop_status.base = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	733b      	strb	r3, [r7, #12]
      u_e_stop_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002584:	7b3a      	ldrb	r2, [r7, #12]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	6839      	ldr	r1, [r7, #0]
 800258a:	440b      	add	r3, r1
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	b2db      	uxtb	r3, r3
 8002592:	733b      	strb	r3, [r7, #12]
      this->e_stop_status = u_e_stop_status.real;
 8002594:	7b3a      	ldrb	r2, [r7, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	715a      	strb	r2, [r3, #5]
      offset += sizeof(this->e_stop_status);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	3301      	adds	r3, #1
 800259e:	617b      	str	r3, [r7, #20]
      offset += this->cmd_vel_mcu.deserialize(inbuffer + offset);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f103 0008 	add.w	r0, r3, #8
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f7ff ff42 	bl	8002436 <_ZN13geometry_msgs5Twist11deserializeEPh>
 80025b2:	4602      	mov	r2, r0
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	4413      	add	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]
     return offset;
 80025ba:	697b      	ldr	r3, [r7, #20]
    }
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <_ZN13freeway_joyfw10stm_fw_msg7getTypeEv>:

    const char * getType(){ return "freeway_joyfw/stm_fw_msg"; };
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <_ZN13freeway_joyfw10stm_fw_msg7getTypeEv+0x18>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	08007638 	.word	0x08007638

080025e0 <_ZN13freeway_joyfw10stm_fw_msg6getMD5Ev>:
    const char * getMD5(){ return "fa2d9ef9f2382f4119166968f815e551"; };
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <_ZN13freeway_joyfw10stm_fw_msg6getMD5Ev+0x18>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	08007654 	.word	0x08007654

080025fc <_ZN13freeway_joyfw10stm_am_msgC1Ev>:
  {
    public:
      typedef bool _am_status2_type;
      _am_status2_type am_status2;

    stm_am_msg():
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
      am_status2(0)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe ffc0 	bl	800158c <_ZN3ros3MsgC1Ev>
 800260c:	4a05      	ldr	r2, [pc, #20]	; (8002624 <_ZN13freeway_joyfw10stm_am_msgC1Ev+0x28>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	711a      	strb	r2, [r3, #4]
    {
    }
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	0800776c 	.word	0x0800776c

08002628 <_ZNK13freeway_joyfw10stm_am_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_am_status2;
      u_am_status2.real = this->am_status2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	791b      	ldrb	r3, [r3, #4]
 800263a:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_am_status2.base >> (8 * 0)) & 0xFF;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	4413      	add	r3, r2
 8002642:	7a3a      	ldrb	r2, [r7, #8]
 8002644:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->am_status2);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3301      	adds	r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
      return offset;
 800264c:	68fb      	ldr	r3, [r7, #12]
    }
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <_ZN13freeway_joyfw10stm_am_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_am_status2;
      u_am_status2.base = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	723b      	strb	r3, [r7, #8]
      u_am_status2.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800266c:	7a3a      	ldrb	r2, [r7, #8]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6839      	ldr	r1, [r7, #0]
 8002672:	440b      	add	r3, r1
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	723b      	strb	r3, [r7, #8]
      this->am_status2 = u_am_status2.real;
 800267c:	7a3a      	ldrb	r2, [r7, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->am_status2);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3301      	adds	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
     return offset;
 8002688:	68fb      	ldr	r3, [r7, #12]
    }
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <_ZN13freeway_joyfw10stm_am_msg7getTypeEv>:

    const char * getType(){ return "freeway_joyfw/stm_am_msg"; };
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <_ZN13freeway_joyfw10stm_am_msg7getTypeEv+0x18>)
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	08007678 	.word	0x08007678

080026b4 <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev>:
    const char * getMD5(){ return "7d69f08cbd0079f4e385def6382afcb2"; };
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev+0x18>)
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	08007694 	.word	0x08007694

080026d0 <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE>:
bool axis_B = true;
double l_scale_ = 0.3;
double a_scale_ = 0.4;

// Subscriber:
void am_status_cb(const freeway_joyfw::stm_am_msg &msg) {
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	bool tf = msg.am_status2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	791b      	ldrb	r3, [r3, #4]
 80026dc:	73fb      	strb	r3, [r7, #15]
	*am_status = tf;
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE+0x24>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	701a      	strb	r2, [r3, #0]
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20001410 	.word	0x20001410

080026f8 <map>:
ros::Subscriber<freeway_joyfw::stm_am_msg> am_status_sub("freeway/am_status", &am_status_cb);

long map(uint32_t a, long b, long c, long d, long e) {
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
	return (a - b)*(e - d)/(c - b) + d;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	69b9      	ldr	r1, [r7, #24]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	1a8a      	subs	r2, r1, r2
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	1a8a      	subs	r2, r1, r2
 800271c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4413      	add	r3, r2
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <setup>:


// Setup node:
void setup(void) {
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  nh.initNode();
 8002734:	4809      	ldr	r0, [pc, #36]	; (800275c <setup+0x2c>)
 8002736:	f000 fa23 	bl	8002b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>

//  nh.advertiseService(server);
//  nh.advertiseService(server2);
  nh.subscribe(am_status_sub);
 800273a:	4909      	ldr	r1, [pc, #36]	; (8002760 <setup+0x30>)
 800273c:	4807      	ldr	r0, [pc, #28]	; (800275c <setup+0x2c>)
 800273e:	f000 fa3c 	bl	8002bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_>
  nh.advertise(freeway_diagnostics);
 8002742:	4908      	ldr	r1, [pc, #32]	; (8002764 <setup+0x34>)
 8002744:	4805      	ldr	r0, [pc, #20]	; (800275c <setup+0x2c>)
 8002746:	f000 fa65 	bl	8002c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  //nh.advertiseService(server2);
  e_stop_status = &td;
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <setup+0x38>)
 800274c:	4a07      	ldr	r2, [pc, #28]	; (800276c <setup+0x3c>)
 800274e:	601a      	str	r2, [r3, #0]
  am_status = &fd;
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <setup+0x40>)
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <setup+0x44>)
 8002754:	601a      	str	r2, [r3, #0]
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000a78 	.word	0x20000a78
 8002760:	20001428 	.word	0x20001428
 8002764:	200013f8 	.word	0x200013f8
 8002768:	2000140c 	.word	0x2000140c
 800276c:	20000000 	.word	0x20000000
 8002770:	20001410 	.word	0x20001410
 8002774:	20001414 	.word	0x20001414

08002778 <loop>:

// Loop:
void loop(uint32_t x_val, uint32_t y_val) {
 8002778:	b5b0      	push	{r4, r5, r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af02      	add	r7, sp, #8
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]


  nh.spinOnce();
 8002782:	484a      	ldr	r0, [pc, #296]	; (80028ac <loop+0x134>)
 8002784:	f000 fa74 	bl	8002c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

  if (*e_stop_status==1 && *am_status==1) { //if var 'am_status == true' , it defines manual mode
 8002788:	4b49      	ldr	r3, [pc, #292]	; (80028b0 <loop+0x138>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d16c      	bne.n	800286c <loop+0xf4>
 8002792:	4b48      	ldr	r3, [pc, #288]	; (80028b4 <loop+0x13c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d167      	bne.n	800286c <loop+0xf4>
	  axis_X = map(x_val,0,4095,-10000,10000) / (float)10000.0;
 800279c:	f242 7310 	movw	r3, #10000	; 0x2710
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	4b45      	ldr	r3, [pc, #276]	; (80028b8 <loop+0x140>)
 80027a4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80027a8:	2100      	movs	r1, #0
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffa4 	bl	80026f8 <map>
 80027b0:	ee07 0a90 	vmov	s15, r0
 80027b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80028bc <loop+0x144>
 80027bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027c0:	ee16 0a90 	vmov	r0, s13
 80027c4:	f7fd ffb4 	bl	8000730 <__aeabi_f2d>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	493c      	ldr	r1, [pc, #240]	; (80028c0 <loop+0x148>)
 80027ce:	e9c1 2300 	strd	r2, r3, [r1]
	  axis_Y = map(y_val,0,4095,-10000,10000) / (float)10000.0;
 80027d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <loop+0x140>)
 80027da:	f640 72ff 	movw	r2, #4095	; 0xfff
 80027de:	2100      	movs	r1, #0
 80027e0:	6838      	ldr	r0, [r7, #0]
 80027e2:	f7ff ff89 	bl	80026f8 <map>
 80027e6:	ee07 0a90 	vmov	s15, r0
 80027ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ee:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80028bc <loop+0x144>
 80027f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027f6:	ee16 0a90 	vmov	r0, s13
 80027fa:	f7fd ff99 	bl	8000730 <__aeabi_f2d>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4930      	ldr	r1, [pc, #192]	; (80028c4 <loop+0x14c>)
 8002804:	e9c1 2300 	strd	r2, r3, [r1]

	  //cmd_vel_msg.linear.x = l_scale_ * axis_X;
	  //cmd_vel_msg.angular.z = a_scale_ * axis_Y;
	  stm_pub_msg.am_status = true;
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <loop+0x150>)
 800280a:	2201      	movs	r2, #1
 800280c:	711a      	strb	r2, [r3, #4]
	  stm_pub_msg.e_stop_status = true;
 800280e:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <loop+0x150>)
 8002810:	2201      	movs	r2, #1
 8002812:	715a      	strb	r2, [r3, #5]
	  stm_pub_msg.cmd_vel_mcu.linear.x = l_scale_ * axis_X;
 8002814:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <loop+0x154>)
 8002816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <loop+0x148>)
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	f7fd fcf8 	bl	8000214 <__aeabi_dmul>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	f7fd ffd8 	bl	80007e0 <__aeabi_d2f>
 8002830:	4603      	mov	r3, r0
 8002832:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <loop+0x150>)
 8002834:	6113      	str	r3, [r2, #16]
	  stm_pub_msg.cmd_vel_mcu.angular.z = -a_scale_ * axis_Y;
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <loop+0x158>)
 8002838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283c:	4614      	mov	r4, r2
 800283e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <loop+0x14c>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	4620      	mov	r0, r4
 800284a:	4629      	mov	r1, r5
 800284c:	f7fd fce2 	bl	8000214 <__aeabi_dmul>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	f7fd ffc2 	bl	80007e0 <__aeabi_d2f>
 800285c:	4603      	mov	r3, r0
 800285e:	4a1a      	ldr	r2, [pc, #104]	; (80028c8 <loop+0x150>)
 8002860:	6293      	str	r3, [r2, #40]	; 0x28

	  freeway_diagnostics.publish(&stm_pub_msg);
 8002862:	4919      	ldr	r1, [pc, #100]	; (80028c8 <loop+0x150>)
 8002864:	481b      	ldr	r0, [pc, #108]	; (80028d4 <loop+0x15c>)
 8002866:	f7ff fcde 	bl	8002226 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 800286a:	e018      	b.n	800289e <loop+0x126>
  }
  else if (*e_stop_status==0) // e_stop is on & *am_status is on/off
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <loop+0x138>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d113      	bne.n	800289e <loop+0x126>
  {
	  stm_pub_msg.am_status = *am_status;
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <loop+0x13c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	781a      	ldrb	r2, [r3, #0]
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <loop+0x150>)
 800287e:	711a      	strb	r2, [r3, #4]
	  stm_pub_msg.e_stop_status = false;
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <loop+0x150>)
 8002882:	2200      	movs	r2, #0
 8002884:	715a      	strb	r2, [r3, #5]
	  stm_pub_msg.cmd_vel_mcu.linear.x = 0;
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <loop+0x150>)
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
	  stm_pub_msg.cmd_vel_mcu.angular.z = 0;
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <loop+0x150>)
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	629a      	str	r2, [r3, #40]	; 0x28

	  freeway_diagnostics.publish(&stm_pub_msg);
 8002896:	490c      	ldr	r1, [pc, #48]	; (80028c8 <loop+0x150>)
 8002898:	480e      	ldr	r0, [pc, #56]	; (80028d4 <loop+0x15c>)
 800289a:	f7ff fcc4 	bl	8002226 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }

  HAL_Delay(30);
 800289e:	201e      	movs	r0, #30
 80028a0:	f001 f942 	bl	8003b28 <HAL_Delay>
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bdb0      	pop	{r4, r5, r7, pc}
 80028ac:	20000a78 	.word	0x20000a78
 80028b0:	2000140c 	.word	0x2000140c
 80028b4:	20001410 	.word	0x20001410
 80028b8:	ffffd8f0 	.word	0xffffd8f0
 80028bc:	461c4000 	.word	0x461c4000
 80028c0:	20001418 	.word	0x20001418
 80028c4:	20001420 	.word	0x20001420
 80028c8:	200013cc 	.word	0x200013cc
 80028cc:	20000008 	.word	0x20000008
 80028d0:	20000010 	.word	0x20000010
 80028d4:	200013f8 	.word	0x200013f8

080028d8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  static bool pin_stat = true;
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  for (int i=0; i<10; i++){
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b09      	cmp	r3, #9
 80028ea:	dc10      	bgt.n	800290e <HAL_GPIO_EXTI_Callback+0x36>
	pin_stat = HAL_GPIO_ReadPin (GPIOA, GPIO_Pin);
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	4619      	mov	r1, r3
 80028f0:	480b      	ldr	r0, [pc, #44]	; (8002920 <HAL_GPIO_EXTI_Callback+0x48>)
 80028f2:	f002 fc07 	bl	8005104 <HAL_GPIO_ReadPin>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002904:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<10; i++){
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3301      	adds	r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e7eb      	b.n	80028e6 <HAL_GPIO_EXTI_Callback+0xe>
  }
  *e_stop_status = pin_stat;
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_GPIO_EXTI_Callback+0x50>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a04      	ldr	r2, [pc, #16]	; (8002924 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	701a      	strb	r2, [r3, #0]
//  RESULT.result = 1;
//
//  clt.call(ESTOP_STATUS, RESULT);
  //HAL_Delay(1);

}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40020000 	.word	0x40020000
 8002924:	20000018 	.word	0x20000018
 8002928:	2000140c 	.word	0x2000140c

0800292c <HAL_GPIO_EXTI_Callback3>:

void HAL_GPIO_EXTI_Callback3(uint16_t GPIO_Pin)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  static bool pin_stat = true;
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  for (int i=0; i<10; i++){
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b09      	cmp	r3, #9
 800293e:	dc10      	bgt.n	8002962 <HAL_GPIO_EXTI_Callback3+0x36>
	pin_stat = HAL_GPIO_ReadPin (GPIOB, GPIO_Pin);
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	4619      	mov	r1, r3
 8002944:	4809      	ldr	r0, [pc, #36]	; (800296c <HAL_GPIO_EXTI_Callback3+0x40>)
 8002946:	f002 fbdd 	bl	8005104 <HAL_GPIO_ReadPin>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf14      	ite	ne
 8002950:	2301      	movne	r3, #1
 8002952:	2300      	moveq	r3, #0
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_GPIO_EXTI_Callback3+0x44>)
 8002958:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<10; i++){
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3301      	adds	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e7eb      	b.n	800293a <HAL_GPIO_EXTI_Callback3+0xe>
  }
  //am_status = &pin_stat;
  //HAL_Delay(1);
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40020400 	.word	0x40020400
 8002970:	20000019 	.word	0x20000019

08002974 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d80d      	bhi.n	80029a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	fa22 f103 	lsr.w	r1, r2, r3
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	b2ca      	uxtb	r2, r1
 800299a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3301      	adds	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e7ee      	b.n	8002982 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d811      	bhi.n	80029ee <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6839      	ldr	r1, [r7, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	440a      	add	r2, r1
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	4611      	mov	r1, r2
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	00d2      	lsls	r2, r2, #3
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3301      	adds	r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	e7ea      	b.n	80029c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	080077e4 	.word	0x080077e4

08002a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ffe8 	bl	80029fc <_ZN3ros15NodeHandleBase_C1Ev>
 8002a2c:	4a39      	ldr	r2, [pc, #228]	; (8002b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xf8>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fc82 	bl	8001340 <_ZN13STM32HardwareC1Ev>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f912 	bl	8001c74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b18      	cmp	r3, #24
 8002a58:	d80a      	bhi.n	8002a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x54>
      publishers[i] = 0;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	f202 2206 	addw	r2, r2, #518	; 0x206
 8002a62:	2100      	movs	r1, #0
 8002a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e7f1      	b.n	8002a54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b18      	cmp	r3, #24
 8002a78:	d80b      	bhi.n	8002a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x76>
      subscribers[i] = 0;
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	2200      	movs	r2, #0
 8002a88:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	e7f0      	b.n	8002a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9c:	d209      	bcs.n	8002ab2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x96>
      message_in[i] = 0;
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3301      	adds	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	e7f1      	b.n	8002a96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002abc:	d20a      	bcs.n	8002ad4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xb8>
      message_out[i] = 0;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	e7f0      	b.n	8002ab6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
    req_param_resp.ints = NULL;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
    req_param_resp.floats_length = 0;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.floats = NULL;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.ints_length = 0;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
    req_param_resp.ints = NULL;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914

    spin_timeout_ = 0;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	615a      	str	r2, [r3, #20]
  }
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	08007758 	.word	0x08007758

08002b18 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	080077cc 	.word	0x080077cc

08002b38 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ffe5 	bl	8002b18 <_ZN3ros11Subscriber_C1Ev>
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	330c      	adds	r3, #12
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fd4f 	bl	80025fc <_ZN13freeway_joyfw10stm_am_msgC1Ev>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	615a      	str	r2, [r3, #20]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	609a      	str	r2, [r3, #8]
  };
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	08007740 	.word	0x08007740

08002b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe fbe7 	bl	8001360 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
    bytes_ = 0;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
    index_ = 0;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    topic_ = 0;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
  };
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b18      	cmp	r3, #24
 8002bcc:	dc1b      	bgt.n	8002c06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10e      	bne.n	8002bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
        return true;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e004      	b.n	8002c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3301      	adds	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e7e0      	b.n	8002bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0xe>
      }
    }
    return false;
 8002c06:	2300      	movs	r3, #0
  }
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b18      	cmp	r3, #24
 8002c26:	dc1c      	bgt.n	8002c62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4e>
      if (publishers[i] == 0) // empty slot
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	f202 2206 	addw	r2, r2, #518	; 0x206
 8002c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d110      	bne.n	8002c5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	f202 2206 	addw	r2, r2, #518	; 0x206
 8002c40:	6839      	ldr	r1, [r7, #0]
 8002c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	60da      	str	r2, [r3, #12]
        return true;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e004      	b.n	8002c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e7df      	b.n	8002c22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8002c62:	2300      	movs	r3, #0
  }
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fb9b 	bl	80013b8 <_ZN13STM32Hardware4timeEv>
 8002c82:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d903      	bls.n	8002c9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
    if (mode_ != MODE_FIRST_FF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d903      	bls.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
      if (spin_timeout_ > 0)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe fb75 	bl	80013b8 <_ZN13STM32Hardware4timeEv>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1ad2      	subs	r2, r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	bf8c      	ite	hi
 8002cdc:	2301      	movhi	r3, #1
 8002cde:	2300      	movls	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8002ce6:	f06f 0301 	mvn.w	r3, #1
 8002cea:	e190      	b.n	800300e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe fb42 	bl	800137a <_ZN13STM32Hardware4readEv>
 8002cf6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f2c0 8170 	blt.w	8002fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x370>
      checksum_ += data;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	441a      	add	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002d16:	2b07      	cmp	r3, #7
 8002d18:	d11d      	bne.n	8002d56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002d20:	1c59      	adds	r1, r3, #1
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	f8c2 18ec 	str.w	r1, [r2, #2284]	; 0x8ec
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	b2d1      	uxtb	r1, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	460a      	mov	r2, r1
 8002d32:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8002d3a:	1e5a      	subs	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1b7      	bne.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2208      	movs	r2, #8
 8002d50:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8002d54:	e7b2      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d128      	bne.n	8002db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x142>
        if (data == 0xff)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2bff      	cmp	r3, #255	; 0xff
 8002d64:	d10d      	bne.n	8002d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x112>
          mode_++;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f103 0214 	add.w	r2, r3, #20
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002d80:	e79c      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3304      	adds	r3, #4
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fb16 	bl	80013b8 <_ZN13STM32Hardware4timeEv>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	bf8c      	ite	hi
 8002d9a:	2301      	movhi	r3, #1
 8002d9c:	2300      	movls	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d08b      	beq.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
          return SPIN_TIMEOUT;
 8002dac:	f06f 0301 	mvn.w	r3, #1
 8002db0:	e12d      	b.n	800300e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d118      	bne.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2bfe      	cmp	r3, #254	; 0xfe
 8002dc0:	d107      	bne.n	8002dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8002dd0:	e774      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
          if (configured_ == false)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f47f af6b 	bne.w	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f915 	bl	8003016 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8002dec:	e766      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d113      	bne.n	8002e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        index_ = 0;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        mode_++;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8002e1e:	e74d      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d110      	bne.n	8002e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 28e4 	ldr.w	r2, [r3, #2276]	; 0x8e4
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	441a      	add	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        mode_++;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8002e4a:	e737      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d116      	bne.n	8002e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002e5c:	425a      	negs	r2, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	bf58      	it	pl
 8002e64:	4253      	negpl	r3, r2
 8002e66:	2bff      	cmp	r3, #255	; 0xff
 8002e68:	d107      	bne.n	8002e7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x20a>
          mode_++;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8002e78:	e720      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8002e82:	e71b      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d10f      	bne.n	8002eae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23e>
        topic_ = data;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        mode_++;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        checksum_ = data;               /* first byte included in checksum */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8002eac:	e706      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d117      	bne.n	8002ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 28e8 	ldr.w	r2, [r3, #2280]	; 0x8e8
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	441a      	add	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8c3 28e8 	str.w	r2, [r3, #2280]	; 0x8e8
        mode_ = MODE_MESSAGE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2207      	movs	r2, #7
 8002ece:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        if (bytes_ == 0)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f47f aeef 	bne.w	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8002ee6:	e6e9      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	f47f aee4 	bne.w	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        if ((checksum_ % 256) == 255)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002f02:	425a      	negs	r2, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	bf58      	it	pl
 8002f0a:	4253      	negpl	r3, r2
 8002f0c:	2bff      	cmp	r3, #255	; 0xff
 8002f0e:	f47f aed5 	bne.w	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d110      	bne.n	8002f3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f87a 	bl	8003016 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f894 	bl	8003050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
            last_sync_receive_time = c_time;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
            return SPIN_ERR;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3c:	e067      	b.n	800300e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002f44:	2b0a      	cmp	r3, #10
 8002f46:	d106      	bne.n	8002f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3318      	adds	r3, #24
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f95e 	bl	8003210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8002f54:	e6b2      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002f5c:	2b06      	cmp	r3, #6
 8002f5e:	d10d      	bne.n	8002f7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f603 1208 	addw	r2, r3, #2312	; 0x908
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3318      	adds	r3, #24
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f7fe ffb6 	bl	8001ede <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 8002f7a:	e69f      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002f82:	2b0b      	cmp	r3, #11
 8002f84:	d104      	bne.n	8002f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x320>
            configured_ = false;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8002f8e:	e695      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002f96:	3b64      	subs	r3, #100	; 0x64
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f43f ae89 	beq.w	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002fb0:	3b64      	subs	r3, #100	; 0x64
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	6858      	ldr	r0, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
 8002fc4:	3b64      	subs	r3, #100	; 0x64
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	3218      	adds	r2, #24
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4798      	blx	r3
    while (true)
 8002fde:	e66d      	b.n	8002cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 8002fe0:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00f      	beq.n	800300c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39c>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d906      	bls.n	800300c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x39c>
      requestSyncTime();
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f809 	bl	8003016 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    return SPIN_OK;
 800300c:	2300      	movs	r3, #0
  }
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fac2 	bl	80015ac <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f107 020c 	add.w	r2, r7, #12
 8003032:	210a      	movs	r1, #10
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
    rt_time = hardware_.time();
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe f9bb 	bl	80013b8 <_ZN13STM32Hardware4timeEv>
 8003042:	4602      	mov	r2, r0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]
  }
 8003048:	bf00      	nop
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b08b      	sub	sp, #44	; 0x2c
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003058:	f107 030c 	add.w	r3, r7, #12
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe fb95 	bl	800178c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	2b18      	cmp	r3, #24
 800306a:	dc5b      	bgt.n	8003124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003070:	f202 2206 	addw	r2, r2, #518	; 0x206
 8003074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d04f      	beq.n	800311c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003080:	f202 2206 	addw	r2, r2, #518	; 0x206
 8003084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	b29b      	uxth	r3, r3
 800308c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003092:	f202 2206 	addw	r2, r2, #518	; 0x206
 8003096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a2:	f202 2206 	addw	r2, r2, #518	; 0x206
 80030a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	f202 2206 	addw	r2, r2, #518	; 0x206
 80030b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3308      	adds	r3, #8
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4608      	mov	r0, r1
 80030c2:	4798      	blx	r3
 80030c4:	4603      	mov	r3, r0
 80030c6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030cc:	f202 2206 	addw	r2, r2, #518	; 0x206
 80030d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030da:	f202 2206 	addw	r2, r2, #518	; 0x206
 80030de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	330c      	adds	r3, #12
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4608      	mov	r0, r1
 80030ec:	4798      	blx	r3
 80030ee:	4603      	mov	r3, r0
 80030f0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80030f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681c      	ldr	r4, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003102:	f202 2206 	addw	r2, r2, #518	; 0x206
 8003106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff f89f 	bl	800224e <_ZN3ros9Publisher15getEndpointTypeEv>
 8003110:	4601      	mov	r1, r0
 8003112:	f107 030c 	add.w	r3, r7, #12
 8003116:	461a      	mov	r2, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	3301      	adds	r3, #1
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	e7a0      	b.n	8003066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	2b18      	cmp	r3, #24
 800312c:	dc68      	bgt.n	8003200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d05b      	beq.n	80031f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	b29b      	uxth	r3, r3
 8003152:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3308      	adds	r3, #8
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4608      	mov	r0, r1
 800318a:	4798      	blx	r3
 800318c:	4603      	mov	r3, r0
 800318e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	f203 231e 	addw	r3, r3, #542	; 0x21e
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4608      	mov	r0, r1
 80031b4:	4798      	blx	r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80031ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031be:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681c      	ldr	r4, [r3, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	f203 231e 	addw	r3, r3, #542	; 0x21e
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	f203 231e 	addw	r3, r3, #542	; 0x21e
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3304      	adds	r3, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4798      	blx	r3
 80031ec:	4601      	mov	r1, r0
 80031ee:	f107 030c 	add.w	r3, r7, #12
 80031f2:	461a      	mov	r2, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	3301      	adds	r3, #1
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	e793      	b.n	8003128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
  }
 8003208:	bf00      	nop
 800320a:	372c      	adds	r7, #44	; 0x2c
 800320c:	46bd      	mov	sp, r7
 800320e:	bd90      	pop	{r4, r7, pc}

08003210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800321a:	f107 0308 	add.w	r3, r7, #8
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe f9c4 	bl	80015ac <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe f8c5 	bl	80013b8 <_ZN13STM32Hardware4timeEv>
 800322e:	4602      	mov	r2, r0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003238:	f107 0308 	add.w	r3, r7, #8
 800323c:	6839      	ldr	r1, [r7, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fa24 	bl	800168c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	4914      	ldr	r1, [pc, #80]	; (800329c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 800324a:	fba1 1303 	umull	r1, r3, r1, r3
 800324e:	099b      	lsrs	r3, r3, #6
 8003250:	4413      	add	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003254:	6939      	ldr	r1, [r7, #16]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x8c>)
 800325a:	fba3 0302 	umull	r0, r3, r3, r2
 800325e:	099b      	lsrs	r3, r3, #6
 8003260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003264:	fb00 f303 	mul.w	r3, r0, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x90>)
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	440b      	add	r3, r1
 8003272:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003274:	f107 0308 	add.w	r3, r7, #8
 8003278:	3304      	adds	r3, #4
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f8a5 	bl	80033cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe f896 	bl	80013b8 <_ZN13STM32Hardware4timeEv>
 800328c:	4602      	mov	r2, r0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
  }
 8003294:	bf00      	nop
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	10624dd3 	.word	0x10624dd3
 80032a0:	000f4240 	.word	0x000f4240

080032a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b63      	cmp	r3, #99	; 0x63
 80032b4:	dd09      	ble.n	80032ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 80032bc:	f083 0301 	eor.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e079      	b.n	80033be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	f502 6283 	add.w	r2, r2, #1048	; 0x418
 80032d6:	3207      	adds	r2, #7
 80032d8:	4611      	mov	r1, r2
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4798      	blx	r3
 80032de:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	22ff      	movs	r2, #255	; 0xff
 80032e4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    message_out[1] = PROTOCOL_VER;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	22fe      	movs	r2, #254	; 0xfe
 80032ec:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	b29b      	uxth	r3, r3
 8003302:	b2da      	uxtb	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 241a 	ldrb.w	r2, [r3, #1050]	; 0x41a
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8003316:	4413      	add	r3, r2
 8003318:	b2db      	uxtb	r3, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	b2da      	uxtb	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	b21b      	sxth	r3, r3
 8003332:	121b      	asrs	r3, r3, #8
 8003334:	b21b      	sxth	r3, r3
 8003336:	b2da      	uxtb	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e

    /* calculate checksum */
    int chk = 0;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003342:	2305      	movs	r3, #5
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	3306      	adds	r3, #6
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	429a      	cmp	r2, r3
 800334e:	dc0d      	bgt.n	800336c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	3301      	adds	r3, #1
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	e7ec      	b.n	8003346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	3307      	adds	r3, #7
 8003370:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	425a      	negs	r2, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	bf58      	it	pl
 800337c:	4253      	negpl	r3, r2
 800337e:	b2da      	uxtb	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	1c59      	adds	r1, r3, #1
 8003384:	6179      	str	r1, [r7, #20]
 8003386:	43d2      	mvns	r2, r2
 8003388:	b2d1      	uxtb	r1, r2
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4413      	add	r3, r2
 800338e:	460a      	mov	r2, r1
 8003390:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    if (l <= OUTPUT_SIZE)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339a:	dc0a      	bgt.n	80033b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1d18      	adds	r0, r3, #4
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4619      	mov	r1, r3
 80033aa:	f7fd fff4 	bl	8001396 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	e005      	b.n	80033be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80033b2:	4905      	ldr	r1, [pc, #20]	; (80033c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f847 	bl	8003448 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80033be:	4618      	mov	r0, r3
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	080076b8 	.word	0x080076b8

080033cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd ffec 	bl	80013b8 <_ZN13STM32Hardware4timeEv>
 80033e0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4914      	ldr	r1, [pc, #80]	; (800343c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 80033ea:	fba1 1303 	umull	r1, r3, r1, r3
 80033ee:	099b      	lsrs	r3, r3, #6
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	1e5a      	subs	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4b0f      	ldr	r3, [pc, #60]	; (800343c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x70>)
 8003400:	fba3 0302 	umull	r0, r3, r3, r2
 8003404:	099b      	lsrs	r3, r3, #6
 8003406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800340a:	fb00 f303 	mul.w	r3, r0, r3
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	1aca      	subs	r2, r1, r3
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 800341a:	4413      	add	r3, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f103 020c 	add.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3310      	adds	r3, #16
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f7fd fd59 	bl	8000ee4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	10624dd3 	.word	0x10624dd3
 8003440:	000f4240 	.word	0x000f4240
 8003444:	3b9aca00 	.word	0x3b9aca00

08003448 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	2103      	movs	r1, #3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f804 	bl	8003464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	460b      	mov	r3, r1
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fb4c 	bl	8001b14 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800347c:	7afb      	ldrb	r3, [r7, #11]
 800347e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f107 0214 	add.w	r2, r7, #20
 800348e:	2107      	movs	r1, #7
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	4798      	blx	r3
  }
 8003494:	bf00      	nop
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <_Z41__static_initialization_and_destruction_0ii>:
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d119      	bne.n	80034e0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d114      	bne.n	80034e0 <_Z41__static_initialization_and_destruction_0ii+0x44>
ros::NodeHandle nh;
 80034b6:	480c      	ldr	r0, [pc, #48]	; (80034e8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80034b8:	f7ff fab0 	bl	8002a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Twist cmd_vel_msg;
 80034bc:	480b      	ldr	r0, [pc, #44]	; (80034ec <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80034be:	f7fe ff79 	bl	80023b4 <_ZN13geometry_msgs5TwistC1Ev>
freeway_joyfw::stm_fw_msg stm_pub_msg;
 80034c2:	480b      	ldr	r0, [pc, #44]	; (80034f0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80034c4:	f7fe fff8 	bl	80024b8 <_ZN13freeway_joyfw10stm_fw_msgC1Ev>
ros::Publisher freeway_diagnostics("freeway/diagnostics", &stm_pub_msg);
 80034c8:	2300      	movs	r3, #0
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80034cc:	4909      	ldr	r1, [pc, #36]	; (80034f4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80034ce:	480a      	ldr	r0, [pc, #40]	; (80034f8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80034d0:	f7fe fe92 	bl	80021f8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<freeway_joyfw::stm_am_msg> am_status_sub("freeway/am_status", &am_status_cb);
 80034d4:	2301      	movs	r3, #1
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80034d8:	4909      	ldr	r1, [pc, #36]	; (8003500 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80034da:	480a      	ldr	r0, [pc, #40]	; (8003504 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80034dc:	f7ff fb2c 	bl	8002b38 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei>
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20000a78 	.word	0x20000a78
 80034ec:	200013a8 	.word	0x200013a8
 80034f0:	200013cc 	.word	0x200013cc
 80034f4:	080076f4 	.word	0x080076f4
 80034f8:	200013f8 	.word	0x200013f8
 80034fc:	080026d1 	.word	0x080026d1
 8003500:	08007708 	.word	0x08007708
 8003504:	20001428 	.word	0x20001428

08003508 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	330c      	adds	r3, #12
 8003516:	6839      	ldr	r1, [r7, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff f89e 	bl	800265a <_ZN13freeway_joyfw10stm_am_msg11deserializeEPh>
    this->cb_(msg);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	320c      	adds	r2, #12
 8003526:	4610      	mov	r0, r2
 8003528:	4798      	blx	r3
  }
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
  }
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	330c      	adds	r3, #12
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff f89e 	bl	8002698 <_ZN13freeway_joyfw10stm_am_msg7getTypeEv>
 800355c:	4603      	mov	r3, r0
  }
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	330c      	adds	r3, #12
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f89e 	bl	80026b4 <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev>
 8003578:	4603      	mov	r3, r0
  }
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
    return configured_;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
  };
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <_GLOBAL__sub_I_nh>:
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
 80035a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035a4:	2001      	movs	r0, #1
 80035a6:	f7ff ff79 	bl	800349c <_Z41__static_initialization_and_destruction_0ii>
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_MspInit+0x4c>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <HAL_MspInit+0x4c>)
 80035bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c0:	6453      	str	r3, [r2, #68]	; 0x44
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <HAL_MspInit+0x4c>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_MspInit+0x4c>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <HAL_MspInit+0x4c>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6413      	str	r3, [r2, #64]	; 0x40
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_MspInit+0x4c>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035ea:	2007      	movs	r0, #7
 80035ec:	f000 ffb2 	bl	8004554 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40023800 	.word	0x40023800

080035fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a2f      	ldr	r2, [pc, #188]	; (80036d8 <HAL_ADC_MspInit+0xdc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d157      	bne.n	80036ce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	4b2e      	ldr	r3, [pc, #184]	; (80036dc <HAL_ADC_MspInit+0xe0>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	4a2d      	ldr	r2, [pc, #180]	; (80036dc <HAL_ADC_MspInit+0xe0>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	6453      	str	r3, [r2, #68]	; 0x44
 800362e:	4b2b      	ldr	r3, [pc, #172]	; (80036dc <HAL_ADC_MspInit+0xe0>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	4b27      	ldr	r3, [pc, #156]	; (80036dc <HAL_ADC_MspInit+0xe0>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_ADC_MspInit+0xe0>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_ADC_MspInit+0xe0>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003656:	2303      	movs	r3, #3
 8003658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800365a:	2303      	movs	r3, #3
 800365c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003662:	f107 0314 	add.w	r3, r7, #20
 8003666:	4619      	mov	r1, r3
 8003668:	481d      	ldr	r0, [pc, #116]	; (80036e0 <HAL_ADC_MspInit+0xe4>)
 800366a:	f001 fbb7 	bl	8004ddc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 8003670:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <HAL_ADC_MspInit+0xec>)
 8003672:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003674:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003680:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003686:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 8003688:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800368c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 8003690:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003694:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003696:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 8003698:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800369c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800369e:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 80036a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80036a6:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ac:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036b2:	480c      	ldr	r0, [pc, #48]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 80036b4:	f000 ff90 	bl	80045d8 <HAL_DMA_Init>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80036be:	f7fd fe39 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
 80036c8:	4a06      	ldr	r2, [pc, #24]	; (80036e4 <HAL_ADC_MspInit+0xe8>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036ce:	bf00      	nop
 80036d0:	3728      	adds	r7, #40	; 0x28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40012000 	.word	0x40012000
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40020000 	.word	0x40020000
 80036e4:	20000904 	.word	0x20000904
 80036e8:	40026410 	.word	0x40026410

080036ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f4:	f107 0314 	add.w	r3, r7, #20
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a4c      	ldr	r2, [pc, #304]	; (800383c <HAL_UART_MspInit+0x150>)
 800370a:	4293      	cmp	r3, r2
 800370c:	f040 8092 	bne.w	8003834 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_UART_MspInit+0x154>)
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	4a49      	ldr	r2, [pc, #292]	; (8003840 <HAL_UART_MspInit+0x154>)
 800371a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800371e:	6413      	str	r3, [r2, #64]	; 0x40
 8003720:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_UART_MspInit+0x154>)
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_UART_MspInit+0x154>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	4a42      	ldr	r2, [pc, #264]	; (8003840 <HAL_UART_MspInit+0x154>)
 8003736:	f043 0304 	orr.w	r3, r3, #4
 800373a:	6313      	str	r3, [r2, #48]	; 0x30
 800373c:	4b40      	ldr	r3, [pc, #256]	; (8003840 <HAL_UART_MspInit+0x154>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003748:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800374c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	2302      	movs	r3, #2
 8003750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003756:	2303      	movs	r3, #3
 8003758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800375a:	2307      	movs	r3, #7
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800375e:	f107 0314 	add.w	r3, r7, #20
 8003762:	4619      	mov	r1, r3
 8003764:	4837      	ldr	r0, [pc, #220]	; (8003844 <HAL_UART_MspInit+0x158>)
 8003766:	f001 fb39 	bl	8004ddc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800376a:	4b37      	ldr	r3, [pc, #220]	; (8003848 <HAL_UART_MspInit+0x15c>)
 800376c:	4a37      	ldr	r2, [pc, #220]	; (800384c <HAL_UART_MspInit+0x160>)
 800376e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_UART_MspInit+0x15c>)
 8003772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003776:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003778:	4b33      	ldr	r3, [pc, #204]	; (8003848 <HAL_UART_MspInit+0x15c>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800377e:	4b32      	ldr	r3, [pc, #200]	; (8003848 <HAL_UART_MspInit+0x15c>)
 8003780:	2200      	movs	r2, #0
 8003782:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003784:	4b30      	ldr	r3, [pc, #192]	; (8003848 <HAL_UART_MspInit+0x15c>)
 8003786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800378a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800378c:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <HAL_UART_MspInit+0x15c>)
 800378e:	2200      	movs	r2, #0
 8003790:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003792:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <HAL_UART_MspInit+0x15c>)
 8003794:	2200      	movs	r2, #0
 8003796:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_UART_MspInit+0x15c>)
 800379a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800379e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037a0:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_UART_MspInit+0x15c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037a6:	4b28      	ldr	r3, [pc, #160]	; (8003848 <HAL_UART_MspInit+0x15c>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80037ac:	4826      	ldr	r0, [pc, #152]	; (8003848 <HAL_UART_MspInit+0x15c>)
 80037ae:	f000 ff13 	bl	80045d8 <HAL_DMA_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80037b8:	f7fd fdbc 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a22      	ldr	r2, [pc, #136]	; (8003848 <HAL_UART_MspInit+0x15c>)
 80037c0:	639a      	str	r2, [r3, #56]	; 0x38
 80037c2:	4a21      	ldr	r2, [pc, #132]	; (8003848 <HAL_UART_MspInit+0x15c>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80037c8:	4b21      	ldr	r3, [pc, #132]	; (8003850 <HAL_UART_MspInit+0x164>)
 80037ca:	4a22      	ldr	r2, [pc, #136]	; (8003854 <HAL_UART_MspInit+0x168>)
 80037cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <HAL_UART_MspInit+0x164>)
 80037d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037d4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037d6:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <HAL_UART_MspInit+0x164>)
 80037d8:	2240      	movs	r2, #64	; 0x40
 80037da:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037dc:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_UART_MspInit+0x164>)
 80037de:	2200      	movs	r2, #0
 80037e0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037e2:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <HAL_UART_MspInit+0x164>)
 80037e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ea:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_UART_MspInit+0x164>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <HAL_UART_MspInit+0x164>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <HAL_UART_MspInit+0x164>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037fc:	4b14      	ldr	r3, [pc, #80]	; (8003850 <HAL_UART_MspInit+0x164>)
 80037fe:	2200      	movs	r2, #0
 8003800:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <HAL_UART_MspInit+0x164>)
 8003804:	2200      	movs	r2, #0
 8003806:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003808:	4811      	ldr	r0, [pc, #68]	; (8003850 <HAL_UART_MspInit+0x164>)
 800380a:	f000 fee5 	bl	80045d8 <HAL_DMA_Init>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8003814:	f7fd fd8e 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <HAL_UART_MspInit+0x164>)
 800381c:	635a      	str	r2, [r3, #52]	; 0x34
 800381e:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <HAL_UART_MspInit+0x164>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003824:	2200      	movs	r2, #0
 8003826:	2100      	movs	r1, #0
 8003828:	2027      	movs	r0, #39	; 0x27
 800382a:	f000 fe9e 	bl	800456a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800382e:	2027      	movs	r0, #39	; 0x27
 8003830:	f000 feb7 	bl	80045a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003834:	bf00      	nop
 8003836:	3728      	adds	r7, #40	; 0x28
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40004800 	.word	0x40004800
 8003840:	40023800 	.word	0x40023800
 8003844:	40020800 	.word	0x40020800
 8003848:	200009a8 	.word	0x200009a8
 800384c:	40026028 	.word	0x40026028
 8003850:	20000a08 	.word	0x20000a08
 8003854:	40026058 	.word	0x40026058

08003858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800385c:	e7fe      	b.n	800385c <NMI_Handler+0x4>

0800385e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003862:	e7fe      	b.n	8003862 <HardFault_Handler+0x4>

08003864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003868:	e7fe      	b.n	8003868 <MemManage_Handler+0x4>

0800386a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800386e:	e7fe      	b.n	800386e <BusFault_Handler+0x4>

08003870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003874:	e7fe      	b.n	8003874 <UsageFault_Handler+0x4>

08003876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038a4:	f000 f920 	bl	8003ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038a8:	bf00      	nop
 80038aa:	bd80      	pop	{r7, pc}

080038ac <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler3(joy_pin_Pin);
 80038b0:	2008      	movs	r0, #8
 80038b2:	f001 fc57 	bl	8005164 <HAL_GPIO_EXTI_IRQHandler3>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <DMA1_Stream1_IRQHandler+0x10>)
 80038c2:	f001 f821 	bl	8004908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	200009a8 	.word	0x200009a8

080038d0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <DMA1_Stream3_IRQHandler+0x10>)
 80038d6:	f001 f817 	bl	8004908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000a08 	.word	0x20000a08

080038e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(e_stop_Pin);
 80038e8:	2020      	movs	r0, #32
 80038ea:	f001 fc23 	bl	8005134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80038f8:	4802      	ldr	r0, [pc, #8]	; (8003904 <USART3_IRQHandler+0x10>)
 80038fa:	f002 fb2f 	bl	8005f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000964 	.word	0x20000964

08003908 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800390c:	4802      	ldr	r0, [pc, #8]	; (8003918 <DMA2_Stream0_IRQHandler+0x10>)
 800390e:	f000 fffb 	bl	8004908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000904 	.word	0x20000904

0800391c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
	return 1;
 8003920:	2301      	movs	r3, #1
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <_kill>:

int _kill(int pid, int sig)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003936:	f003 fc0d 	bl	8007154 <__errno>
 800393a:	4603      	mov	r3, r0
 800393c:	2216      	movs	r2, #22
 800393e:	601a      	str	r2, [r3, #0]
	return -1;
 8003940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <_exit>:

void _exit (int status)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003954:	f04f 31ff 	mov.w	r1, #4294967295
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ffe7 	bl	800392c <_kill>
	while (1) {}		/* Make sure we hang here */
 800395e:	e7fe      	b.n	800395e <_exit+0x12>

08003960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003968:	4a14      	ldr	r2, [pc, #80]	; (80039bc <_sbrk+0x5c>)
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <_sbrk+0x60>)
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003974:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <_sbrk+0x64>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <_sbrk+0x64>)
 800397e:	4a12      	ldr	r2, [pc, #72]	; (80039c8 <_sbrk+0x68>)
 8003980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <_sbrk+0x64>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	429a      	cmp	r2, r3
 800398e:	d207      	bcs.n	80039a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003990:	f003 fbe0 	bl	8007154 <__errno>
 8003994:	4603      	mov	r3, r0
 8003996:	220c      	movs	r2, #12
 8003998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	e009      	b.n	80039b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <_sbrk+0x64>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039a6:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <_sbrk+0x64>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	4a05      	ldr	r2, [pc, #20]	; (80039c4 <_sbrk+0x64>)
 80039b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039b2:	68fb      	ldr	r3, [r7, #12]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20020000 	.word	0x20020000
 80039c0:	00000400 	.word	0x00000400
 80039c4:	20001444 	.word	0x20001444
 80039c8:	20001460 	.word	0x20001460

080039cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <SystemInit+0x20>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	4a05      	ldr	r2, [pc, #20]	; (80039ec <SystemInit+0x20>)
 80039d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80039f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039f4:	480d      	ldr	r0, [pc, #52]	; (8003a2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039f6:	490e      	ldr	r1, [pc, #56]	; (8003a30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039f8:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039fc:	e002      	b.n	8003a04 <LoopCopyDataInit>

080039fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a02:	3304      	adds	r3, #4

08003a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a08:	d3f9      	bcc.n	80039fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a0a:	4a0b      	ldr	r2, [pc, #44]	; (8003a38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a0c:	4c0b      	ldr	r4, [pc, #44]	; (8003a3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a10:	e001      	b.n	8003a16 <LoopFillZerobss>

08003a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a14:	3204      	adds	r2, #4

08003a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a18:	d3fb      	bcc.n	8003a12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a1a:	f7ff ffd7 	bl	80039cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a1e:	f003 fb9f 	bl	8007160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a22:	f7fd fa8b 	bl	8000f3c <main>
  bx  lr    
 8003a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a30:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003a34:	080078a0 	.word	0x080078a0
  ldr r2, =_sbss
 8003a38:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003a3c:	2000145c 	.word	0x2000145c

08003a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a40:	e7fe      	b.n	8003a40 <ADC_IRQHandler>
	...

08003a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <HAL_Init+0x40>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a0d      	ldr	r2, [pc, #52]	; (8003a84 <HAL_Init+0x40>)
 8003a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_Init+0x40>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <HAL_Init+0x40>)
 8003a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <HAL_Init+0x40>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a07      	ldr	r2, [pc, #28]	; (8003a84 <HAL_Init+0x40>)
 8003a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a6c:	2003      	movs	r0, #3
 8003a6e:	f000 fd71 	bl	8004554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a72:	2000      	movs	r0, #0
 8003a74:	f000 f808 	bl	8003a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a78:	f7ff fd98 	bl	80035ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023c00 	.word	0x40023c00

08003a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_InitTick+0x54>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_InitTick+0x58>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fd89 	bl	80045be <HAL_SYSTICK_Config>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00e      	b.n	8003ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b0f      	cmp	r3, #15
 8003aba:	d80a      	bhi.n	8003ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003abc:	2200      	movs	r2, #0
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	f000 fd51 	bl	800456a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ac8:	4a06      	ldr	r2, [pc, #24]	; (8003ae4 <HAL_InitTick+0x5c>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	2000001c 	.word	0x2000001c
 8003ae0:	20000024 	.word	0x20000024
 8003ae4:	20000020 	.word	0x20000020

08003ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_IncTick+0x20>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_IncTick+0x24>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4413      	add	r3, r2
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <HAL_IncTick+0x24>)
 8003afa:	6013      	str	r3, [r2, #0]
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000024 	.word	0x20000024
 8003b0c:	20001448 	.word	0x20001448

08003b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return uwTick;
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <HAL_GetTick+0x14>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20001448 	.word	0x20001448

08003b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7ff ffee 	bl	8003b10 <HAL_GetTick>
 8003b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d005      	beq.n	8003b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <HAL_Delay+0x44>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b4e:	bf00      	nop
 8003b50:	f7ff ffde 	bl	8003b10 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d8f7      	bhi.n	8003b50 <HAL_Delay+0x28>
  {
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000024 	.word	0x20000024

08003b70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e033      	b.n	8003bee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fd34 	bl	80035fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d118      	bne.n	8003be0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bb6:	f023 0302 	bic.w	r3, r3, #2
 8003bba:	f043 0202 	orr.w	r2, r3, #2
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa78 	bl	80040b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f023 0303 	bic.w	r3, r3, #3
 8003bd6:	f043 0201 	orr.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
 8003bde:	e001      	b.n	8003be4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_Start_DMA+0x1e>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e0e9      	b.n	8003dea <HAL_ADC_Start_DMA+0x1f2>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d018      	beq.n	8003c5e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c3c:	4b6d      	ldr	r3, [pc, #436]	; (8003df4 <HAL_ADC_Start_DMA+0x1fc>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a6d      	ldr	r2, [pc, #436]	; (8003df8 <HAL_ADC_Start_DMA+0x200>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0c9a      	lsrs	r2, r3, #18
 8003c48:	4613      	mov	r3, r2
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c50:	e002      	b.n	8003c58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f9      	bne.n	8003c52 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6c:	d107      	bne.n	8003c7e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	f040 80a1 	bne.w	8003dd0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c96:	f023 0301 	bic.w	r3, r3, #1
 8003c9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ccc:	d106      	bne.n	8003cdc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f023 0206 	bic.w	r2, r3, #6
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
 8003cda:	e002      	b.n	8003ce2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cea:	4b44      	ldr	r3, [pc, #272]	; (8003dfc <HAL_ADC_Start_DMA+0x204>)
 8003cec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	4a43      	ldr	r2, [pc, #268]	; (8003e00 <HAL_ADC_Start_DMA+0x208>)
 8003cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	4a42      	ldr	r2, [pc, #264]	; (8003e04 <HAL_ADC_Start_DMA+0x20c>)
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	4a41      	ldr	r2, [pc, #260]	; (8003e08 <HAL_ADC_Start_DMA+0x210>)
 8003d04:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d1e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d2e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	334c      	adds	r3, #76	; 0x4c
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f000 fcf8 	bl	8004734 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d12a      	bne.n	8003da6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2d      	ldr	r2, [pc, #180]	; (8003e0c <HAL_ADC_Start_DMA+0x214>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d015      	beq.n	8003d86 <HAL_ADC_Start_DMA+0x18e>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <HAL_ADC_Start_DMA+0x218>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d105      	bne.n	8003d70 <HAL_ADC_Start_DMA+0x178>
 8003d64:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <HAL_ADC_Start_DMA+0x204>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a27      	ldr	r2, [pc, #156]	; (8003e14 <HAL_ADC_Start_DMA+0x21c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d136      	bne.n	8003de8 <HAL_ADC_Start_DMA+0x1f0>
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_ADC_Start_DMA+0x204>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d130      	bne.n	8003de8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d129      	bne.n	8003de8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	e020      	b.n	8003de8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_ADC_Start_DMA+0x214>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d11b      	bne.n	8003de8 <HAL_ADC_Start_DMA+0x1f0>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d114      	bne.n	8003de8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	e00b      	b.n	8003de8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f043 0210 	orr.w	r2, r3, #16
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	f043 0201 	orr.w	r2, r3, #1
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	2000001c 	.word	0x2000001c
 8003df8:	431bde83 	.word	0x431bde83
 8003dfc:	40012300 	.word	0x40012300
 8003e00:	080042b1 	.word	0x080042b1
 8003e04:	0800436b 	.word	0x0800436b
 8003e08:	08004387 	.word	0x08004387
 8003e0c:	40012000 	.word	0x40012000
 8003e10:	40012100 	.word	0x40012100
 8003e14:	40012200 	.word	0x40012200

08003e18 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x1c>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e113      	b.n	8004098 <HAL_ADC_ConfigChannel+0x244>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b09      	cmp	r3, #9
 8003e7e:	d925      	bls.n	8003ecc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68d9      	ldr	r1, [r3, #12]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	3b1e      	subs	r3, #30
 8003e96:	2207      	movs	r2, #7
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43da      	mvns	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68d9      	ldr	r1, [r3, #12]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	4603      	mov	r3, r0
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	4403      	add	r3, r0
 8003ebe:	3b1e      	subs	r3, #30
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	60da      	str	r2, [r3, #12]
 8003eca:	e022      	b.n	8003f12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6919      	ldr	r1, [r3, #16]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4613      	mov	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4413      	add	r3, r2
 8003ee0:	2207      	movs	r2, #7
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	400a      	ands	r2, r1
 8003eee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6919      	ldr	r1, [r3, #16]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4618      	mov	r0, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4403      	add	r3, r0
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b06      	cmp	r3, #6
 8003f18:	d824      	bhi.n	8003f64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	3b05      	subs	r3, #5
 8003f2c:	221f      	movs	r2, #31
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43da      	mvns	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	400a      	ands	r2, r1
 8003f3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	4618      	mov	r0, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	3b05      	subs	r3, #5
 8003f56:	fa00 f203 	lsl.w	r2, r0, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34
 8003f62:	e04c      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b0c      	cmp	r3, #12
 8003f6a:	d824      	bhi.n	8003fb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3b23      	subs	r3, #35	; 0x23
 8003f7e:	221f      	movs	r2, #31
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43da      	mvns	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3b23      	subs	r3, #35	; 0x23
 8003fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb4:	e023      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3b41      	subs	r3, #65	; 0x41
 8003fc8:	221f      	movs	r2, #31
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43da      	mvns	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	3b41      	subs	r3, #65	; 0x41
 8003ff2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ffe:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <HAL_ADC_ConfigChannel+0x250>)
 8004000:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a28      	ldr	r2, [pc, #160]	; (80040a8 <HAL_ADC_ConfigChannel+0x254>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d10f      	bne.n	800402c <HAL_ADC_ConfigChannel+0x1d8>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b12      	cmp	r3, #18
 8004012:	d10b      	bne.n	800402c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1d      	ldr	r2, [pc, #116]	; (80040a8 <HAL_ADC_ConfigChannel+0x254>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d12b      	bne.n	800408e <HAL_ADC_ConfigChannel+0x23a>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <HAL_ADC_ConfigChannel+0x258>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d003      	beq.n	8004048 <HAL_ADC_ConfigChannel+0x1f4>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b11      	cmp	r3, #17
 8004046:	d122      	bne.n	800408e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a11      	ldr	r2, [pc, #68]	; (80040ac <HAL_ADC_ConfigChannel+0x258>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d111      	bne.n	800408e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <HAL_ADC_ConfigChannel+0x25c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a11      	ldr	r2, [pc, #68]	; (80040b4 <HAL_ADC_ConfigChannel+0x260>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	0c9a      	lsrs	r2, r3, #18
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004080:	e002      	b.n	8004088 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	3b01      	subs	r3, #1
 8004086:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f9      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40012300 	.word	0x40012300
 80040a8:	40012000 	.word	0x40012000
 80040ac:	10000012 	.word	0x10000012
 80040b0:	2000001c 	.word	0x2000001c
 80040b4:	431bde83 	.word	0x431bde83

080040b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040c0:	4b79      	ldr	r3, [pc, #484]	; (80042a8 <ADC_Init+0x1f0>)
 80040c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	431a      	orrs	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6859      	ldr	r1, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	021a      	lsls	r2, r3, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6899      	ldr	r1, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	4a58      	ldr	r2, [pc, #352]	; (80042ac <ADC_Init+0x1f4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800415e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6899      	ldr	r1, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	e00f      	b.n	80041b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0202 	bic.w	r2, r2, #2
 80041c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6899      	ldr	r1, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	7e1b      	ldrb	r3, [r3, #24]
 80041d0:	005a      	lsls	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01b      	beq.n	800421c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004202:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	3b01      	subs	r3, #1
 8004210:	035a      	lsls	r2, r3, #13
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	e007      	b.n	800422c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800422a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	3b01      	subs	r3, #1
 8004248:	051a      	lsls	r2, r3, #20
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6899      	ldr	r1, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800426e:	025a      	lsls	r2, r3, #9
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6899      	ldr	r1, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	029a      	lsls	r2, r3, #10
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	40012300 	.word	0x40012300
 80042ac:	0f000001 	.word	0x0f000001

080042b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d13c      	bne.n	8004344 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d12b      	bne.n	800433c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d127      	bne.n	800433c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d006      	beq.n	8004308 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004304:	2b00      	cmp	r3, #0
 8004306:	d119      	bne.n	800433c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0220 	bic.w	r2, r2, #32
 8004316:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	f043 0201 	orr.w	r2, r3, #1
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7ff fd6b 	bl	8003e18 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004342:	e00e      	b.n	8004362 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7ff fd75 	bl	8003e40 <HAL_ADC_ErrorCallback>
}
 8004356:	e004      	b.n	8004362 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4798      	blx	r3
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff fd57 	bl	8003e2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2240      	movs	r2, #64	; 0x40
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	f043 0204 	orr.w	r2, r3, #4
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff fd4a 	bl	8003e40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043c4:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <__NVIC_SetPriorityGrouping+0x44>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043d0:	4013      	ands	r3, r2
 80043d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043e6:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <__NVIC_SetPriorityGrouping+0x44>)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	60d3      	str	r3, [r2, #12]
}
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	e000ed00 	.word	0xe000ed00

080043fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004400:	4b04      	ldr	r3, [pc, #16]	; (8004414 <__NVIC_GetPriorityGrouping+0x18>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	0a1b      	lsrs	r3, r3, #8
 8004406:	f003 0307 	and.w	r3, r3, #7
}
 800440a:	4618      	mov	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004426:	2b00      	cmp	r3, #0
 8004428:	db0b      	blt.n	8004442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	f003 021f 	and.w	r2, r3, #31
 8004430:	4907      	ldr	r1, [pc, #28]	; (8004450 <__NVIC_EnableIRQ+0x38>)
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	2001      	movs	r0, #1
 800443a:	fa00 f202 	lsl.w	r2, r0, r2
 800443e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	e000e100 	.word	0xe000e100

08004454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004464:	2b00      	cmp	r3, #0
 8004466:	db0a      	blt.n	800447e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	b2da      	uxtb	r2, r3
 800446c:	490c      	ldr	r1, [pc, #48]	; (80044a0 <__NVIC_SetPriority+0x4c>)
 800446e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004472:	0112      	lsls	r2, r2, #4
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	440b      	add	r3, r1
 8004478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800447c:	e00a      	b.n	8004494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	4908      	ldr	r1, [pc, #32]	; (80044a4 <__NVIC_SetPriority+0x50>)
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	3b04      	subs	r3, #4
 800448c:	0112      	lsls	r2, r2, #4
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	440b      	add	r3, r1
 8004492:	761a      	strb	r2, [r3, #24]
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	e000e100 	.word	0xe000e100
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b089      	sub	sp, #36	; 0x24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f1c3 0307 	rsb	r3, r3, #7
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	bf28      	it	cs
 80044c6:	2304      	movcs	r3, #4
 80044c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3304      	adds	r3, #4
 80044ce:	2b06      	cmp	r3, #6
 80044d0:	d902      	bls.n	80044d8 <NVIC_EncodePriority+0x30>
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3b03      	subs	r3, #3
 80044d6:	e000      	b.n	80044da <NVIC_EncodePriority+0x32>
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044dc:	f04f 32ff 	mov.w	r2, #4294967295
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43da      	mvns	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	401a      	ands	r2, r3
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044f0:	f04f 31ff 	mov.w	r1, #4294967295
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	fa01 f303 	lsl.w	r3, r1, r3
 80044fa:	43d9      	mvns	r1, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004500:	4313      	orrs	r3, r2
         );
}
 8004502:	4618      	mov	r0, r3
 8004504:	3724      	adds	r7, #36	; 0x24
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3b01      	subs	r3, #1
 800451c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004520:	d301      	bcc.n	8004526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004522:	2301      	movs	r3, #1
 8004524:	e00f      	b.n	8004546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004526:	4a0a      	ldr	r2, [pc, #40]	; (8004550 <SysTick_Config+0x40>)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3b01      	subs	r3, #1
 800452c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800452e:	210f      	movs	r1, #15
 8004530:	f04f 30ff 	mov.w	r0, #4294967295
 8004534:	f7ff ff8e 	bl	8004454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <SysTick_Config+0x40>)
 800453a:	2200      	movs	r2, #0
 800453c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800453e:	4b04      	ldr	r3, [pc, #16]	; (8004550 <SysTick_Config+0x40>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	e000e010 	.word	0xe000e010

08004554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff ff29 	bl	80043b4 <__NVIC_SetPriorityGrouping>
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	4603      	mov	r3, r0
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800457c:	f7ff ff3e 	bl	80043fc <__NVIC_GetPriorityGrouping>
 8004580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	6978      	ldr	r0, [r7, #20]
 8004588:	f7ff ff8e 	bl	80044a8 <NVIC_EncodePriority>
 800458c:	4602      	mov	r2, r0
 800458e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004592:	4611      	mov	r1, r2
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff ff5d 	bl	8004454 <__NVIC_SetPriority>
}
 800459a:	bf00      	nop
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	4603      	mov	r3, r0
 80045aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff ff31 	bl	8004418 <__NVIC_EnableIRQ>
}
 80045b6:	bf00      	nop
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff ffa2 	bl	8004510 <SysTick_Config>
 80045cc:	4603      	mov	r3, r0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045e4:	f7ff fa94 	bl	8003b10 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e099      	b.n	8004728 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004614:	e00f      	b.n	8004636 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004616:	f7ff fa7b 	bl	8003b10 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b05      	cmp	r3, #5
 8004622:	d908      	bls.n	8004636 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2203      	movs	r2, #3
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e078      	b.n	8004728 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e8      	bne.n	8004616 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4b38      	ldr	r3, [pc, #224]	; (8004730 <HAL_DMA_Init+0x158>)
 8004650:	4013      	ands	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004662:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800466e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800467a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	2b04      	cmp	r3, #4
 800468e:	d107      	bne.n	80046a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	4313      	orrs	r3, r2
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 0307 	bic.w	r3, r3, #7
 80046b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d117      	bne.n	80046fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00e      	beq.n	80046fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fb01 	bl	8004ce4 <DMA_CheckFifoParam>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2240      	movs	r2, #64	; 0x40
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046f6:	2301      	movs	r3, #1
 80046f8:	e016      	b.n	8004728 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fab8 	bl	8004c78 <DMA_CalcBaseAndBitshift>
 8004708:	4603      	mov	r3, r0
 800470a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004710:	223f      	movs	r2, #63	; 0x3f
 8004712:	409a      	lsls	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	f010803f 	.word	0xf010803f

08004734 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_DMA_Start_IT+0x26>
 8004756:	2302      	movs	r3, #2
 8004758:	e040      	b.n	80047dc <HAL_DMA_Start_IT+0xa8>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b01      	cmp	r3, #1
 800476c:	d12f      	bne.n	80047ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fa4a 	bl	8004c1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	223f      	movs	r2, #63	; 0x3f
 800478e:	409a      	lsls	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0216 	orr.w	r2, r2, #22
 80047a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0208 	orr.w	r2, r2, #8
 80047ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e005      	b.n	80047da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
 80047d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047f2:	f7ff f98d 	bl	8003b10 <HAL_GetTick>
 80047f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d008      	beq.n	8004816 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2280      	movs	r2, #128	; 0x80
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e052      	b.n	80048bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0216 	bic.w	r2, r2, #22
 8004824:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004834:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d103      	bne.n	8004846 <HAL_DMA_Abort+0x62>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0208 	bic.w	r2, r2, #8
 8004854:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004866:	e013      	b.n	8004890 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004868:	f7ff f952 	bl	8003b10 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b05      	cmp	r3, #5
 8004874:	d90c      	bls.n	8004890 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2203      	movs	r2, #3
 8004880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e015      	b.n	80048bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e4      	bne.n	8004868 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a2:	223f      	movs	r2, #63	; 0x3f
 80048a4:	409a      	lsls	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d004      	beq.n	80048e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2280      	movs	r2, #128	; 0x80
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e00c      	b.n	80048fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2205      	movs	r2, #5
 80048e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0201 	bic.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004914:	4b8e      	ldr	r3, [pc, #568]	; (8004b50 <HAL_DMA_IRQHandler+0x248>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a8e      	ldr	r2, [pc, #568]	; (8004b54 <HAL_DMA_IRQHandler+0x24c>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	0a9b      	lsrs	r3, r3, #10
 8004920:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004926:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	2208      	movs	r2, #8
 8004934:	409a      	lsls	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01a      	beq.n	8004974 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d013      	beq.n	8004974 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0204 	bic.w	r2, r2, #4
 800495a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004960:	2208      	movs	r2, #8
 8004962:	409a      	lsls	r2, r3
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496c:	f043 0201 	orr.w	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004978:	2201      	movs	r2, #1
 800497a:	409a      	lsls	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d012      	beq.n	80049aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004996:	2201      	movs	r2, #1
 8004998:	409a      	lsls	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a2:	f043 0202 	orr.w	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ae:	2204      	movs	r2, #4
 80049b0:	409a      	lsls	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d012      	beq.n	80049e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00b      	beq.n	80049e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049cc:	2204      	movs	r2, #4
 80049ce:	409a      	lsls	r2, r3
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	f043 0204 	orr.w	r2, r3, #4
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e4:	2210      	movs	r2, #16
 80049e6:	409a      	lsls	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d043      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d03c      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a02:	2210      	movs	r2, #16
 8004a04:	409a      	lsls	r2, r3
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d018      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d108      	bne.n	8004a38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d024      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
 8004a36:	e01f      	b.n	8004a78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01b      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
 8004a48:	e016      	b.n	8004a78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0208 	bic.w	r2, r2, #8
 8004a66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 808f 	beq.w	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8087 	beq.w	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	409a      	lsls	r2, r3
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	d136      	bne.n	8004b20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0216 	bic.w	r2, r2, #22
 8004ac0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695a      	ldr	r2, [r3, #20]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <HAL_DMA_IRQHandler+0x1da>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0208 	bic.w	r2, r2, #8
 8004af0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af6:	223f      	movs	r2, #63	; 0x3f
 8004af8:	409a      	lsls	r2, r3
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d07e      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	4798      	blx	r3
        }
        return;
 8004b1e:	e079      	b.n	8004c14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01d      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10d      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d031      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	4798      	blx	r3
 8004b4c:	e02c      	b.n	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
 8004b4e:	bf00      	nop
 8004b50:	2000001c 	.word	0x2000001c
 8004b54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d023      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
 8004b68:	e01e      	b.n	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10f      	bne.n	8004b98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0210 	bic.w	r2, r2, #16
 8004b86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d032      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d022      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2205      	movs	r2, #5
 8004bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0201 	bic.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d307      	bcc.n	8004bf0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f2      	bne.n	8004bd4 <HAL_DMA_IRQHandler+0x2cc>
 8004bee:	e000      	b.n	8004bf2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004bf0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
 8004c12:	e000      	b.n	8004c16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c14:	bf00      	nop
    }
  }
}
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d108      	bne.n	8004c5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c5a:	e007      	b.n	8004c6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	60da      	str	r2, [r3, #12]
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	3b10      	subs	r3, #16
 8004c88:	4a14      	ldr	r2, [pc, #80]	; (8004cdc <DMA_CalcBaseAndBitshift+0x64>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c92:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d909      	bls.n	8004cba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	1d1a      	adds	r2, r3, #4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	659a      	str	r2, [r3, #88]	; 0x58
 8004cb8:	e007      	b.n	8004cca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cc2:	f023 0303 	bic.w	r3, r3, #3
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	aaaaaaab 	.word	0xaaaaaaab
 8004ce0:	08007880 	.word	0x08007880

08004ce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d11f      	bne.n	8004d3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d856      	bhi.n	8004db2 <DMA_CheckFifoParam+0xce>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <DMA_CheckFifoParam+0x28>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d1d 	.word	0x08004d1d
 8004d10:	08004d2f 	.word	0x08004d2f
 8004d14:	08004d1d 	.word	0x08004d1d
 8004d18:	08004db3 	.word	0x08004db3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d046      	beq.n	8004db6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2c:	e043      	b.n	8004db6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d36:	d140      	bne.n	8004dba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d3c:	e03d      	b.n	8004dba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d46:	d121      	bne.n	8004d8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d837      	bhi.n	8004dbe <DMA_CheckFifoParam+0xda>
 8004d4e:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <DMA_CheckFifoParam+0x70>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d65 	.word	0x08004d65
 8004d58:	08004d6b 	.word	0x08004d6b
 8004d5c:	08004d65 	.word	0x08004d65
 8004d60:	08004d7d 	.word	0x08004d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      break;
 8004d68:	e030      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d025      	beq.n	8004dc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d7a:	e022      	b.n	8004dc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d84:	d11f      	bne.n	8004dc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d8a:	e01c      	b.n	8004dc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d903      	bls.n	8004d9a <DMA_CheckFifoParam+0xb6>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d003      	beq.n	8004da0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d98:	e018      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d9e:	e015      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00e      	beq.n	8004dca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      break;
 8004db0:	e00b      	b.n	8004dca <DMA_CheckFifoParam+0xe6>
      break;
 8004db2:	bf00      	nop
 8004db4:	e00a      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      break;
 8004db6:	bf00      	nop
 8004db8:	e008      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e006      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e004      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e002      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      break;   
 8004dc6:	bf00      	nop
 8004dc8:	e000      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      break;
 8004dca:	bf00      	nop
    }
  } 
  
  return status; 
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop

08004ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b089      	sub	sp, #36	; 0x24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	e165      	b.n	80050c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004df8:	2201      	movs	r2, #1
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	f040 8154 	bne.w	80050be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d005      	beq.n	8004e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d130      	bne.n	8004e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	2203      	movs	r2, #3
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4013      	ands	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e64:	2201      	movs	r2, #1
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4013      	ands	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	091b      	lsrs	r3, r3, #4
 8004e7a:	f003 0201 	and.w	r2, r3, #1
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d017      	beq.n	8004ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d123      	bne.n	8004f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	08da      	lsrs	r2, r3, #3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3208      	adds	r2, #8
 8004ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	220f      	movs	r2, #15
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	08da      	lsrs	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3208      	adds	r2, #8
 8004f1a:	69b9      	ldr	r1, [r7, #24]
 8004f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4013      	ands	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 0203 	and.w	r2, r3, #3
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80ae 	beq.w	80050be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	4b5d      	ldr	r3, [pc, #372]	; (80050dc <HAL_GPIO_Init+0x300>)
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	4a5c      	ldr	r2, [pc, #368]	; (80050dc <HAL_GPIO_Init+0x300>)
 8004f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f70:	6453      	str	r3, [r2, #68]	; 0x44
 8004f72:	4b5a      	ldr	r3, [pc, #360]	; (80050dc <HAL_GPIO_Init+0x300>)
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f7e:	4a58      	ldr	r2, [pc, #352]	; (80050e0 <HAL_GPIO_Init+0x304>)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	3302      	adds	r3, #2
 8004f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	220f      	movs	r2, #15
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a4f      	ldr	r2, [pc, #316]	; (80050e4 <HAL_GPIO_Init+0x308>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d025      	beq.n	8004ff6 <HAL_GPIO_Init+0x21a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a4e      	ldr	r2, [pc, #312]	; (80050e8 <HAL_GPIO_Init+0x30c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01f      	beq.n	8004ff2 <HAL_GPIO_Init+0x216>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a4d      	ldr	r2, [pc, #308]	; (80050ec <HAL_GPIO_Init+0x310>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d019      	beq.n	8004fee <HAL_GPIO_Init+0x212>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a4c      	ldr	r2, [pc, #304]	; (80050f0 <HAL_GPIO_Init+0x314>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d013      	beq.n	8004fea <HAL_GPIO_Init+0x20e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a4b      	ldr	r2, [pc, #300]	; (80050f4 <HAL_GPIO_Init+0x318>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00d      	beq.n	8004fe6 <HAL_GPIO_Init+0x20a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a4a      	ldr	r2, [pc, #296]	; (80050f8 <HAL_GPIO_Init+0x31c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d007      	beq.n	8004fe2 <HAL_GPIO_Init+0x206>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a49      	ldr	r2, [pc, #292]	; (80050fc <HAL_GPIO_Init+0x320>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <HAL_GPIO_Init+0x202>
 8004fda:	2306      	movs	r3, #6
 8004fdc:	e00c      	b.n	8004ff8 <HAL_GPIO_Init+0x21c>
 8004fde:	2307      	movs	r3, #7
 8004fe0:	e00a      	b.n	8004ff8 <HAL_GPIO_Init+0x21c>
 8004fe2:	2305      	movs	r3, #5
 8004fe4:	e008      	b.n	8004ff8 <HAL_GPIO_Init+0x21c>
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	e006      	b.n	8004ff8 <HAL_GPIO_Init+0x21c>
 8004fea:	2303      	movs	r3, #3
 8004fec:	e004      	b.n	8004ff8 <HAL_GPIO_Init+0x21c>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e002      	b.n	8004ff8 <HAL_GPIO_Init+0x21c>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <HAL_GPIO_Init+0x21c>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	f002 0203 	and.w	r2, r2, #3
 8004ffe:	0092      	lsls	r2, r2, #2
 8005000:	4093      	lsls	r3, r2
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005008:	4935      	ldr	r1, [pc, #212]	; (80050e0 <HAL_GPIO_Init+0x304>)
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	3302      	adds	r3, #2
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005016:	4b3a      	ldr	r3, [pc, #232]	; (8005100 <HAL_GPIO_Init+0x324>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800503a:	4a31      	ldr	r2, [pc, #196]	; (8005100 <HAL_GPIO_Init+0x324>)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005040:	4b2f      	ldr	r3, [pc, #188]	; (8005100 <HAL_GPIO_Init+0x324>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	43db      	mvns	r3, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4013      	ands	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005064:	4a26      	ldr	r2, [pc, #152]	; (8005100 <HAL_GPIO_Init+0x324>)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800506a:	4b25      	ldr	r3, [pc, #148]	; (8005100 <HAL_GPIO_Init+0x324>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	43db      	mvns	r3, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4013      	ands	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800508e:	4a1c      	ldr	r2, [pc, #112]	; (8005100 <HAL_GPIO_Init+0x324>)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005094:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <HAL_GPIO_Init+0x324>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	43db      	mvns	r3, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4013      	ands	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050b8:	4a11      	ldr	r2, [pc, #68]	; (8005100 <HAL_GPIO_Init+0x324>)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3301      	adds	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	f67f ae96 	bls.w	8004df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	3724      	adds	r7, #36	; 0x24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40023800 	.word	0x40023800
 80050e0:	40013800 	.word	0x40013800
 80050e4:	40020000 	.word	0x40020000
 80050e8:	40020400 	.word	0x40020400
 80050ec:	40020800 	.word	0x40020800
 80050f0:	40020c00 	.word	0x40020c00
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40021400 	.word	0x40021400
 80050fc:	40021800 	.word	0x40021800
 8005100:	40013c00 	.word	0x40013c00

08005104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	887b      	ldrh	r3, [r7, #2]
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800511c:	2301      	movs	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]
 8005120:	e001      	b.n	8005126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005122:	2300      	movs	r3, #0
 8005124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005126:	7bfb      	ldrb	r3, [r7, #15]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d006      	beq.n	8005158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800514a:	4a05      	ldr	r2, [pc, #20]	; (8005160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd fbc0 	bl	80028d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40013c00 	.word	0x40013c00

08005164 <HAL_GPIO_EXTI_IRQHandler3>:

void HAL_GPIO_EXTI_IRQHandler3(uint16_t GPIO_Pin)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800516e:	4b08      	ldr	r3, [pc, #32]	; (8005190 <HAL_GPIO_EXTI_IRQHandler3+0x2c>)
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d006      	beq.n	8005188 <HAL_GPIO_EXTI_IRQHandler3+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800517a:	4a05      	ldr	r2, [pc, #20]	; (8005190 <HAL_GPIO_EXTI_IRQHandler3+0x2c>)
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback3(GPIO_Pin);
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fd fbd2 	bl	800292c <HAL_GPIO_EXTI_Callback3>
  }
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40013c00 	.word	0x40013c00

08005194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0cc      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051a8:	4b68      	ldr	r3, [pc, #416]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d90c      	bls.n	80051d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b6:	4b65      	ldr	r3, [pc, #404]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b63      	ldr	r3, [pc, #396]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0b8      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d020      	beq.n	800521e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e8:	4b59      	ldr	r3, [pc, #356]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a58      	ldr	r2, [pc, #352]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005200:	4b53      	ldr	r3, [pc, #332]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4a52      	ldr	r2, [pc, #328]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800520a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800520c:	4b50      	ldr	r3, [pc, #320]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	494d      	ldr	r1, [pc, #308]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d044      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005232:	4b47      	ldr	r3, [pc, #284]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d119      	bne.n	8005272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e07f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d003      	beq.n	8005252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800524e:	2b03      	cmp	r3, #3
 8005250:	d107      	bne.n	8005262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005252:	4b3f      	ldr	r3, [pc, #252]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e06f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005262:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e067      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005272:	4b37      	ldr	r3, [pc, #220]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f023 0203 	bic.w	r2, r3, #3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4934      	ldr	r1, [pc, #208]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	4313      	orrs	r3, r2
 8005282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005284:	f7fe fc44 	bl	8003b10 <HAL_GetTick>
 8005288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528c:	f7fe fc40 	bl	8003b10 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	; 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e04f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a2:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 020c 	and.w	r2, r3, #12
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d1eb      	bne.n	800528c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052b4:	4b25      	ldr	r3, [pc, #148]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d20c      	bcs.n	80052dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c2:	4b22      	ldr	r3, [pc, #136]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e032      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4916      	ldr	r1, [pc, #88]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	490e      	ldr	r1, [pc, #56]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800531a:	f000 f855 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 800531e:	4602      	mov	r2, r0
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	490a      	ldr	r1, [pc, #40]	; (8005354 <HAL_RCC_ClockConfig+0x1c0>)
 800532c:	5ccb      	ldrb	r3, [r1, r3]
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <HAL_RCC_ClockConfig+0x1c4>)
 8005334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCC_ClockConfig+0x1c8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7fe fba4 	bl	8003a88 <HAL_InitTick>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023c00 	.word	0x40023c00
 8005350:	40023800 	.word	0x40023800
 8005354:	08007868 	.word	0x08007868
 8005358:	2000001c 	.word	0x2000001c
 800535c:	20000020 	.word	0x20000020

08005360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005364:	4b03      	ldr	r3, [pc, #12]	; (8005374 <HAL_RCC_GetHCLKFreq+0x14>)
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	2000001c 	.word	0x2000001c

08005378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800537c:	f7ff fff0 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 8005380:	4602      	mov	r2, r0
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	0a9b      	lsrs	r3, r3, #10
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	4903      	ldr	r1, [pc, #12]	; (800539c <HAL_RCC_GetPCLK1Freq+0x24>)
 800538e:	5ccb      	ldrb	r3, [r1, r3]
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40023800 	.word	0x40023800
 800539c:	08007878 	.word	0x08007878

080053a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053a4:	f7ff ffdc 	bl	8005360 <HAL_RCC_GetHCLKFreq>
 80053a8:	4602      	mov	r2, r0
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	0b5b      	lsrs	r3, r3, #13
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4903      	ldr	r1, [pc, #12]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053b6:	5ccb      	ldrb	r3, [r1, r3]
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053bc:	4618      	mov	r0, r3
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40023800 	.word	0x40023800
 80053c4:	08007878 	.word	0x08007878

080053c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053cc:	b0ae      	sub	sp, #184	; 0xb8
 80053ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053ee:	4bcb      	ldr	r3, [pc, #812]	; (800571c <HAL_RCC_GetSysClockFreq+0x354>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	2b0c      	cmp	r3, #12
 80053f8:	f200 8206 	bhi.w	8005808 <HAL_RCC_GetSysClockFreq+0x440>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <HAL_RCC_GetSysClockFreq+0x3c>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005439 	.word	0x08005439
 8005408:	08005809 	.word	0x08005809
 800540c:	08005809 	.word	0x08005809
 8005410:	08005809 	.word	0x08005809
 8005414:	08005441 	.word	0x08005441
 8005418:	08005809 	.word	0x08005809
 800541c:	08005809 	.word	0x08005809
 8005420:	08005809 	.word	0x08005809
 8005424:	08005449 	.word	0x08005449
 8005428:	08005809 	.word	0x08005809
 800542c:	08005809 	.word	0x08005809
 8005430:	08005809 	.word	0x08005809
 8005434:	08005639 	.word	0x08005639
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005438:	4bb9      	ldr	r3, [pc, #740]	; (8005720 <HAL_RCC_GetSysClockFreq+0x358>)
 800543a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800543e:	e1e7      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005440:	4bb8      	ldr	r3, [pc, #736]	; (8005724 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005446:	e1e3      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005448:	4bb4      	ldr	r3, [pc, #720]	; (800571c <HAL_RCC_GetSysClockFreq+0x354>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005450:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005454:	4bb1      	ldr	r3, [pc, #708]	; (800571c <HAL_RCC_GetSysClockFreq+0x354>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d071      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005460:	4bae      	ldr	r3, [pc, #696]	; (800571c <HAL_RCC_GetSysClockFreq+0x354>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	099b      	lsrs	r3, r3, #6
 8005466:	2200      	movs	r2, #0
 8005468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800546c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005470:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005478:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800547c:	2300      	movs	r3, #0
 800547e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005482:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005486:	4622      	mov	r2, r4
 8005488:	462b      	mov	r3, r5
 800548a:	f04f 0000 	mov.w	r0, #0
 800548e:	f04f 0100 	mov.w	r1, #0
 8005492:	0159      	lsls	r1, r3, #5
 8005494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005498:	0150      	lsls	r0, r2, #5
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4621      	mov	r1, r4
 80054a0:	1a51      	subs	r1, r2, r1
 80054a2:	6439      	str	r1, [r7, #64]	; 0x40
 80054a4:	4629      	mov	r1, r5
 80054a6:	eb63 0301 	sbc.w	r3, r3, r1
 80054aa:	647b      	str	r3, [r7, #68]	; 0x44
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80054b8:	4649      	mov	r1, r9
 80054ba:	018b      	lsls	r3, r1, #6
 80054bc:	4641      	mov	r1, r8
 80054be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054c2:	4641      	mov	r1, r8
 80054c4:	018a      	lsls	r2, r1, #6
 80054c6:	4641      	mov	r1, r8
 80054c8:	1a51      	subs	r1, r2, r1
 80054ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80054cc:	4649      	mov	r1, r9
 80054ce:	eb63 0301 	sbc.w	r3, r3, r1
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80054e0:	4649      	mov	r1, r9
 80054e2:	00cb      	lsls	r3, r1, #3
 80054e4:	4641      	mov	r1, r8
 80054e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ea:	4641      	mov	r1, r8
 80054ec:	00ca      	lsls	r2, r1, #3
 80054ee:	4610      	mov	r0, r2
 80054f0:	4619      	mov	r1, r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	4622      	mov	r2, r4
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	633b      	str	r3, [r7, #48]	; 0x30
 80054fa:	462b      	mov	r3, r5
 80054fc:	460a      	mov	r2, r1
 80054fe:	eb42 0303 	adc.w	r3, r2, r3
 8005502:	637b      	str	r3, [r7, #52]	; 0x34
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005510:	4629      	mov	r1, r5
 8005512:	024b      	lsls	r3, r1, #9
 8005514:	4621      	mov	r1, r4
 8005516:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800551a:	4621      	mov	r1, r4
 800551c:	024a      	lsls	r2, r1, #9
 800551e:	4610      	mov	r0, r2
 8005520:	4619      	mov	r1, r3
 8005522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005526:	2200      	movs	r2, #0
 8005528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800552c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005530:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005534:	f7fb f9a4 	bl	8000880 <__aeabi_uldivmod>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4613      	mov	r3, r2
 800553e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005542:	e067      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005544:	4b75      	ldr	r3, [pc, #468]	; (800571c <HAL_RCC_GetSysClockFreq+0x354>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	099b      	lsrs	r3, r3, #6
 800554a:	2200      	movs	r2, #0
 800554c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005550:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005554:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555c:	67bb      	str	r3, [r7, #120]	; 0x78
 800555e:	2300      	movs	r3, #0
 8005560:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005562:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005566:	4622      	mov	r2, r4
 8005568:	462b      	mov	r3, r5
 800556a:	f04f 0000 	mov.w	r0, #0
 800556e:	f04f 0100 	mov.w	r1, #0
 8005572:	0159      	lsls	r1, r3, #5
 8005574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005578:	0150      	lsls	r0, r2, #5
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4621      	mov	r1, r4
 8005580:	1a51      	subs	r1, r2, r1
 8005582:	62b9      	str	r1, [r7, #40]	; 0x28
 8005584:	4629      	mov	r1, r5
 8005586:	eb63 0301 	sbc.w	r3, r3, r1
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005598:	4649      	mov	r1, r9
 800559a:	018b      	lsls	r3, r1, #6
 800559c:	4641      	mov	r1, r8
 800559e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055a2:	4641      	mov	r1, r8
 80055a4:	018a      	lsls	r2, r1, #6
 80055a6:	4641      	mov	r1, r8
 80055a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80055ac:	4649      	mov	r1, r9
 80055ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	f04f 0300 	mov.w	r3, #0
 80055ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c6:	4692      	mov	sl, r2
 80055c8:	469b      	mov	fp, r3
 80055ca:	4623      	mov	r3, r4
 80055cc:	eb1a 0303 	adds.w	r3, sl, r3
 80055d0:	623b      	str	r3, [r7, #32]
 80055d2:	462b      	mov	r3, r5
 80055d4:	eb4b 0303 	adc.w	r3, fp, r3
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80055e6:	4629      	mov	r1, r5
 80055e8:	028b      	lsls	r3, r1, #10
 80055ea:	4621      	mov	r1, r4
 80055ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055f0:	4621      	mov	r1, r4
 80055f2:	028a      	lsls	r2, r1, #10
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055fc:	2200      	movs	r2, #0
 80055fe:	673b      	str	r3, [r7, #112]	; 0x70
 8005600:	677a      	str	r2, [r7, #116]	; 0x74
 8005602:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005606:	f7fb f93b 	bl	8000880 <__aeabi_uldivmod>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4613      	mov	r3, r2
 8005610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005614:	4b41      	ldr	r3, [pc, #260]	; (800571c <HAL_RCC_GetSysClockFreq+0x354>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	3301      	adds	r3, #1
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800562a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800562e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005636:	e0eb      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005638:	4b38      	ldr	r3, [pc, #224]	; (800571c <HAL_RCC_GetSysClockFreq+0x354>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005644:	4b35      	ldr	r3, [pc, #212]	; (800571c <HAL_RCC_GetSysClockFreq+0x354>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d06b      	beq.n	8005728 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005650:	4b32      	ldr	r3, [pc, #200]	; (800571c <HAL_RCC_GetSysClockFreq+0x354>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	099b      	lsrs	r3, r3, #6
 8005656:	2200      	movs	r2, #0
 8005658:	66bb      	str	r3, [r7, #104]	; 0x68
 800565a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800565c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800565e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005662:	663b      	str	r3, [r7, #96]	; 0x60
 8005664:	2300      	movs	r3, #0
 8005666:	667b      	str	r3, [r7, #100]	; 0x64
 8005668:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800566c:	4622      	mov	r2, r4
 800566e:	462b      	mov	r3, r5
 8005670:	f04f 0000 	mov.w	r0, #0
 8005674:	f04f 0100 	mov.w	r1, #0
 8005678:	0159      	lsls	r1, r3, #5
 800567a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800567e:	0150      	lsls	r0, r2, #5
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4621      	mov	r1, r4
 8005686:	1a51      	subs	r1, r2, r1
 8005688:	61b9      	str	r1, [r7, #24]
 800568a:	4629      	mov	r1, r5
 800568c:	eb63 0301 	sbc.w	r3, r3, r1
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800569e:	4659      	mov	r1, fp
 80056a0:	018b      	lsls	r3, r1, #6
 80056a2:	4651      	mov	r1, sl
 80056a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056a8:	4651      	mov	r1, sl
 80056aa:	018a      	lsls	r2, r1, #6
 80056ac:	4651      	mov	r1, sl
 80056ae:	ebb2 0801 	subs.w	r8, r2, r1
 80056b2:	4659      	mov	r1, fp
 80056b4:	eb63 0901 	sbc.w	r9, r3, r1
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056cc:	4690      	mov	r8, r2
 80056ce:	4699      	mov	r9, r3
 80056d0:	4623      	mov	r3, r4
 80056d2:	eb18 0303 	adds.w	r3, r8, r3
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	462b      	mov	r3, r5
 80056da:	eb49 0303 	adc.w	r3, r9, r3
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80056ec:	4629      	mov	r1, r5
 80056ee:	024b      	lsls	r3, r1, #9
 80056f0:	4621      	mov	r1, r4
 80056f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056f6:	4621      	mov	r1, r4
 80056f8:	024a      	lsls	r2, r1, #9
 80056fa:	4610      	mov	r0, r2
 80056fc:	4619      	mov	r1, r3
 80056fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005702:	2200      	movs	r2, #0
 8005704:	65bb      	str	r3, [r7, #88]	; 0x58
 8005706:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005708:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800570c:	f7fb f8b8 	bl	8000880 <__aeabi_uldivmod>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4613      	mov	r3, r2
 8005716:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800571a:	e065      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x420>
 800571c:	40023800 	.word	0x40023800
 8005720:	00f42400 	.word	0x00f42400
 8005724:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005728:	4b3d      	ldr	r3, [pc, #244]	; (8005820 <HAL_RCC_GetSysClockFreq+0x458>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	099b      	lsrs	r3, r3, #6
 800572e:	2200      	movs	r2, #0
 8005730:	4618      	mov	r0, r3
 8005732:	4611      	mov	r1, r2
 8005734:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005738:	653b      	str	r3, [r7, #80]	; 0x50
 800573a:	2300      	movs	r3, #0
 800573c:	657b      	str	r3, [r7, #84]	; 0x54
 800573e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005742:	4642      	mov	r2, r8
 8005744:	464b      	mov	r3, r9
 8005746:	f04f 0000 	mov.w	r0, #0
 800574a:	f04f 0100 	mov.w	r1, #0
 800574e:	0159      	lsls	r1, r3, #5
 8005750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005754:	0150      	lsls	r0, r2, #5
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4641      	mov	r1, r8
 800575c:	1a51      	subs	r1, r2, r1
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	4649      	mov	r1, r9
 8005762:	eb63 0301 	sbc.w	r3, r3, r1
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005774:	4659      	mov	r1, fp
 8005776:	018b      	lsls	r3, r1, #6
 8005778:	4651      	mov	r1, sl
 800577a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800577e:	4651      	mov	r1, sl
 8005780:	018a      	lsls	r2, r1, #6
 8005782:	4651      	mov	r1, sl
 8005784:	1a54      	subs	r4, r2, r1
 8005786:	4659      	mov	r1, fp
 8005788:	eb63 0501 	sbc.w	r5, r3, r1
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	00eb      	lsls	r3, r5, #3
 8005796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800579a:	00e2      	lsls	r2, r4, #3
 800579c:	4614      	mov	r4, r2
 800579e:	461d      	mov	r5, r3
 80057a0:	4643      	mov	r3, r8
 80057a2:	18e3      	adds	r3, r4, r3
 80057a4:	603b      	str	r3, [r7, #0]
 80057a6:	464b      	mov	r3, r9
 80057a8:	eb45 0303 	adc.w	r3, r5, r3
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057ba:	4629      	mov	r1, r5
 80057bc:	028b      	lsls	r3, r1, #10
 80057be:	4621      	mov	r1, r4
 80057c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057c4:	4621      	mov	r1, r4
 80057c6:	028a      	lsls	r2, r1, #10
 80057c8:	4610      	mov	r0, r2
 80057ca:	4619      	mov	r1, r3
 80057cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057d0:	2200      	movs	r2, #0
 80057d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057d4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80057d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057da:	f7fb f851 	bl	8000880 <__aeabi_uldivmod>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4613      	mov	r3, r2
 80057e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80057e8:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <HAL_RCC_GetSysClockFreq+0x458>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	0f1b      	lsrs	r3, r3, #28
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80057f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005806:	e003      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005808:	4b06      	ldr	r3, [pc, #24]	; (8005824 <HAL_RCC_GetSysClockFreq+0x45c>)
 800580a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800580e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005810:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005814:	4618      	mov	r0, r3
 8005816:	37b8      	adds	r7, #184	; 0xb8
 8005818:	46bd      	mov	sp, r7
 800581a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800581e:	bf00      	nop
 8005820:	40023800 	.word	0x40023800
 8005824:	00f42400 	.word	0x00f42400

08005828 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e28d      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8083 	beq.w	800594e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005848:	4b94      	ldr	r3, [pc, #592]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f003 030c 	and.w	r3, r3, #12
 8005850:	2b04      	cmp	r3, #4
 8005852:	d019      	beq.n	8005888 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005854:	4b91      	ldr	r3, [pc, #580]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800585c:	2b08      	cmp	r3, #8
 800585e:	d106      	bne.n	800586e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005860:	4b8e      	ldr	r3, [pc, #568]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800586c:	d00c      	beq.n	8005888 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800586e:	4b8b      	ldr	r3, [pc, #556]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005876:	2b0c      	cmp	r3, #12
 8005878:	d112      	bne.n	80058a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800587a:	4b88      	ldr	r3, [pc, #544]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005886:	d10b      	bne.n	80058a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005888:	4b84      	ldr	r3, [pc, #528]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d05b      	beq.n	800594c <HAL_RCC_OscConfig+0x124>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d157      	bne.n	800594c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e25a      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a8:	d106      	bne.n	80058b8 <HAL_RCC_OscConfig+0x90>
 80058aa:	4b7c      	ldr	r3, [pc, #496]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a7b      	ldr	r2, [pc, #492]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80058b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	e01d      	b.n	80058f4 <HAL_RCC_OscConfig+0xcc>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058c0:	d10c      	bne.n	80058dc <HAL_RCC_OscConfig+0xb4>
 80058c2:	4b76      	ldr	r3, [pc, #472]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a75      	ldr	r2, [pc, #468]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80058c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	4b73      	ldr	r3, [pc, #460]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a72      	ldr	r2, [pc, #456]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80058d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	e00b      	b.n	80058f4 <HAL_RCC_OscConfig+0xcc>
 80058dc:	4b6f      	ldr	r3, [pc, #444]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a6e      	ldr	r2, [pc, #440]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80058e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	4b6c      	ldr	r3, [pc, #432]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a6b      	ldr	r2, [pc, #428]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80058ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d013      	beq.n	8005924 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fe f908 	bl	8003b10 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005904:	f7fe f904 	bl	8003b10 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b64      	cmp	r3, #100	; 0x64
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e21f      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005916:	4b61      	ldr	r3, [pc, #388]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f0      	beq.n	8005904 <HAL_RCC_OscConfig+0xdc>
 8005922:	e014      	b.n	800594e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fe f8f4 	bl	8003b10 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800592c:	f7fe f8f0 	bl	8003b10 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b64      	cmp	r3, #100	; 0x64
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e20b      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800593e:	4b57      	ldr	r3, [pc, #348]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x104>
 800594a:	e000      	b.n	800594e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d06f      	beq.n	8005a3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800595a:	4b50      	ldr	r3, [pc, #320]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 030c 	and.w	r3, r3, #12
 8005962:	2b00      	cmp	r3, #0
 8005964:	d017      	beq.n	8005996 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005966:	4b4d      	ldr	r3, [pc, #308]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800596e:	2b08      	cmp	r3, #8
 8005970:	d105      	bne.n	800597e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005972:	4b4a      	ldr	r3, [pc, #296]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00b      	beq.n	8005996 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800597e:	4b47      	ldr	r3, [pc, #284]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005986:	2b0c      	cmp	r3, #12
 8005988:	d11c      	bne.n	80059c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800598a:	4b44      	ldr	r3, [pc, #272]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d116      	bne.n	80059c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005996:	4b41      	ldr	r3, [pc, #260]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <HAL_RCC_OscConfig+0x186>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d001      	beq.n	80059ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e1d3      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ae:	4b3b      	ldr	r3, [pc, #236]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4937      	ldr	r1, [pc, #220]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059c2:	e03a      	b.n	8005a3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d020      	beq.n	8005a0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059cc:	4b34      	ldr	r3, [pc, #208]	; (8005aa0 <HAL_RCC_OscConfig+0x278>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d2:	f7fe f89d 	bl	8003b10 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059da:	f7fe f899 	bl	8003b10 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e1b4      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ec:	4b2b      	ldr	r3, [pc, #172]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f0      	beq.n	80059da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f8:	4b28      	ldr	r3, [pc, #160]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	4925      	ldr	r1, [pc, #148]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	600b      	str	r3, [r1, #0]
 8005a0c:	e015      	b.n	8005a3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a0e:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <HAL_RCC_OscConfig+0x278>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a14:	f7fe f87c 	bl	8003b10 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a1c:	f7fe f878 	bl	8003b10 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e193      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2e:	4b1b      	ldr	r3, [pc, #108]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d036      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d016      	beq.n	8005a7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a4e:	4b15      	ldr	r3, [pc, #84]	; (8005aa4 <HAL_RCC_OscConfig+0x27c>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a54:	f7fe f85c 	bl	8003b10 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a5c:	f7fe f858 	bl	8003b10 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e173      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <HAL_RCC_OscConfig+0x274>)
 8005a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0f0      	beq.n	8005a5c <HAL_RCC_OscConfig+0x234>
 8005a7a:	e01b      	b.n	8005ab4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a7c:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <HAL_RCC_OscConfig+0x27c>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a82:	f7fe f845 	bl	8003b10 <HAL_GetTick>
 8005a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a88:	e00e      	b.n	8005aa8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a8a:	f7fe f841 	bl	8003b10 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d907      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e15c      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	42470000 	.word	0x42470000
 8005aa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa8:	4b8a      	ldr	r3, [pc, #552]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1ea      	bne.n	8005a8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8097 	beq.w	8005bf0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ac6:	4b83      	ldr	r3, [pc, #524]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10f      	bne.n	8005af2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	4b7f      	ldr	r3, [pc, #508]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	4a7e      	ldr	r2, [pc, #504]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ae2:	4b7c      	ldr	r3, [pc, #496]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aea:	60bb      	str	r3, [r7, #8]
 8005aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af2:	4b79      	ldr	r3, [pc, #484]	; (8005cd8 <HAL_RCC_OscConfig+0x4b0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d118      	bne.n	8005b30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005afe:	4b76      	ldr	r3, [pc, #472]	; (8005cd8 <HAL_RCC_OscConfig+0x4b0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a75      	ldr	r2, [pc, #468]	; (8005cd8 <HAL_RCC_OscConfig+0x4b0>)
 8005b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b0a:	f7fe f801 	bl	8003b10 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b12:	f7fd fffd 	bl	8003b10 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e118      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b24:	4b6c      	ldr	r3, [pc, #432]	; (8005cd8 <HAL_RCC_OscConfig+0x4b0>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d106      	bne.n	8005b46 <HAL_RCC_OscConfig+0x31e>
 8005b38:	4b66      	ldr	r3, [pc, #408]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	4a65      	ldr	r2, [pc, #404]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005b3e:	f043 0301 	orr.w	r3, r3, #1
 8005b42:	6713      	str	r3, [r2, #112]	; 0x70
 8005b44:	e01c      	b.n	8005b80 <HAL_RCC_OscConfig+0x358>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b05      	cmp	r3, #5
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RCC_OscConfig+0x340>
 8005b4e:	4b61      	ldr	r3, [pc, #388]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	4a60      	ldr	r2, [pc, #384]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005b54:	f043 0304 	orr.w	r3, r3, #4
 8005b58:	6713      	str	r3, [r2, #112]	; 0x70
 8005b5a:	4b5e      	ldr	r3, [pc, #376]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	4a5d      	ldr	r2, [pc, #372]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	6713      	str	r3, [r2, #112]	; 0x70
 8005b66:	e00b      	b.n	8005b80 <HAL_RCC_OscConfig+0x358>
 8005b68:	4b5a      	ldr	r3, [pc, #360]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6c:	4a59      	ldr	r2, [pc, #356]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	6713      	str	r3, [r2, #112]	; 0x70
 8005b74:	4b57      	ldr	r3, [pc, #348]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b78:	4a56      	ldr	r2, [pc, #344]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005b7a:	f023 0304 	bic.w	r3, r3, #4
 8005b7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d015      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b88:	f7fd ffc2 	bl	8003b10 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b90:	f7fd ffbe 	bl	8003b10 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e0d7      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba6:	4b4b      	ldr	r3, [pc, #300]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0ee      	beq.n	8005b90 <HAL_RCC_OscConfig+0x368>
 8005bb2:	e014      	b.n	8005bde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb4:	f7fd ffac 	bl	8003b10 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bba:	e00a      	b.n	8005bd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bbc:	f7fd ffa8 	bl	8003b10 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e0c1      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bd2:	4b40      	ldr	r3, [pc, #256]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1ee      	bne.n	8005bbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d105      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be4:	4b3b      	ldr	r3, [pc, #236]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	4a3a      	ldr	r2, [pc, #232]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 80ad 	beq.w	8005d54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bfa:	4b36      	ldr	r3, [pc, #216]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d060      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d145      	bne.n	8005c9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0e:	4b33      	ldr	r3, [pc, #204]	; (8005cdc <HAL_RCC_OscConfig+0x4b4>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c14:	f7fd ff7c 	bl	8003b10 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c1c:	f7fd ff78 	bl	8003b10 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e093      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2e:	4b29      	ldr	r3, [pc, #164]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f0      	bne.n	8005c1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	019b      	lsls	r3, r3, #6
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	3b01      	subs	r3, #1
 8005c54:	041b      	lsls	r3, r3, #16
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	061b      	lsls	r3, r3, #24
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	071b      	lsls	r3, r3, #28
 8005c66:	491b      	ldr	r1, [pc, #108]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <HAL_RCC_OscConfig+0x4b4>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c72:	f7fd ff4d 	bl	8003b10 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c7a:	f7fd ff49 	bl	8003b10 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e064      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c8c:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0f0      	beq.n	8005c7a <HAL_RCC_OscConfig+0x452>
 8005c98:	e05c      	b.n	8005d54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c9a:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <HAL_RCC_OscConfig+0x4b4>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca0:	f7fd ff36 	bl	8003b10 <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca8:	f7fd ff32 	bl	8003b10 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e04d      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cba:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <HAL_RCC_OscConfig+0x4ac>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f0      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x480>
 8005cc6:	e045      	b.n	8005d54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d107      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e040      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
 8005cd4:	40023800 	.word	0x40023800
 8005cd8:	40007000 	.word	0x40007000
 8005cdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ce0:	4b1f      	ldr	r3, [pc, #124]	; (8005d60 <HAL_RCC_OscConfig+0x538>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d030      	beq.n	8005d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d129      	bne.n	8005d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d122      	bne.n	8005d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d10:	4013      	ands	r3, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d119      	bne.n	8005d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d10f      	bne.n	8005d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40023800 	.word	0x40023800

08005d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e03f      	b.n	8005df6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fd fcae 	bl	80036ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2224      	movs	r2, #36	; 0x24
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 ff43 	bl	8006c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695a      	ldr	r2, [r3, #20]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08c      	sub	sp, #48	; 0x30
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d165      	bne.n	8005ee6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <HAL_UART_Transmit_DMA+0x26>
 8005e20:	88fb      	ldrh	r3, [r7, #6]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e05e      	b.n	8005ee8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_UART_Transmit_DMA+0x38>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e057      	b.n	8005ee8 <HAL_UART_Transmit_DMA+0xe8>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	88fa      	ldrh	r2, [r7, #6]
 8005e4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	88fa      	ldrh	r2, [r7, #6]
 8005e50:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2221      	movs	r2, #33	; 0x21
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e64:	4a22      	ldr	r2, [pc, #136]	; (8005ef0 <HAL_UART_Transmit_DMA+0xf0>)
 8005e66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6c:	4a21      	ldr	r2, [pc, #132]	; (8005ef4 <HAL_UART_Transmit_DMA+0xf4>)
 8005e6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e74:	4a20      	ldr	r2, [pc, #128]	; (8005ef8 <HAL_UART_Transmit_DMA+0xf8>)
 8005e76:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005e80:	f107 0308 	add.w	r3, r7, #8
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	6819      	ldr	r1, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3304      	adds	r3, #4
 8005e94:	461a      	mov	r2, r3
 8005e96:	88fb      	ldrh	r3, [r7, #6]
 8005e98:	f7fe fc4c 	bl	8004734 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ea4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3314      	adds	r3, #20
 8005eb4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3314      	adds	r3, #20
 8005ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ece:	627a      	str	r2, [r7, #36]	; 0x24
 8005ed0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6a39      	ldr	r1, [r7, #32]
 8005ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e5      	bne.n	8005eae <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e000      	b.n	8005ee8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005ee6:	2302      	movs	r3, #2
  }
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3730      	adds	r7, #48	; 0x30
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	080064cd 	.word	0x080064cd
 8005ef4:	08006567 	.word	0x08006567
 8005ef8:	080066df 	.word	0x080066df

08005efc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	d11d      	bne.n	8005f52 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <HAL_UART_Receive_DMA+0x26>
 8005f1c:	88fb      	ldrh	r3, [r7, #6]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e016      	b.n	8005f54 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_UART_Receive_DMA+0x38>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e00f      	b.n	8005f54 <HAL_UART_Receive_DMA+0x58>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005f42:	88fb      	ldrh	r3, [r7, #6]
 8005f44:	461a      	mov	r2, r3
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fc13 	bl	8006774 <UART_Start_Receive_DMA>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	e000      	b.n	8005f54 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f52:	2302      	movs	r3, #2
  }
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b0ba      	sub	sp, #232	; 0xe8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10f      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d009      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x66>
 8005fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fd7f 	bl	8006abe <UART_Receive_IT>
      return;
 8005fc0:	e256      	b.n	8006470 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 80de 	beq.w	8006188 <HAL_UART_IRQHandler+0x22c>
 8005fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 80d1 	beq.w	8006188 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <HAL_UART_IRQHandler+0xae>
 8005ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d005      	beq.n	800600a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f043 0201 	orr.w	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00b      	beq.n	800602e <HAL_UART_IRQHandler+0xd2>
 8006016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f043 0202 	orr.w	r2, r3, #2
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800602e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00b      	beq.n	8006052 <HAL_UART_IRQHandler+0xf6>
 800603a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	f043 0204 	orr.w	r2, r3, #4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d011      	beq.n	8006082 <HAL_UART_IRQHandler+0x126>
 800605e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d105      	bne.n	8006076 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800606a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f043 0208 	orr.w	r2, r3, #8
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 81ed 	beq.w	8006466 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800608c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_UART_IRQHandler+0x14e>
 8006098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fd0a 	bl	8006abe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b4:	2b40      	cmp	r3, #64	; 0x40
 80060b6:	bf0c      	ite	eq
 80060b8:	2301      	moveq	r3, #1
 80060ba:	2300      	movne	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d103      	bne.n	80060d6 <HAL_UART_IRQHandler+0x17a>
 80060ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d04f      	beq.n	8006176 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fc12 	bl	8006900 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d141      	bne.n	800616e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3314      	adds	r3, #20
 80060f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3314      	adds	r3, #20
 8006112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800611a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800612e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1d9      	bne.n	80060ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	2b00      	cmp	r3, #0
 800613c:	d013      	beq.n	8006166 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	4a7d      	ldr	r2, [pc, #500]	; (8006338 <HAL_UART_IRQHandler+0x3dc>)
 8006144:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe fbba 	bl	80048c4 <HAL_DMA_Abort_IT>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d016      	beq.n	8006184 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006160:	4610      	mov	r0, r2
 8006162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006164:	e00e      	b.n	8006184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f99a 	bl	80064a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616c:	e00a      	b.n	8006184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f996 	bl	80064a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006174:	e006      	b.n	8006184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f992 	bl	80064a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006182:	e170      	b.n	8006466 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006184:	bf00      	nop
    return;
 8006186:	e16e      	b.n	8006466 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618c:	2b01      	cmp	r3, #1
 800618e:	f040 814a 	bne.w	8006426 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 8143 	beq.w	8006426 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 813c 	beq.w	8006426 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061ae:	2300      	movs	r3, #0
 80061b0:	60bb      	str	r3, [r7, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ce:	2b40      	cmp	r3, #64	; 0x40
 80061d0:	f040 80b4 	bne.w	800633c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8140 	beq.w	800646a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061f2:	429a      	cmp	r2, r3
 80061f4:	f080 8139 	bcs.w	800646a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620a:	f000 8088 	beq.w	800631e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	330c      	adds	r3, #12
 8006214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800621c:	e853 3f00 	ldrex	r3, [r3]
 8006220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800622c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800623a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800623e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006246:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1d9      	bne.n	800620e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3314      	adds	r3, #20
 8006260:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800626a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3314      	adds	r3, #20
 800627a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800627e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006282:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006286:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e1      	bne.n	800625a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3314      	adds	r3, #20
 800629c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3314      	adds	r3, #20
 80062b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e3      	bne.n	8006296 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	330c      	adds	r3, #12
 80062e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ee:	f023 0310 	bic.w	r3, r3, #16
 80062f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	330c      	adds	r3, #12
 80062fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006300:	65ba      	str	r2, [r7, #88]	; 0x58
 8006302:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800630e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e3      	bne.n	80062dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	4618      	mov	r0, r3
 800631a:	f7fe fa63 	bl	80047e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006326:	b29b      	uxth	r3, r3
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	b29b      	uxth	r3, r3
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f8c0 	bl	80064b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006334:	e099      	b.n	800646a <HAL_UART_IRQHandler+0x50e>
 8006336:	bf00      	nop
 8006338:	080069c7 	.word	0x080069c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006344:	b29b      	uxth	r3, r3
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 808b 	beq.w	800646e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8086 	beq.w	800646e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	330c      	adds	r3, #12
 8006368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	330c      	adds	r3, #12
 8006382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006386:	647a      	str	r2, [r7, #68]	; 0x44
 8006388:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800638c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e3      	bne.n	8006362 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3314      	adds	r3, #20
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	623b      	str	r3, [r7, #32]
   return(result);
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	f023 0301 	bic.w	r3, r3, #1
 80063b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3314      	adds	r3, #20
 80063ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063be:	633a      	str	r2, [r7, #48]	; 0x30
 80063c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e3      	bne.n	800639a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0310 	bic.w	r3, r3, #16
 80063f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	330c      	adds	r3, #12
 8006400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006404:	61fa      	str	r2, [r7, #28]
 8006406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	69b9      	ldr	r1, [r7, #24]
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	617b      	str	r3, [r7, #20]
   return(result);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e3      	bne.n	80063e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f848 	bl	80064b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006424:	e023      	b.n	800646e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800642a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <HAL_UART_IRQHandler+0x4ea>
 8006432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fad5 	bl	80069ee <UART_Transmit_IT>
    return;
 8006444:	e014      	b.n	8006470 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00e      	beq.n	8006470 <HAL_UART_IRQHandler+0x514>
 8006452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fb15 	bl	8006a8e <UART_EndTransmit_IT>
    return;
 8006464:	e004      	b.n	8006470 <HAL_UART_IRQHandler+0x514>
    return;
 8006466:	bf00      	nop
 8006468:	e002      	b.n	8006470 <HAL_UART_IRQHandler+0x514>
      return;
 800646a:	bf00      	nop
 800646c:	e000      	b.n	8006470 <HAL_UART_IRQHandler+0x514>
      return;
 800646e:	bf00      	nop
  }
}
 8006470:	37e8      	adds	r7, #232	; 0xe8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop

08006478 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b090      	sub	sp, #64	; 0x40
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d137      	bne.n	8006558 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80064e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ea:	2200      	movs	r2, #0
 80064ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3314      	adds	r3, #20
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	623b      	str	r3, [r7, #32]
   return(result);
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006504:	63bb      	str	r3, [r7, #56]	; 0x38
 8006506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3314      	adds	r3, #20
 800650c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800650e:	633a      	str	r2, [r7, #48]	; 0x30
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e5      	bne.n	80064ee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	330c      	adds	r3, #12
 8006528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	60fb      	str	r3, [r7, #12]
   return(result);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
 800653a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006542:	61fa      	str	r2, [r7, #28]
 8006544:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	69b9      	ldr	r1, [r7, #24]
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	617b      	str	r3, [r7, #20]
   return(result);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e5      	bne.n	8006522 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006556:	e002      	b.n	800655e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006558:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800655a:	f7fa fc77 	bl	8000e4c <HAL_UART_TxCpltCallback>
}
 800655e:	bf00      	nop
 8006560:	3740      	adds	r7, #64	; 0x40
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006572:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f7ff ff7f 	bl	8006478 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b09c      	sub	sp, #112	; 0x70
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d172      	bne.n	8006684 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800659e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a0:	2200      	movs	r2, #0
 80065a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	330c      	adds	r3, #12
 80065aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80065bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80065c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e5      	bne.n	80065a4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3314      	adds	r3, #20
 80065de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ea:	f023 0301 	bic.w	r3, r3, #1
 80065ee:	667b      	str	r3, [r7, #100]	; 0x64
 80065f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3314      	adds	r3, #20
 80065f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065f8:	647a      	str	r2, [r7, #68]	; 0x44
 80065fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e5      	bne.n	80065d8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800660c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3314      	adds	r3, #20
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	623b      	str	r3, [r7, #32]
   return(result);
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006622:	663b      	str	r3, [r7, #96]	; 0x60
 8006624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3314      	adds	r3, #20
 800662a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800662c:	633a      	str	r2, [r7, #48]	; 0x30
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e5      	bne.n	800660c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006642:	2220      	movs	r2, #32
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	2b01      	cmp	r3, #1
 800664e:	d119      	bne.n	8006684 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	330c      	adds	r3, #12
 8006656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0310 	bic.w	r3, r3, #16
 8006666:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	330c      	adds	r3, #12
 800666e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006670:	61fa      	str	r2, [r7, #28]
 8006672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	69b9      	ldr	r1, [r7, #24]
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	617b      	str	r3, [r7, #20]
   return(result);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e5      	bne.n	8006650 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	2b01      	cmp	r3, #1
 800668a:	d106      	bne.n	800669a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800668c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006690:	4619      	mov	r1, r3
 8006692:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006694:	f7ff ff0e 	bl	80064b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006698:	e002      	b.n	80066a0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800669a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800669c:	f7fa fbf2 	bl	8000e84 <HAL_UART_RxCpltCallback>
}
 80066a0:	bf00      	nop
 80066a2:	3770      	adds	r7, #112	; 0x70
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d108      	bne.n	80066d0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066c2:	085b      	lsrs	r3, r3, #1
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	4619      	mov	r1, r3
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7ff fef3 	bl	80064b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066ce:	e002      	b.n	80066d6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f7ff fedb 	bl	800648c <HAL_UART_RxHalfCpltCallback>
}
 80066d6:	bf00      	nop
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fa:	2b80      	cmp	r3, #128	; 0x80
 80066fc:	bf0c      	ite	eq
 80066fe:	2301      	moveq	r3, #1
 8006700:	2300      	movne	r3, #0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b21      	cmp	r3, #33	; 0x21
 8006710:	d108      	bne.n	8006724 <UART_DMAError+0x46>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2200      	movs	r2, #0
 800671c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800671e:	68b8      	ldr	r0, [r7, #8]
 8006720:	f000 f8c6 	bl	80068b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672e:	2b40      	cmp	r3, #64	; 0x40
 8006730:	bf0c      	ite	eq
 8006732:	2301      	moveq	r3, #1
 8006734:	2300      	movne	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b22      	cmp	r3, #34	; 0x22
 8006744:	d108      	bne.n	8006758 <UART_DMAError+0x7a>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006752:	68b8      	ldr	r0, [r7, #8]
 8006754:	f000 f8d4 	bl	8006900 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	f043 0210 	orr.w	r2, r3, #16
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006764:	68b8      	ldr	r0, [r7, #8]
 8006766:	f7ff fe9b 	bl	80064a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800676a:	bf00      	nop
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b098      	sub	sp, #96	; 0x60
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4613      	mov	r3, r2
 8006780:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	88fa      	ldrh	r2, [r7, #6]
 800678c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2222      	movs	r2, #34	; 0x22
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	4a40      	ldr	r2, [pc, #256]	; (80068a4 <UART_Start_Receive_DMA+0x130>)
 80067a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	4a3f      	ldr	r2, [pc, #252]	; (80068a8 <UART_Start_Receive_DMA+0x134>)
 80067aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	4a3e      	ldr	r2, [pc, #248]	; (80068ac <UART_Start_Receive_DMA+0x138>)
 80067b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	2200      	movs	r2, #0
 80067ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80067bc:	f107 0308 	add.w	r3, r7, #8
 80067c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4619      	mov	r1, r3
 80067ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	f7fd ffae 	bl	8004734 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80067d8:	2300      	movs	r3, #0
 80067da:	613b      	str	r3, [r7, #16]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	613b      	str	r3, [r7, #16]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d019      	beq.n	8006832 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	330c      	adds	r3, #12
 8006804:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800680e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006814:	65bb      	str	r3, [r7, #88]	; 0x58
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	330c      	adds	r3, #12
 800681c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800681e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006820:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006824:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800682c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e5      	bne.n	80067fe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3314      	adds	r3, #20
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	f043 0301 	orr.w	r3, r3, #1
 8006848:	657b      	str	r3, [r7, #84]	; 0x54
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3314      	adds	r3, #20
 8006850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006852:	63ba      	str	r2, [r7, #56]	; 0x38
 8006854:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e5      	bne.n	8006832 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3314      	adds	r3, #20
 800686c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	617b      	str	r3, [r7, #20]
   return(result);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800687c:	653b      	str	r3, [r7, #80]	; 0x50
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3314      	adds	r3, #20
 8006884:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006886:	627a      	str	r2, [r7, #36]	; 0x24
 8006888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6a39      	ldr	r1, [r7, #32]
 800688c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	61fb      	str	r3, [r7, #28]
   return(result);
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e5      	bne.n	8006866 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3760      	adds	r7, #96	; 0x60
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	08006583 	.word	0x08006583
 80068a8:	080066a9 	.word	0x080066a9
 80068ac:	080066df 	.word	0x080066df

080068b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b089      	sub	sp, #36	; 0x24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80068ce:	61fb      	str	r3, [r7, #28]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	330c      	adds	r3, #12
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	61ba      	str	r2, [r7, #24]
 80068da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6979      	ldr	r1, [r7, #20]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	613b      	str	r3, [r7, #16]
   return(result);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e5      	bne.n	80068b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80068f4:	bf00      	nop
 80068f6:	3724      	adds	r7, #36	; 0x24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b095      	sub	sp, #84	; 0x54
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	330c      	adds	r3, #12
 800690e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006912:	e853 3f00 	ldrex	r3, [r3]
 8006916:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800691e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006928:	643a      	str	r2, [r7, #64]	; 0x40
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800692e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e5      	bne.n	8006908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3314      	adds	r3, #20
 8006942:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	e853 3f00 	ldrex	r3, [r3]
 800694a:	61fb      	str	r3, [r7, #28]
   return(result);
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f023 0301 	bic.w	r3, r3, #1
 8006952:	64bb      	str	r3, [r7, #72]	; 0x48
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3314      	adds	r3, #20
 800695a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800695c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e5      	bne.n	800693c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	2b01      	cmp	r3, #1
 8006976:	d119      	bne.n	80069ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	60bb      	str	r3, [r7, #8]
   return(result);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	f023 0310 	bic.w	r3, r3, #16
 800698e:	647b      	str	r3, [r7, #68]	; 0x44
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	330c      	adds	r3, #12
 8006996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006998:	61ba      	str	r2, [r7, #24]
 800699a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6979      	ldr	r1, [r7, #20]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	613b      	str	r3, [r7, #16]
   return(result);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e5      	bne.n	8006978 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069ba:	bf00      	nop
 80069bc:	3754      	adds	r7, #84	; 0x54
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f7ff fd5d 	bl	80064a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e6:	bf00      	nop
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b21      	cmp	r3, #33	; 0x21
 8006a00:	d13e      	bne.n	8006a80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0a:	d114      	bne.n	8006a36 <UART_Transmit_IT+0x48>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d110      	bne.n	8006a36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	1c9a      	adds	r2, r3, #2
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	621a      	str	r2, [r3, #32]
 8006a34:	e008      	b.n	8006a48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	1c59      	adds	r1, r3, #1
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6211      	str	r1, [r2, #32]
 8006a40:	781a      	ldrb	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	4619      	mov	r1, r3
 8006a56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10f      	bne.n	8006a7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e000      	b.n	8006a82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
  }
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7fa f9cc 	bl	8000e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b08c      	sub	sp, #48	; 0x30
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b22      	cmp	r3, #34	; 0x22
 8006ad0:	f040 80ab 	bne.w	8006c2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006adc:	d117      	bne.n	8006b0e <UART_Receive_IT+0x50>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d113      	bne.n	8006b0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	1c9a      	adds	r2, r3, #2
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b0c:	e026      	b.n	8006b5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b20:	d007      	beq.n	8006b32 <UART_Receive_IT+0x74>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <UART_Receive_IT+0x82>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	e008      	b.n	8006b52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d15a      	bne.n	8006c26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0220 	bic.w	r2, r2, #32
 8006b7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695a      	ldr	r2, [r3, #20]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0201 	bic.w	r2, r2, #1
 8006b9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d135      	bne.n	8006c1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	330c      	adds	r3, #12
 8006bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f023 0310 	bic.w	r3, r3, #16
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd6:	623a      	str	r2, [r7, #32]
 8006bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	69f9      	ldr	r1, [r7, #28]
 8006bdc:	6a3a      	ldr	r2, [r7, #32]
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e5      	bne.n	8006bb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b10      	cmp	r3, #16
 8006bf6:	d10a      	bne.n	8006c0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff fc4d 	bl	80064b4 <HAL_UARTEx_RxEventCallback>
 8006c1a:	e002      	b.n	8006c22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7fa f931 	bl	8000e84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	e002      	b.n	8006c2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e000      	b.n	8006c2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c2a:	2302      	movs	r3, #2
  }
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3730      	adds	r7, #48	; 0x30
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c38:	b0c0      	sub	sp, #256	; 0x100
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	68d9      	ldr	r1, [r3, #12]
 8006c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	ea40 0301 	orr.w	r3, r0, r1
 8006c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c8c:	f021 010c 	bic.w	r1, r1, #12
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cae:	6999      	ldr	r1, [r3, #24]
 8006cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	ea40 0301 	orr.w	r3, r0, r1
 8006cba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b8f      	ldr	r3, [pc, #572]	; (8006f00 <UART_SetConfig+0x2cc>)
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d005      	beq.n	8006cd4 <UART_SetConfig+0xa0>
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4b8d      	ldr	r3, [pc, #564]	; (8006f04 <UART_SetConfig+0x2d0>)
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d104      	bne.n	8006cde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cd4:	f7fe fb64 	bl	80053a0 <HAL_RCC_GetPCLK2Freq>
 8006cd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006cdc:	e003      	b.n	8006ce6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cde:	f7fe fb4b 	bl	8005378 <HAL_RCC_GetPCLK1Freq>
 8006ce2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cf0:	f040 810c 	bne.w	8006f0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d06:	4622      	mov	r2, r4
 8006d08:	462b      	mov	r3, r5
 8006d0a:	1891      	adds	r1, r2, r2
 8006d0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d0e:	415b      	adcs	r3, r3
 8006d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d16:	4621      	mov	r1, r4
 8006d18:	eb12 0801 	adds.w	r8, r2, r1
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	eb43 0901 	adc.w	r9, r3, r1
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	f04f 0300 	mov.w	r3, #0
 8006d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d36:	4690      	mov	r8, r2
 8006d38:	4699      	mov	r9, r3
 8006d3a:	4623      	mov	r3, r4
 8006d3c:	eb18 0303 	adds.w	r3, r8, r3
 8006d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d44:	462b      	mov	r3, r5
 8006d46:	eb49 0303 	adc.w	r3, r9, r3
 8006d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d62:	460b      	mov	r3, r1
 8006d64:	18db      	adds	r3, r3, r3
 8006d66:	653b      	str	r3, [r7, #80]	; 0x50
 8006d68:	4613      	mov	r3, r2
 8006d6a:	eb42 0303 	adc.w	r3, r2, r3
 8006d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d78:	f7f9 fd82 	bl	8000880 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4b61      	ldr	r3, [pc, #388]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006d82:	fba3 2302 	umull	r2, r3, r3, r2
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	011c      	lsls	r4, r3, #4
 8006d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	1891      	adds	r1, r2, r2
 8006da2:	64b9      	str	r1, [r7, #72]	; 0x48
 8006da4:	415b      	adcs	r3, r3
 8006da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006dac:	4641      	mov	r1, r8
 8006dae:	eb12 0a01 	adds.w	sl, r2, r1
 8006db2:	4649      	mov	r1, r9
 8006db4:	eb43 0b01 	adc.w	fp, r3, r1
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dcc:	4692      	mov	sl, r2
 8006dce:	469b      	mov	fp, r3
 8006dd0:	4643      	mov	r3, r8
 8006dd2:	eb1a 0303 	adds.w	r3, sl, r3
 8006dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	eb4b 0303 	adc.w	r3, fp, r3
 8006de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006df0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006df4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	18db      	adds	r3, r3, r3
 8006dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8006dfe:	4613      	mov	r3, r2
 8006e00:	eb42 0303 	adc.w	r3, r2, r3
 8006e04:	647b      	str	r3, [r7, #68]	; 0x44
 8006e06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e0e:	f7f9 fd37 	bl	8000880 <__aeabi_uldivmod>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4611      	mov	r1, r2
 8006e18:	4b3b      	ldr	r3, [pc, #236]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	2264      	movs	r2, #100	; 0x64
 8006e22:	fb02 f303 	mul.w	r3, r2, r3
 8006e26:	1acb      	subs	r3, r1, r3
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e2e:	4b36      	ldr	r3, [pc, #216]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006e30:	fba3 2302 	umull	r2, r3, r3, r2
 8006e34:	095b      	lsrs	r3, r3, #5
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e3c:	441c      	add	r4, r3
 8006e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e50:	4642      	mov	r2, r8
 8006e52:	464b      	mov	r3, r9
 8006e54:	1891      	adds	r1, r2, r2
 8006e56:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e58:	415b      	adcs	r3, r3
 8006e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e60:	4641      	mov	r1, r8
 8006e62:	1851      	adds	r1, r2, r1
 8006e64:	6339      	str	r1, [r7, #48]	; 0x30
 8006e66:	4649      	mov	r1, r9
 8006e68:	414b      	adcs	r3, r1
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e78:	4659      	mov	r1, fp
 8006e7a:	00cb      	lsls	r3, r1, #3
 8006e7c:	4651      	mov	r1, sl
 8006e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e82:	4651      	mov	r1, sl
 8006e84:	00ca      	lsls	r2, r1, #3
 8006e86:	4610      	mov	r0, r2
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	189b      	adds	r3, r3, r2
 8006e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e94:	464b      	mov	r3, r9
 8006e96:	460a      	mov	r2, r1
 8006e98:	eb42 0303 	adc.w	r3, r2, r3
 8006e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006eac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	18db      	adds	r3, r3, r3
 8006eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eba:	4613      	mov	r3, r2
 8006ebc:	eb42 0303 	adc.w	r3, r2, r3
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ec6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006eca:	f7f9 fcd9 	bl	8000880 <__aeabi_uldivmod>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	2164      	movs	r1, #100	; 0x64
 8006edc:	fb01 f303 	mul.w	r3, r1, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	3332      	adds	r3, #50	; 0x32
 8006ee6:	4a08      	ldr	r2, [pc, #32]	; (8006f08 <UART_SetConfig+0x2d4>)
 8006ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	f003 0207 	and.w	r2, r3, #7
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4422      	add	r2, r4
 8006efa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006efc:	e105      	b.n	800710a <UART_SetConfig+0x4d6>
 8006efe:	bf00      	nop
 8006f00:	40011000 	.word	0x40011000
 8006f04:	40011400 	.word	0x40011400
 8006f08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f1e:	4642      	mov	r2, r8
 8006f20:	464b      	mov	r3, r9
 8006f22:	1891      	adds	r1, r2, r2
 8006f24:	6239      	str	r1, [r7, #32]
 8006f26:	415b      	adcs	r3, r3
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
 8006f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f2e:	4641      	mov	r1, r8
 8006f30:	1854      	adds	r4, r2, r1
 8006f32:	4649      	mov	r1, r9
 8006f34:	eb43 0501 	adc.w	r5, r3, r1
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	00eb      	lsls	r3, r5, #3
 8006f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f46:	00e2      	lsls	r2, r4, #3
 8006f48:	4614      	mov	r4, r2
 8006f4a:	461d      	mov	r5, r3
 8006f4c:	4643      	mov	r3, r8
 8006f4e:	18e3      	adds	r3, r4, r3
 8006f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f54:	464b      	mov	r3, r9
 8006f56:	eb45 0303 	adc.w	r3, r5, r3
 8006f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	f04f 0300 	mov.w	r3, #0
 8006f76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	008b      	lsls	r3, r1, #2
 8006f7e:	4621      	mov	r1, r4
 8006f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f84:	4621      	mov	r1, r4
 8006f86:	008a      	lsls	r2, r1, #2
 8006f88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f8c:	f7f9 fc78 	bl	8000880 <__aeabi_uldivmod>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4b60      	ldr	r3, [pc, #384]	; (8007118 <UART_SetConfig+0x4e4>)
 8006f96:	fba3 2302 	umull	r2, r3, r3, r2
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	011c      	lsls	r4, r3, #4
 8006f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006fac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	464b      	mov	r3, r9
 8006fb4:	1891      	adds	r1, r2, r2
 8006fb6:	61b9      	str	r1, [r7, #24]
 8006fb8:	415b      	adcs	r3, r3
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fc0:	4641      	mov	r1, r8
 8006fc2:	1851      	adds	r1, r2, r1
 8006fc4:	6139      	str	r1, [r7, #16]
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	414b      	adcs	r3, r1
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fd8:	4659      	mov	r1, fp
 8006fda:	00cb      	lsls	r3, r1, #3
 8006fdc:	4651      	mov	r1, sl
 8006fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fe2:	4651      	mov	r1, sl
 8006fe4:	00ca      	lsls	r2, r1, #3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	4642      	mov	r2, r8
 8006fee:	189b      	adds	r3, r3, r2
 8006ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ff4:	464b      	mov	r3, r9
 8006ff6:	460a      	mov	r2, r1
 8006ff8:	eb42 0303 	adc.w	r3, r2, r3
 8006ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	67bb      	str	r3, [r7, #120]	; 0x78
 800700a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007018:	4649      	mov	r1, r9
 800701a:	008b      	lsls	r3, r1, #2
 800701c:	4641      	mov	r1, r8
 800701e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007022:	4641      	mov	r1, r8
 8007024:	008a      	lsls	r2, r1, #2
 8007026:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800702a:	f7f9 fc29 	bl	8000880 <__aeabi_uldivmod>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4b39      	ldr	r3, [pc, #228]	; (8007118 <UART_SetConfig+0x4e4>)
 8007034:	fba3 1302 	umull	r1, r3, r3, r2
 8007038:	095b      	lsrs	r3, r3, #5
 800703a:	2164      	movs	r1, #100	; 0x64
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	3332      	adds	r3, #50	; 0x32
 8007046:	4a34      	ldr	r2, [pc, #208]	; (8007118 <UART_SetConfig+0x4e4>)
 8007048:	fba2 2303 	umull	r2, r3, r2, r3
 800704c:	095b      	lsrs	r3, r3, #5
 800704e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007052:	441c      	add	r4, r3
 8007054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007058:	2200      	movs	r2, #0
 800705a:	673b      	str	r3, [r7, #112]	; 0x70
 800705c:	677a      	str	r2, [r7, #116]	; 0x74
 800705e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007062:	4642      	mov	r2, r8
 8007064:	464b      	mov	r3, r9
 8007066:	1891      	adds	r1, r2, r2
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	415b      	adcs	r3, r3
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007072:	4641      	mov	r1, r8
 8007074:	1851      	adds	r1, r2, r1
 8007076:	6039      	str	r1, [r7, #0]
 8007078:	4649      	mov	r1, r9
 800707a:	414b      	adcs	r3, r1
 800707c:	607b      	str	r3, [r7, #4]
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800708a:	4659      	mov	r1, fp
 800708c:	00cb      	lsls	r3, r1, #3
 800708e:	4651      	mov	r1, sl
 8007090:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007094:	4651      	mov	r1, sl
 8007096:	00ca      	lsls	r2, r1, #3
 8007098:	4610      	mov	r0, r2
 800709a:	4619      	mov	r1, r3
 800709c:	4603      	mov	r3, r0
 800709e:	4642      	mov	r2, r8
 80070a0:	189b      	adds	r3, r3, r2
 80070a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80070a4:	464b      	mov	r3, r9
 80070a6:	460a      	mov	r2, r1
 80070a8:	eb42 0303 	adc.w	r3, r2, r3
 80070ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	663b      	str	r3, [r7, #96]	; 0x60
 80070b8:	667a      	str	r2, [r7, #100]	; 0x64
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070c6:	4649      	mov	r1, r9
 80070c8:	008b      	lsls	r3, r1, #2
 80070ca:	4641      	mov	r1, r8
 80070cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070d0:	4641      	mov	r1, r8
 80070d2:	008a      	lsls	r2, r1, #2
 80070d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070d8:	f7f9 fbd2 	bl	8000880 <__aeabi_uldivmod>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <UART_SetConfig+0x4e4>)
 80070e2:	fba3 1302 	umull	r1, r3, r3, r2
 80070e6:	095b      	lsrs	r3, r3, #5
 80070e8:	2164      	movs	r1, #100	; 0x64
 80070ea:	fb01 f303 	mul.w	r3, r1, r3
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	3332      	adds	r3, #50	; 0x32
 80070f4:	4a08      	ldr	r2, [pc, #32]	; (8007118 <UART_SetConfig+0x4e4>)
 80070f6:	fba2 2303 	umull	r2, r3, r2, r3
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	f003 020f 	and.w	r2, r3, #15
 8007100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4422      	add	r2, r4
 8007108:	609a      	str	r2, [r3, #8]
}
 800710a:	bf00      	nop
 800710c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007110:	46bd      	mov	sp, r7
 8007112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007116:	bf00      	nop
 8007118:	51eb851f 	.word	0x51eb851f

0800711c <__cxa_pure_virtual>:
 800711c:	b508      	push	{r3, lr}
 800711e:	f000 f80d 	bl	800713c <_ZSt9terminatev>

08007122 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007122:	b508      	push	{r3, lr}
 8007124:	4780      	blx	r0
 8007126:	f000 f80e 	bl	8007146 <abort>
	...

0800712c <_ZSt13get_terminatev>:
 800712c:	4b02      	ldr	r3, [pc, #8]	; (8007138 <_ZSt13get_terminatev+0xc>)
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	f3bf 8f5b 	dmb	ish
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20000028 	.word	0x20000028

0800713c <_ZSt9terminatev>:
 800713c:	b508      	push	{r3, lr}
 800713e:	f7ff fff5 	bl	800712c <_ZSt13get_terminatev>
 8007142:	f7ff ffee 	bl	8007122 <_ZN10__cxxabiv111__terminateEPFvvE>

08007146 <abort>:
 8007146:	b508      	push	{r3, lr}
 8007148:	2006      	movs	r0, #6
 800714a:	f000 f873 	bl	8007234 <raise>
 800714e:	2001      	movs	r0, #1
 8007150:	f7fc fbfc 	bl	800394c <_exit>

08007154 <__errno>:
 8007154:	4b01      	ldr	r3, [pc, #4]	; (800715c <__errno+0x8>)
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	2000002c 	.word	0x2000002c

08007160 <__libc_init_array>:
 8007160:	b570      	push	{r4, r5, r6, lr}
 8007162:	4d0d      	ldr	r5, [pc, #52]	; (8007198 <__libc_init_array+0x38>)
 8007164:	4c0d      	ldr	r4, [pc, #52]	; (800719c <__libc_init_array+0x3c>)
 8007166:	1b64      	subs	r4, r4, r5
 8007168:	10a4      	asrs	r4, r4, #2
 800716a:	2600      	movs	r6, #0
 800716c:	42a6      	cmp	r6, r4
 800716e:	d109      	bne.n	8007184 <__libc_init_array+0x24>
 8007170:	4d0b      	ldr	r5, [pc, #44]	; (80071a0 <__libc_init_array+0x40>)
 8007172:	4c0c      	ldr	r4, [pc, #48]	; (80071a4 <__libc_init_array+0x44>)
 8007174:	f000 f9b0 	bl	80074d8 <_init>
 8007178:	1b64      	subs	r4, r4, r5
 800717a:	10a4      	asrs	r4, r4, #2
 800717c:	2600      	movs	r6, #0
 800717e:	42a6      	cmp	r6, r4
 8007180:	d105      	bne.n	800718e <__libc_init_array+0x2e>
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	f855 3b04 	ldr.w	r3, [r5], #4
 8007188:	4798      	blx	r3
 800718a:	3601      	adds	r6, #1
 800718c:	e7ee      	b.n	800716c <__libc_init_array+0xc>
 800718e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007192:	4798      	blx	r3
 8007194:	3601      	adds	r6, #1
 8007196:	e7f2      	b.n	800717e <__libc_init_array+0x1e>
 8007198:	08007890 	.word	0x08007890
 800719c:	08007890 	.word	0x08007890
 80071a0:	08007890 	.word	0x08007890
 80071a4:	0800789c 	.word	0x0800789c

080071a8 <memcpy>:
 80071a8:	440a      	add	r2, r1
 80071aa:	4291      	cmp	r1, r2
 80071ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80071b0:	d100      	bne.n	80071b4 <memcpy+0xc>
 80071b2:	4770      	bx	lr
 80071b4:	b510      	push	{r4, lr}
 80071b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071be:	4291      	cmp	r1, r2
 80071c0:	d1f9      	bne.n	80071b6 <memcpy+0xe>
 80071c2:	bd10      	pop	{r4, pc}

080071c4 <memset>:
 80071c4:	4402      	add	r2, r0
 80071c6:	4603      	mov	r3, r0
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d100      	bne.n	80071ce <memset+0xa>
 80071cc:	4770      	bx	lr
 80071ce:	f803 1b01 	strb.w	r1, [r3], #1
 80071d2:	e7f9      	b.n	80071c8 <memset+0x4>

080071d4 <realloc>:
 80071d4:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <realloc+0xc>)
 80071d6:	460a      	mov	r2, r1
 80071d8:	4601      	mov	r1, r0
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	f000 b8da 	b.w	8007394 <_realloc_r>
 80071e0:	2000002c 	.word	0x2000002c

080071e4 <_raise_r>:
 80071e4:	291f      	cmp	r1, #31
 80071e6:	b538      	push	{r3, r4, r5, lr}
 80071e8:	4604      	mov	r4, r0
 80071ea:	460d      	mov	r5, r1
 80071ec:	d904      	bls.n	80071f8 <_raise_r+0x14>
 80071ee:	2316      	movs	r3, #22
 80071f0:	6003      	str	r3, [r0, #0]
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071fa:	b112      	cbz	r2, 8007202 <_raise_r+0x1e>
 80071fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007200:	b94b      	cbnz	r3, 8007216 <_raise_r+0x32>
 8007202:	4620      	mov	r0, r4
 8007204:	f000 f830 	bl	8007268 <_getpid_r>
 8007208:	462a      	mov	r2, r5
 800720a:	4601      	mov	r1, r0
 800720c:	4620      	mov	r0, r4
 800720e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007212:	f000 b817 	b.w	8007244 <_kill_r>
 8007216:	2b01      	cmp	r3, #1
 8007218:	d00a      	beq.n	8007230 <_raise_r+0x4c>
 800721a:	1c59      	adds	r1, r3, #1
 800721c:	d103      	bne.n	8007226 <_raise_r+0x42>
 800721e:	2316      	movs	r3, #22
 8007220:	6003      	str	r3, [r0, #0]
 8007222:	2001      	movs	r0, #1
 8007224:	e7e7      	b.n	80071f6 <_raise_r+0x12>
 8007226:	2400      	movs	r4, #0
 8007228:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800722c:	4628      	mov	r0, r5
 800722e:	4798      	blx	r3
 8007230:	2000      	movs	r0, #0
 8007232:	e7e0      	b.n	80071f6 <_raise_r+0x12>

08007234 <raise>:
 8007234:	4b02      	ldr	r3, [pc, #8]	; (8007240 <raise+0xc>)
 8007236:	4601      	mov	r1, r0
 8007238:	6818      	ldr	r0, [r3, #0]
 800723a:	f7ff bfd3 	b.w	80071e4 <_raise_r>
 800723e:	bf00      	nop
 8007240:	2000002c 	.word	0x2000002c

08007244 <_kill_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4d07      	ldr	r5, [pc, #28]	; (8007264 <_kill_r+0x20>)
 8007248:	2300      	movs	r3, #0
 800724a:	4604      	mov	r4, r0
 800724c:	4608      	mov	r0, r1
 800724e:	4611      	mov	r1, r2
 8007250:	602b      	str	r3, [r5, #0]
 8007252:	f7fc fb6b 	bl	800392c <_kill>
 8007256:	1c43      	adds	r3, r0, #1
 8007258:	d102      	bne.n	8007260 <_kill_r+0x1c>
 800725a:	682b      	ldr	r3, [r5, #0]
 800725c:	b103      	cbz	r3, 8007260 <_kill_r+0x1c>
 800725e:	6023      	str	r3, [r4, #0]
 8007260:	bd38      	pop	{r3, r4, r5, pc}
 8007262:	bf00      	nop
 8007264:	20001454 	.word	0x20001454

08007268 <_getpid_r>:
 8007268:	f7fc bb58 	b.w	800391c <_getpid>

0800726c <sbrk_aligned>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4e0e      	ldr	r6, [pc, #56]	; (80072a8 <sbrk_aligned+0x3c>)
 8007270:	460c      	mov	r4, r1
 8007272:	6831      	ldr	r1, [r6, #0]
 8007274:	4605      	mov	r5, r0
 8007276:	b911      	cbnz	r1, 800727e <sbrk_aligned+0x12>
 8007278:	f000 f8bc 	bl	80073f4 <_sbrk_r>
 800727c:	6030      	str	r0, [r6, #0]
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f000 f8b7 	bl	80073f4 <_sbrk_r>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d00a      	beq.n	80072a0 <sbrk_aligned+0x34>
 800728a:	1cc4      	adds	r4, r0, #3
 800728c:	f024 0403 	bic.w	r4, r4, #3
 8007290:	42a0      	cmp	r0, r4
 8007292:	d007      	beq.n	80072a4 <sbrk_aligned+0x38>
 8007294:	1a21      	subs	r1, r4, r0
 8007296:	4628      	mov	r0, r5
 8007298:	f000 f8ac 	bl	80073f4 <_sbrk_r>
 800729c:	3001      	adds	r0, #1
 800729e:	d101      	bne.n	80072a4 <sbrk_aligned+0x38>
 80072a0:	f04f 34ff 	mov.w	r4, #4294967295
 80072a4:	4620      	mov	r0, r4
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
 80072a8:	20001450 	.word	0x20001450

080072ac <_malloc_r>:
 80072ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b0:	1ccd      	adds	r5, r1, #3
 80072b2:	f025 0503 	bic.w	r5, r5, #3
 80072b6:	3508      	adds	r5, #8
 80072b8:	2d0c      	cmp	r5, #12
 80072ba:	bf38      	it	cc
 80072bc:	250c      	movcc	r5, #12
 80072be:	2d00      	cmp	r5, #0
 80072c0:	4607      	mov	r7, r0
 80072c2:	db01      	blt.n	80072c8 <_malloc_r+0x1c>
 80072c4:	42a9      	cmp	r1, r5
 80072c6:	d905      	bls.n	80072d4 <_malloc_r+0x28>
 80072c8:	230c      	movs	r3, #12
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	2600      	movs	r6, #0
 80072ce:	4630      	mov	r0, r6
 80072d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d4:	4e2e      	ldr	r6, [pc, #184]	; (8007390 <_malloc_r+0xe4>)
 80072d6:	f000 f89d 	bl	8007414 <__malloc_lock>
 80072da:	6833      	ldr	r3, [r6, #0]
 80072dc:	461c      	mov	r4, r3
 80072de:	bb34      	cbnz	r4, 800732e <_malloc_r+0x82>
 80072e0:	4629      	mov	r1, r5
 80072e2:	4638      	mov	r0, r7
 80072e4:	f7ff ffc2 	bl	800726c <sbrk_aligned>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	4604      	mov	r4, r0
 80072ec:	d14d      	bne.n	800738a <_malloc_r+0xde>
 80072ee:	6834      	ldr	r4, [r6, #0]
 80072f0:	4626      	mov	r6, r4
 80072f2:	2e00      	cmp	r6, #0
 80072f4:	d140      	bne.n	8007378 <_malloc_r+0xcc>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	4631      	mov	r1, r6
 80072fa:	4638      	mov	r0, r7
 80072fc:	eb04 0803 	add.w	r8, r4, r3
 8007300:	f000 f878 	bl	80073f4 <_sbrk_r>
 8007304:	4580      	cmp	r8, r0
 8007306:	d13a      	bne.n	800737e <_malloc_r+0xd2>
 8007308:	6821      	ldr	r1, [r4, #0]
 800730a:	3503      	adds	r5, #3
 800730c:	1a6d      	subs	r5, r5, r1
 800730e:	f025 0503 	bic.w	r5, r5, #3
 8007312:	3508      	adds	r5, #8
 8007314:	2d0c      	cmp	r5, #12
 8007316:	bf38      	it	cc
 8007318:	250c      	movcc	r5, #12
 800731a:	4629      	mov	r1, r5
 800731c:	4638      	mov	r0, r7
 800731e:	f7ff ffa5 	bl	800726c <sbrk_aligned>
 8007322:	3001      	adds	r0, #1
 8007324:	d02b      	beq.n	800737e <_malloc_r+0xd2>
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	442b      	add	r3, r5
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	e00e      	b.n	800734c <_malloc_r+0xa0>
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	1b52      	subs	r2, r2, r5
 8007332:	d41e      	bmi.n	8007372 <_malloc_r+0xc6>
 8007334:	2a0b      	cmp	r2, #11
 8007336:	d916      	bls.n	8007366 <_malloc_r+0xba>
 8007338:	1961      	adds	r1, r4, r5
 800733a:	42a3      	cmp	r3, r4
 800733c:	6025      	str	r5, [r4, #0]
 800733e:	bf18      	it	ne
 8007340:	6059      	strne	r1, [r3, #4]
 8007342:	6863      	ldr	r3, [r4, #4]
 8007344:	bf08      	it	eq
 8007346:	6031      	streq	r1, [r6, #0]
 8007348:	5162      	str	r2, [r4, r5]
 800734a:	604b      	str	r3, [r1, #4]
 800734c:	4638      	mov	r0, r7
 800734e:	f104 060b 	add.w	r6, r4, #11
 8007352:	f000 f865 	bl	8007420 <__malloc_unlock>
 8007356:	f026 0607 	bic.w	r6, r6, #7
 800735a:	1d23      	adds	r3, r4, #4
 800735c:	1af2      	subs	r2, r6, r3
 800735e:	d0b6      	beq.n	80072ce <_malloc_r+0x22>
 8007360:	1b9b      	subs	r3, r3, r6
 8007362:	50a3      	str	r3, [r4, r2]
 8007364:	e7b3      	b.n	80072ce <_malloc_r+0x22>
 8007366:	6862      	ldr	r2, [r4, #4]
 8007368:	42a3      	cmp	r3, r4
 800736a:	bf0c      	ite	eq
 800736c:	6032      	streq	r2, [r6, #0]
 800736e:	605a      	strne	r2, [r3, #4]
 8007370:	e7ec      	b.n	800734c <_malloc_r+0xa0>
 8007372:	4623      	mov	r3, r4
 8007374:	6864      	ldr	r4, [r4, #4]
 8007376:	e7b2      	b.n	80072de <_malloc_r+0x32>
 8007378:	4634      	mov	r4, r6
 800737a:	6876      	ldr	r6, [r6, #4]
 800737c:	e7b9      	b.n	80072f2 <_malloc_r+0x46>
 800737e:	230c      	movs	r3, #12
 8007380:	603b      	str	r3, [r7, #0]
 8007382:	4638      	mov	r0, r7
 8007384:	f000 f84c 	bl	8007420 <__malloc_unlock>
 8007388:	e7a1      	b.n	80072ce <_malloc_r+0x22>
 800738a:	6025      	str	r5, [r4, #0]
 800738c:	e7de      	b.n	800734c <_malloc_r+0xa0>
 800738e:	bf00      	nop
 8007390:	2000144c 	.word	0x2000144c

08007394 <_realloc_r>:
 8007394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007398:	4680      	mov	r8, r0
 800739a:	4614      	mov	r4, r2
 800739c:	460e      	mov	r6, r1
 800739e:	b921      	cbnz	r1, 80073aa <_realloc_r+0x16>
 80073a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073a4:	4611      	mov	r1, r2
 80073a6:	f7ff bf81 	b.w	80072ac <_malloc_r>
 80073aa:	b92a      	cbnz	r2, 80073b8 <_realloc_r+0x24>
 80073ac:	f000 f83e 	bl	800742c <_free_r>
 80073b0:	4625      	mov	r5, r4
 80073b2:	4628      	mov	r0, r5
 80073b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b8:	f000 f884 	bl	80074c4 <_malloc_usable_size_r>
 80073bc:	4284      	cmp	r4, r0
 80073be:	4607      	mov	r7, r0
 80073c0:	d802      	bhi.n	80073c8 <_realloc_r+0x34>
 80073c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073c6:	d812      	bhi.n	80073ee <_realloc_r+0x5a>
 80073c8:	4621      	mov	r1, r4
 80073ca:	4640      	mov	r0, r8
 80073cc:	f7ff ff6e 	bl	80072ac <_malloc_r>
 80073d0:	4605      	mov	r5, r0
 80073d2:	2800      	cmp	r0, #0
 80073d4:	d0ed      	beq.n	80073b2 <_realloc_r+0x1e>
 80073d6:	42bc      	cmp	r4, r7
 80073d8:	4622      	mov	r2, r4
 80073da:	4631      	mov	r1, r6
 80073dc:	bf28      	it	cs
 80073de:	463a      	movcs	r2, r7
 80073e0:	f7ff fee2 	bl	80071a8 <memcpy>
 80073e4:	4631      	mov	r1, r6
 80073e6:	4640      	mov	r0, r8
 80073e8:	f000 f820 	bl	800742c <_free_r>
 80073ec:	e7e1      	b.n	80073b2 <_realloc_r+0x1e>
 80073ee:	4635      	mov	r5, r6
 80073f0:	e7df      	b.n	80073b2 <_realloc_r+0x1e>
	...

080073f4 <_sbrk_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4d06      	ldr	r5, [pc, #24]	; (8007410 <_sbrk_r+0x1c>)
 80073f8:	2300      	movs	r3, #0
 80073fa:	4604      	mov	r4, r0
 80073fc:	4608      	mov	r0, r1
 80073fe:	602b      	str	r3, [r5, #0]
 8007400:	f7fc faae 	bl	8003960 <_sbrk>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	d102      	bne.n	800740e <_sbrk_r+0x1a>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	b103      	cbz	r3, 800740e <_sbrk_r+0x1a>
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	bd38      	pop	{r3, r4, r5, pc}
 8007410:	20001454 	.word	0x20001454

08007414 <__malloc_lock>:
 8007414:	4801      	ldr	r0, [pc, #4]	; (800741c <__malloc_lock+0x8>)
 8007416:	f000 b85d 	b.w	80074d4 <__retarget_lock_acquire_recursive>
 800741a:	bf00      	nop
 800741c:	20001458 	.word	0x20001458

08007420 <__malloc_unlock>:
 8007420:	4801      	ldr	r0, [pc, #4]	; (8007428 <__malloc_unlock+0x8>)
 8007422:	f000 b858 	b.w	80074d6 <__retarget_lock_release_recursive>
 8007426:	bf00      	nop
 8007428:	20001458 	.word	0x20001458

0800742c <_free_r>:
 800742c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800742e:	2900      	cmp	r1, #0
 8007430:	d044      	beq.n	80074bc <_free_r+0x90>
 8007432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007436:	9001      	str	r0, [sp, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	f1a1 0404 	sub.w	r4, r1, #4
 800743e:	bfb8      	it	lt
 8007440:	18e4      	addlt	r4, r4, r3
 8007442:	f7ff ffe7 	bl	8007414 <__malloc_lock>
 8007446:	4a1e      	ldr	r2, [pc, #120]	; (80074c0 <_free_r+0x94>)
 8007448:	9801      	ldr	r0, [sp, #4]
 800744a:	6813      	ldr	r3, [r2, #0]
 800744c:	b933      	cbnz	r3, 800745c <_free_r+0x30>
 800744e:	6063      	str	r3, [r4, #4]
 8007450:	6014      	str	r4, [r2, #0]
 8007452:	b003      	add	sp, #12
 8007454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007458:	f7ff bfe2 	b.w	8007420 <__malloc_unlock>
 800745c:	42a3      	cmp	r3, r4
 800745e:	d908      	bls.n	8007472 <_free_r+0x46>
 8007460:	6825      	ldr	r5, [r4, #0]
 8007462:	1961      	adds	r1, r4, r5
 8007464:	428b      	cmp	r3, r1
 8007466:	bf01      	itttt	eq
 8007468:	6819      	ldreq	r1, [r3, #0]
 800746a:	685b      	ldreq	r3, [r3, #4]
 800746c:	1949      	addeq	r1, r1, r5
 800746e:	6021      	streq	r1, [r4, #0]
 8007470:	e7ed      	b.n	800744e <_free_r+0x22>
 8007472:	461a      	mov	r2, r3
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	b10b      	cbz	r3, 800747c <_free_r+0x50>
 8007478:	42a3      	cmp	r3, r4
 800747a:	d9fa      	bls.n	8007472 <_free_r+0x46>
 800747c:	6811      	ldr	r1, [r2, #0]
 800747e:	1855      	adds	r5, r2, r1
 8007480:	42a5      	cmp	r5, r4
 8007482:	d10b      	bne.n	800749c <_free_r+0x70>
 8007484:	6824      	ldr	r4, [r4, #0]
 8007486:	4421      	add	r1, r4
 8007488:	1854      	adds	r4, r2, r1
 800748a:	42a3      	cmp	r3, r4
 800748c:	6011      	str	r1, [r2, #0]
 800748e:	d1e0      	bne.n	8007452 <_free_r+0x26>
 8007490:	681c      	ldr	r4, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	6053      	str	r3, [r2, #4]
 8007496:	4421      	add	r1, r4
 8007498:	6011      	str	r1, [r2, #0]
 800749a:	e7da      	b.n	8007452 <_free_r+0x26>
 800749c:	d902      	bls.n	80074a4 <_free_r+0x78>
 800749e:	230c      	movs	r3, #12
 80074a0:	6003      	str	r3, [r0, #0]
 80074a2:	e7d6      	b.n	8007452 <_free_r+0x26>
 80074a4:	6825      	ldr	r5, [r4, #0]
 80074a6:	1961      	adds	r1, r4, r5
 80074a8:	428b      	cmp	r3, r1
 80074aa:	bf04      	itt	eq
 80074ac:	6819      	ldreq	r1, [r3, #0]
 80074ae:	685b      	ldreq	r3, [r3, #4]
 80074b0:	6063      	str	r3, [r4, #4]
 80074b2:	bf04      	itt	eq
 80074b4:	1949      	addeq	r1, r1, r5
 80074b6:	6021      	streq	r1, [r4, #0]
 80074b8:	6054      	str	r4, [r2, #4]
 80074ba:	e7ca      	b.n	8007452 <_free_r+0x26>
 80074bc:	b003      	add	sp, #12
 80074be:	bd30      	pop	{r4, r5, pc}
 80074c0:	2000144c 	.word	0x2000144c

080074c4 <_malloc_usable_size_r>:
 80074c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c8:	1f18      	subs	r0, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bfbc      	itt	lt
 80074ce:	580b      	ldrlt	r3, [r1, r0]
 80074d0:	18c0      	addlt	r0, r0, r3
 80074d2:	4770      	bx	lr

080074d4 <__retarget_lock_acquire_recursive>:
 80074d4:	4770      	bx	lr

080074d6 <__retarget_lock_release_recursive>:
 80074d6:	4770      	bx	lr

080074d8 <_init>:
 80074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074da:	bf00      	nop
 80074dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074de:	bc08      	pop	{r3}
 80074e0:	469e      	mov	lr, r3
 80074e2:	4770      	bx	lr

080074e4 <_fini>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	bf00      	nop
 80074e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ea:	bc08      	pop	{r3}
 80074ec:	469e      	mov	lr, r3
 80074ee:	4770      	bx	lr
